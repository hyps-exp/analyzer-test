C
C
C
C
C
C                              O R B I T
C
C
C                               PROGRAM
C                                 FOR
C
C         O            OPTIMIZATION OF PARAMETERS           O
C                                 AND
C         R        REPETITION OF OPTICS CALCULATIONS        R
C                                 FOR
C         B       BEAM ANALYZING OR TRANSPORT SYSTEMS       B
C                                USING
C         I           ION OPTICAL TRANSFER MATRIX           I
C                               IN THE
C         T            THIRD ORDER APPROXIMATION.           T
C
C
C
C
C
C
C    ORIGINAL VERSION 'TRIO-TRACE' BY S. M.               DEC., 1979
C    REVISED IN DATA INPUT AND RENAMED                    APR., 1981
C    REVISED FOR FACOM FORTRAN77                          SEP., 1982
C    REVISED IN FRINGING FIELD TREATMENT                  SEP., 1984
C    REVISED IN DATA INPUT FOR KINEMATICAL CORRECTION     SEP., 1984
C    REVISED FOR VAX VMS FORTRAN  by T. Icihiara          OCT., 1986
C
C
C
C
C
C
C
C
C
C
C
C                                 BY
C
C                          SHUNPEI MORINOBU
C
C        RESEARCH CENTER FOR NUCLEAR PHYSIC, OSAKA UNIVERSITY
C
C             MIHOGAOKA 10 - 1, IBARAKI, OSAKA 567, JAPAN
C
C
C
C
C
C
C
C                                 -  1  -
C
C
C     USER'S MANUAL OF PROGRAM ORBIT
C
C
C
C  A. INTRODUCTION
C
C
C       THE PROGRAM 'ORBIT' IS WRITTEN TO FACILITATE AN AUTOMATICAL
C     PARAMETER OPTIMIZATION IN AN ION-OPTICAL SYSTEM AND REPETITION OF
C     OPTICS CALCULATION WITH VARYING THE OPTICAL PARAMETERS INVOLVED.
C     SPECIAL CARE HAS BEEN PAID TO ACHIEVE A HIGH VERSATILITY OF THE
C     PROGRAM IN DEALING WITH THE PARAMETER OPTIMIZATION PROBLEMS WITH
C     VARIOUS OPTIMIZATION PURPOSES.  THE CALCULATION IS BASED ON THE
C     TRANSFER MATRIX THEORY AND THE THIRD ORDER MATRIX FORMULATIONS
C     GIVEN BY H. MATSUDA AND HIS CO-WORKERS (REF. 1 - 8) ARE USED.
C     THE PROGRAM COVERS THE OPTICAL CALCULATIONS FOR BOTH THE MAGNETIC
C     AND ELECTROSTATIC DEVICES AND, AS A CONSEQUENCE, ALSO FOR THEIR
C     HYBRID SYSTEMS.  IT IS POSSIBLE TO CORRECT THE TRANSFER MATRIX
C     FOR THE NUCLEAR REACTION KINEMATICS (REF. 9), IF NECESSARY.
C       THE LABOUR OF THE PROGRAM DEVELOPMENT HAS BEEN GREATLY REDUCED
C     BY THE USE OF PART OF THE PROGRAM 'TRIO' WRITTEN BY MATSUO ET
C     AL. (REF. 10) TO CALCULATE MATRICES OF INDIVIDUAL OPTICAL
C     ELEMENTS.  THE ESSENTIAL PARTS OF THE PRESENT SUBROUTINES
C     'MAGZER', 'MAGNRM', 'ELZER', 'ELNRM', 'TRANS' AND 'MULT' HAVE
C     BEEN TAKEN FROM THE 'TRIO'.
C
C       THE AUTHOR WOULD GREATLY APPRECIATE RECIEVING ANY INFORMATION
C     ON THE ERRORS, IF ANY, OR ANY COMMENTS ON THE PROGRAM FROM THE
C     USERS.
C
C
C
C  B. TRANSFER MATRIX CALCULATION.
C
C
C       THE 'ORBIT' CAN REPEAT THE MATRIX CALCULATION WITH VARYING SOME
C     SPECIFIED ION-OPTICAL PARAMETERS IN A STEP-WISE WAY.  THE STEP
C     WIDTH AS WELL AS INITIAL AND FINAL VALUES FOR THE VARIATIONS MAY
C     BE DEFINED BY THE INPUT DATA AND UP TO 15 PARAMETERS CAN BE
C     ASSIGNED AS 'VARIABLES'.  ARBITRARY LINEAR CONSTRAINTS MAY ALSO
C     BE IMPOSED ON THE VARIABLES (SEE BELOW).
C
C
C
C  C. PARAMETER OPTIMIZATION.
C
C
C       THE PARAMETER OPTIMIZATION IS PERFORMED BY MINIMIZING THE
C     'FIGURE OF MERIT' WHICH IS CONSIDERED TO BE A FUNCTION OF THE
C     SPECIFIED PARAMETERS.  THIS FIGURE OF MERIT FUNCTION IS ASSUMED
C     TO BE EXPRESSED IN TERMS OF THE MATRIX ELEMENTS AT ARBITRARY
C     STAGES OF THE OPTICAL SYSTEM. THE USERS CAN SELECT ONE OF THE SIX
C
C
C
C                                 -  2  -
C
C
C     BUILT-IN FUNCTIONS OR CAN DEFINE ARBITRARY FUNCTION FORM BY THE
C     INPUT DATA (SEE APPENDIX A3.).
C       THE MINIMIZATION PROCEDURE FOLLOWS THE SMPSIMPLEX METHOD.  THE
C     REFLECTION OF THE SIMPLEX VERTICES OCCURS IN A VIRTUAL
C     N-DIMENSIONED SPACE X WHICH IS CONNECTED TO THE ACTUAL PARAMETER
C     SPACE P (N-DIMENSIONED) BY
C
C                      P = M * X ,
C
C     WHERE M IS A DIAGONAL MATRIX (N * N -DIMENSIONED) WITH THE
C     DIAGONAL ELEMENTS BEING REPRESENTED BY THE ARRAY 'XSTEP' IN THE
C     PROGRAM.  THEREFORE, M DEFINES THE UNITS OF THE PARAMETERS TO BE
C     VARIED.  IF THE FUNCTION IS EXPECTED TO BE MORE SENSITIVE TO THE
C     CHANGE OF THE I-TH VARIABLE PARAMETER THAN THAT OF THE J-TH ONE,
C     M IS RECOMMENDED TO BE SET SO THAT XSTEP(I) TAKES A SMALLER VALUE
C     THAN XSTEP(J).
C       THE MINIMIZATION PROCEDURE WILL BE TERMINATED WHEN THE FUNCTION
C     VALUES AT ALL THE VERTICES OF THE SIMPLEX FALL INTO A RANGE
C     HAVING A WIDTH DEFINED BY THE INPUT DATA.  IF IT IS NECESSARY TO
C     CONTINUE THE PROCEDURE FURTHER, THE INITIAL VALUES OF THE PARA-
C     METERS AND XSTEP IN THE SUCCEEDING TRIAL MAY BE SET TO THE 'CENT-
C     ROID VALUES' AND 'MAXIMUM DIFFERENCES', RESPECTIVELY, APPEARING
C     IN THE SUMMARY REPORT OF THE MINIMIZATION PROCEDURE.
C
C
C
C  D. CONSTRAINTS
C
C
C       IN BOTH THE FUNCTIONS MENTIONED ABOVE, ONE MAY IMPOSE ARBITRARY
C     NUMBER OF LINEAR CONSTRAINTS ON THE VARIABLE PARAMETERS.  THE
C     CONSTRAINTS ARE EXPRESSED BY A MATRIX C WHICH IS ASSUMED TO WORK
C     IN THE FOLLOWING WAY;
C
C                      C * (P - P0) = 0 ,
C
C     WHERE P AND P0 IS THE COLUMN VECTORS OF THE 'VARIABLES' AND THEIR
C     INITIAL VALUES, RESPECTIVELY.  THE ORDER OF THE ELEMENTS IN P AND
C     P0 IS DETERMINED BY THE ORDER OF THE VARIABLE DEFINITION CARDS.
C     THESE CONSTRAINTS REDUCE THE DEGREES OF FREEDOM IN THE PARAMETER
C     VARIATIONS.  NOTE THAT THE INDEPENT VARIABLES ARE AUTOMATICALLY
C     DEFINED IN THE PARAMETER OPTIMIZATION PROBLEM AND BY THE INPUT
C     DATA IN THE REPETITION OF MATRIX CALCULATION.  (SEE SECT. G.)
C
C
C
C  E. LIMITATIONS AND THEIR RELAXATIONS.
C
C
C       THE PRESENT PROGRAM CAN ACCEPT AN OPTICAL SYSTEM OF UP TO 100
C     ELEMENTS.  THESE ELEMENTS INCLUDE THE VIRTUAL ONES WHICH IS
C     NEEDED FOR THE MATHEMATICAL OPERATIONS SUCH AS INITIALIZATION OF
C
C
C
C                                 -  3  -
C
C
C     THE MATRIX OR INVERSION OF THE COORDINATES.
C       IF MORE THAN 100 ELEMENTS HAVE TO BE ACCEPTED, THE ARRAY SIZE
C     OF 100 FOR THE VARIABLES 'PRM', 'NELEM', 'NICK' AND 'IPRINT' IN
C     THE LABELED COMMON BLOCKS 'SYSTEM' AND 'OPTIMIZ' SHOULD BE
C     CHANGED TO AN APPROPRIATE VALUE.  THE VALUE SHOULD ALSO BE
C     GIVEN TO THE VARIABLES 'NELMT' AND 'NPLMT' (LABELED COMMON
C     BLOCK 'LIMIT') THROUGH THE DATA STATEMENT IN THE BLOCK DATA
C     SUBPROGRAM.
C       THE MAXIMUM NUMBER OF THE VARIABLE PARAMETERS ARE ASSUMED TO BE
C     15 IN THE PRESENT PROGRAM.  TO RELAX THIS RESTRICTION, THE ARRAY
C     SIZE OF 15 FOR THE VARIABLES 'NVEL', 'NVPR', 'XI', 'XF','XSTEP',
C     'NCM', 'MXNV', 'IIMV' AND 'JJMV' IN THE LABELED COMMON BLOCK OF
C     'OPTMIZ' MAY BE CHANGED TO AN APPROPRIATE VALUE. HOWEVER, TO BE
C     NOTED IS THAT THE ABSOLUTE UPPER LIMIT LIES AT 36 FOR THE SIZE OF
C     THESE ARRAYS.
C
C
C
C  F. STRUCTURE OF INPUT DATA
C
C
C       ONE DATA DECK IS COMPOSED OF ONE OR MORE DATA SETS, EACH
C     STARTING WITH A TITLE CARD AND ENDING WITH AN END-MARK CARD.  ONE
C     DATA SET IS COMPOSED OF THE DATA OF ITEMS 1, 2, 3, 4/5, 6 AND 7
C     IN THE SPECIFICATIONS BELOW, WITH EITHER OF THE ITEMS 4 AND 5
C     BEING DENOTED BY 4/5.  THE DATA OF ITEM 7 MAY BE OMITTED IF NOT
C     NECESSARY.
C       AN OPTICAL SYSTEM IS CONSTRUCTED IN THE COMPUTER ACCORDING TO
C     THE ARRANGEMENT OF ITEM 3 DATA.  HOWEVER, WHEN MORE THAN ONE DATA
C     SETS ARE PREPARED, THE ITEM 3 DATA MAY BE OMITTED FROM THE SETS
C     EXCEPT THE FIRST ONE, IF THE OPTICAL PARAMETERS DETERMINED BY THE
C     PRECEDING PROBLEMS ARE TO BE USED.
C       THE DATA ARE RECOMMENDED TO BE ARRANGED IN AN ASCENDING ORDER
C     OF THEIR ITEM NUMBERS.  AN ADDITIONAL DATA CARD CONTAINING A
C     CHARACTER OF '1' AT THE FIRST COLUMN SHOULD ALWAYS BE PLACED AT
C     THE END OF THE DATA TO SHOW THE ABSOLUTE END OF THE DATA DECK.
C       FOR DETAILS OF THE PREPARATION OF INDIVIDUAL DATA, USERS SHOULD
C     BE REFERRED TO THE DATA SPECIFICATIONS GIVEN BELOW.
C
C
C
C  G. DATA FORMAT
C
C
C       IN THE INSTRUCTIONS OF THE DATA SPECIFICATIONS BELOW, SOME
C     DATA FORMATS ARE DESCRIBED AS 'FREE FORMAT'.  IN SUCH CASES, THE
C     DATA CAN BE PREPARED WITHOUT ANY REGARDS TO THE COLUMNS IN THE
C     CARDS.  THE NUMERIC DATA ARE ONLY REQUIRED TO BE SEPARATED BY
C     COMMAS, BLANKS, COLONS (:), SEMICOLONS (;), EQUAL SIGNS (=) OR
C     SLASHES (/).  FOR THE CONVENIENCE OF MEMORY, ARBITRARY CHARACTER
C     STRINGS STARTING WITH NON-NUMERIC CHARACTERS MAY BE INCLUDED
C     IN THE CARDS.  THESE SHOULD ALSO BE SEPARATED FROM THE DATA
C
C
C
C                                 -  4  -
C
C
C     FIGURES BY THE SAME SYMBOLS AS ABOVE.  ONE TRAIN OF NUMBERS,
C     WHICH CORRESPONDS TO ONE 'DATA LINE' (SEE SECT. H.), MAY BE
C     EXTENDED OVER MORE THAN ONE CARD, BUT ONE NUMBER SHOULD NOT BE
C     EXTENDED OVER TWO OR MORE CARDS.  EVERY 'DATA LINE' SHOULD BEGIN
C     AT A NEW CARD.  THE DATA PREPARED IN EXCESS NUMBER ARE SKIPPED
C     UNPROCESSED.
C       THERE IS NO DIFFERENCE BETWEEN THE WAYS OF PRESENTATIONS OF
C     REAL AND INTEGER NUMBERS.  FOR EXAMPLE, WHEN AN INTEGER NUMBER OF
C     5 IS REQUIRED, THE PRESENTATIONS OF '5', '5.' AND '5.0' ARE
C     EQUALLY ALLOWED BUT '5.1' WILL BE REJECTED.  LIKEWISE, '100',
C     '100.' AND '100.5' ARE LEGAL FOR THE REAL NUMBER PRESENTATION.
C     NOTE, HOWEVER, THAT THE DATA IN E-TYPE PRESENTATION ARE NOT
C     CORRECTLY PROCESSED.  UP TO 9 SIGNIFICANT FIGURES ARE ACCEPTABLE
C     FOR A A SINGLE NUMBER.  THE NUMBERS '0'S (ZEROS) SHOULD EXPLICIT-
C     LY BE GIVEN IN THE CARDS.  THE FOLLOWING FOUR EXAMPLES HAVE A
C     SAME EFFECT WHEN TWO INTEGERS AND THREE REAL NUMBERS ARE REQUIRED
C     TO PREPARE:
C
C              5         6.0       13.5,     14.5,     15.5,
C
C              5:        6;        13.5=     14.5/     15.5
C
C            A 5.0     B=6       C:13.5    D;14.5    E/15.5
C
C          AAA 5     B22=6.0   CCC:13.5  DEF;14.5,E23G/15.5
C
C
C
C
C  H. DATA SPECIFICATIONS.
C
C
C       THE TERM 'DATA LINE' IN THE FOLLOWING REPRESENTS A GROUP OF
C     DATA WHICH ARE NOT ALLOWED TO SHARE A CARD WITH THOSE OF THE
C     OTHER GROUPS.  EACH DATA GROUP WITHOUT THE DATA LINE DESCRIPTION
C     IS ASSUMED TO FORM ONE DATA LINE.
C
C
C  1. ISTOP, TEXT  (I1, 79A1)
C         ISTOP          IF ISTOP = 1, THE PROGRAM STOPS.
C         TEXT           ARBITRARY COMMENTS TO THE PROBLEM.
C
C
C  2. KEY  (A4)          INSTRUCTS WHAT KIND OF DATA FOLLOW THIS CARD.
C         KEY = DPRM     INPUT PARAMETERS FOR THE OPTICAL SYSTEM.
C         KEY = DALT     ALTERATION DATA FOR THE OPTICAL PARAMETERS.
C         KEY = DREP     DATA FOR THE REPETITION OF MATRIX CALCULATION.
C         KEY = DMIN     DATA FOR THE PARAMETER OPTIMIZATION.
C         KEY = DEND     SHOWS THE END OF A DATA SET.
C
C
C  3. KEY = DPRM         (DATA FOR SYSTEM PARAMETERS)
C
C
C
C                                 -  5  -
C
C
C     3.1. TYPE, NAME  (A4, FREE FORMAT)
C               TYPE     INDICATES THE TYPE OF THE ELEMENT WHICH SHALL
C                        HAVE THE PARAMETER SET GIVEN BY THE DATA WHICH
C                        FOLLOW THIS CARD.
C                        'TYPE' SHOULD BE ONE OF 'BEAM', 'SENS', 'TSET',
C                        'DRFT', 'XSET', 'YSET', 'MTRX', 'DEFM', 'QUDM',
C                        'HEXM', 'OCTM', 'MPLM', 'DEFE', 'QUDE', 'HEXE',
C                        'OCTE', 'MPLE', 'AAAA', 'BBBB', 'CCCC' AND
C                        'EEEE'.  FOR THE MEANINGS OF THESE 'TYPE'S,
C                        SEE APPENDIX A1.
C               NAME     NAME OF THE ELEMENT STARTING WITH A NON-NUMERIC
C                        CHARACTER.  UP TO THREE CHARACTERS ARE USABLE
C                        AS A NAME.
C     3.2. PRM(J)  (J = 1, N)   (FREE FORMAT)
C                        PARAMETERS FOR THE ELEMENT OF THE TYPE DEFINED
C                        BY THE PRECEEDING CARD.  FOR THE MEANINGS OF
C                        THE PARAMETERS, SEE APPENDIX A2. N DEPENDS
C                        ON THE TYPE OF THE ELEMENT AND IS GIVEN IN
C                        APPENDIX A1 AND A2.
C     3.3. TYPE(= ENDS)  SHOWS THE END OF THE SYSTEM PARAMETER INPUT.
C
C        NOTE:    THE PAIRS OF THE 3.1 AND 3.2 DATA SHOULD BE PREPARED
C               ACCORDING TO THE ELEMENTS IN THE OPTICAL SYSTEM.  THESE
C               SHOULD BE ARRANGED IN THE SAME ORDER AS THE IONS WOULD
C               SEE IN TRAVELLING THROUGH THE SYSTEM.  NOTE, HOWEVER,
C               THAT THE FIRST 'TYPE' CARD SHOULD ALWAYS BE OF 'BEAM'
C               AND THE LAST BE OF 'ENDS'.  ALL THE ELEMENT THUS
C               DEFINED ARE NUMBERED IN ORDER AND THE 'BEAM' WILL BE
C               ASSIGNED AS #0 ELEMENT.
C
C
C  4. KEY = DREP         (DATA FOR REPETION OF MATRIX CALCULATION)
C
C     4.1. OPTION  (80A1)  DEFINES OPTIONAL PARAMETERS FOR THE MATRIX
C                        CALCULATION PROBLEM.
C                        'OPTION' SHOULD INCLUDE ONE TO FOUR EQUATIONS,
C                        EACH STARTING WITH 'C=', 'M=', 'O=' OR 'V='
C                        AND SEPARATED BY COMMAS OR BLANKS, TO SET THE
C                        OPTIONAL PARAMETERS TO THE VALUES GIVEN AT THE
C                        RIGHTHAND SIDES.  IF ONE (OR MORE) OF THE
C                        EQUATIONS IS (ARE) OMITTED, THE CORRESPONDING
C                        PARAMETER(S) IS (ARE) SET TO ZERO.  NOTE THAT
C                        THIS CARD CAN NOT BE OMITTED AND AT LEAST A
C                        BLANK CARD IS NECESSARY EVEN WHEN ONLY ZEROS
C                        ARE REQUIRED FOR THE OPTIONAL PARAMETERS.
C               C=N      NUMBER OF CONSTRAINTS IMPOSED ON THE VARIABLE
C                        PARAMETERS.  FOR THE FUNCTIONS OF THE
C                        CONSTRAINTS, SEE 4.3.
C               M=N      NUMBER OF THE INTERMEDIATE MATRIX PRINTOUTS
C                        DESIRED.
C               O=N      LOGICAL CODE OF THE FILE FOR OPTIONAL OUTPUT
C                        OF THE RESULTS, IF DESIRED.  N SHOULD BE A
C
C
C
C                                 -  6  -
C
C
C                        POSITIVE INTEGER NUMBER OTHER THAN 5 AND 6.
C                        (THIS OPTION IS NOT EFFECTIVE IN THE PRESENT
C                         VERSION.)
C               V=N      NUMBER OF THE PARAMETERS IN THE OPTICAL SYSTEM
C                        TO BE VARIED DURING THE REPETITION OF THE
C                        MATRIX CALCULATION.  N SHOULD NOT EXCEED 15.
C
C        NOTE:    IN THE ABOVE EQUATIONS, N DENOTES ARBITRARY INTEGER
C               NUMBERS WHICH ARE IN TURN EXPRESSED IN THE FOLLOWING
C               INSTRUCTIONS (4.2 THROUGH 4.4) BY THE RESPECTIVE
C               CHARACTERS AT THE LEFT HAND SIDES.
C
C     4.2. NVEL(I), NVPR(I), XI(I),XSTEP(I), XF(I)  (I = 1, V)
C                        (FREE FORMAT, ONE DATA LINE FOR EACH I)
C                        ALSO SEE 4.3. IN CASE OF C .NE. 0.
C               NVEL     ELEMENT NUMBER OR NAME OF UP TO THREE
C                        CHARACTERS DESIGNATING THE ELEMENT TO WHICH
C                        THE VARIABLE PARAMETER BELONGS.
C               NVPR     PARAMETER NUMBER.
C               XI       INITIAL VALUE OF THE PARAMETER.
C               XSTEP    STEP WIDTH OF THE PARAMETER VARIATION.
C                        FOR NON-INDEPENDENT VARIABLES (WHEN C .NE. 0),
C                        XSTEP HAS NO MEANING.
C               XF       FINAL VALUE OF THE PARAMETER.  XF MAY BE
C                        LARGER OR SMALLER THAN XI ACCORDING AS XSTEP
C                        IS POSITIVE OR NEGATIVE.
C     4.3. C(I, J)   ((J = 1, V), I = 1, C)
C                        (FREE FORMAT, ONE DATA LINE FOR EACH I)
C                        CONSTRAINT MATRIX IMPOSED ON THE VECTOR OF THE
C                        VARIABLE PARAMETERS.  DATA SHOULD BE PREPARED
C                        ROW BY ROW, EACH CONTAINING 'V' ELEMENTS IN
C                        ONE DATA LINE.  SUCH A ROW THAT CONTAINS ONLY
C                        ZERO ELEMENTS SHOULD BE OMITTED.  THE ORDER OF
C                        THE ELEMENTS IN A ROW IS ASSUMED TO BE THE
C                        SAME WITH THAT IN THE INPUT DATA IN 4.2.. NOTE
C                        THAT THE FIRST 'V - C' PARAMETERS SPECIFIED
C                        BY THE 4.2. DATA ARE TAKEN AS INDEPENDENT
C                        VARIABLES.
C     4.4. IPRINT(I) (I = 1, M)   (FREE FORMAT)
C                        ELEMENT NUMBER OR NAME OF UP TO THREE
C                        CHARACTERS DESIGNATING THE ELEMENT AT THE
C                        EXIT OF WHICH THE MATRIX PRINTOUT IS REQUIRED.
C                        NOTE THAT IN THIS CARD NON-NUMERIC CHARACTERS
C                        EXCEPT THOSE USED IN THE ELEMENT NAMES OR
C                        DATA SEPARATOR SYMBOLS (BLANK, COMMA, :, ;, =
C                        AND /) ARE NOT ALLOWED TO USE.
C
C
C  5. KEY = DMIN         (DATA FOR PARAMETER OPTIMIZATION)
C
C     5.1. OPTION  (80A1)  DEFINES OPTIONAL PARAMETERS FOR THE
C                        MINIMIZATION PROBLEM.
C
C
C
C                                 -  7  -
C
C
C                        'OPTION' SHOULD INCLUDE ONE TO EIGHT EQUATIONS,
C                        EACH STARTING WITH EITHER OF 'C=', 'F=', 'I=',
C                        'L=', 'M=', 'O=', 'P=' AND 'V='.  THE NUMBER
C                        AT THE RIGHTHAND SIDE OF EACH EQUATION DEFINES
C                        AN OPTIONAL PARAMETER AS SHOWN BELOW.  THE
C                        EQUATIONS SHOULD BE SEPARATED FROM EACH OTHER
C                        BY COMMAS OR BLANKS.  ALL THE PARAMETERS WHICH
C                        ARE NOT GIVEN IN 'OPTION' ARE SET TO ZERO.
C                        THIS CARD CAN NOT BE OMITTED EVEN WHEN ONLY
C                        ZEROS ARE REQUIRED FOR THE OPTIONAL PARAMETERS
C                        (ALSO SEE 4.1..).
C               C=N      NUMBER OF CONSTRAINTS IMPOSED ON THE VARIABLE
C                        PARAMETERS OF THE OPTICAL SYSTEM.
C               F=N      NUMBER DESIGNATING THE FUNCTION WHICH
C                        REPRESENTS A FIGURE OF MERIT OF THE OPTICAL
C                        SYSTEM (SEE APPENDIX A3.).  IF F > 50, AN
C                        ARBITRARY FUNCTION SHOULD BE DEFINED IN THE
C                        SEPARATE DATA CARDS.
C               I=N      MAXIMUM NUMBER OF ITERATIONS.
C               L=R      CONVERGENCE WIDTH OF THE FUNCTION (SEE DESCRIP-
C                        TIONS GIVEN AT THE BEGINNING).
C               M=N      NUMBER OF THE INTERMEDIATE MATRIX PRINTOUTS
C                        DESIRED.
C               O=N      LOGICAL CODE OF THE FILE FOR OPTIONAL OUTPUT
C                        OF THE RESULTS.  N SHOULD BE A POSITIVE NUMBER
C                        OTHER THAN 5 OR 6.
C                        (THIS OPTION IS NOT EFFECTIVE IN THE PRESENT
C                         VERSION.)
C               P=1      OPTION FOR CANCELING THE PRINTOUTS IN THE
C                        MINIMIZATION PROCEDURE.
C               V=N      NUMBER OF VARIABLE PARAMETERS OF THE OPTICAL
C                        SYSTEM.  N SHOULD NOT EXCEED 15.
C
C        NOTE:    IN THE ABOVE EQUATIONS, N AND R DENOTE, RESPECTIVELY,
C               ARBITRARY INTEGER AND REAL NUMBERS WHICH ARE IN TURN
C               EXPRESSED IN THE FOLLOWING INSTRUCTIONS (5.2 THROUGH
C               5.4) BY THE CHARACTERS AT THE LEFTHAND SIDES.
C
C     5.2. EXPRESSION  (80A1)  (ONLY WHEN F > 50)
C                        ARBITRARY EXPRESSION (SEE APPENDIX A3) FOR THE
C                        FUNCTION TO BE MINIMIZED.  IF THE EXPRESSION
C                        EXTENDS OVER MORE THAN ONE CARD, EACH CARD
C                        EXCEPT THE LAST SHOULD CONTAIN THE CHARACTER
C                        'C' AT COLUMN 80.  THE MAXIMUM NUMBER OF THE
C                        CARDS USABLE IS 5.
C     5.3. NVEL(I), NVPR(I), XI(I), XSTEP(I)  (I = 1, V)
C                        (FREE FORMAT, ONE DATA LINE FOR EACH I)
C               NVEL     ELEMENT NUMBER OR NAME OF UP TO THREE
C                        CHARACTERS DESIGNATING THE ELEMENT TO WHICH THE
C                        VARIABLE PARAMETER BELONGS.
C               NVPR     PARAMETER NUMBER.
C               XI       INITIAL VALUE OF THE VARIABLE.
C
C
C
C                                 -  8  -
C
C
C                        IF XI .GE. 1.0E8, THE CORRESPONDING PARAMETER
C                        AT THE FINAL STAGE OF THE PRECEDING PROBLEM
C                        IS USED AS AN INITIAL VALUE.
C               XSTEP    SCALING FACTOR FOR THE UNIT VARIATION. (SEE
C                        SECT. C.)
C     5.4. C(I, J)   ((J = 1, V), I = 1, C)
C                        (FREE FORMAT, ONE DATA LINE FOR EACH I)
C                        CONSTRAINT MATRIX IMPOSED ON THE VECTOR OF THE
C                        VARIABLE PARAMETERS DURING THE MINIMIZATION
C                        PROCEDURE. DATA SHOULD BE PREPARED IN THE SAME
C                        WAY AS IN 4.3..  THE INDEPENDENT VARIABLES ARE
C                        AUTOMATICALLY DEFINED IN THE PROGRAM.
C     5.5. IPRINT(I) (I = 1, M)    (FREE FORMAT)
C                        SEE 4.4.  THE MATRIX IS ONLY PRINTED OUT FOR
C                        THE FINAL PARAMETER SET DETERMINED BY THE
C                        OPTIMIZATION PROCEDURE.
C
C
C  6. KEY = DALT         (DATA FOR ALTERATION OF PARAMETERS)
C
C     6.1. KEE(I), KPP(I), VALUE(I)   (I = 1, NALT)
C                        (FREE FORMAT, ONE DATA LINE FOR EACH I)
C                        DATA FOR ALTERATION OF SYSTEM PARAMETERS.
C                        NALT IS AN ARBITRARY NUMBER, BUT SHOULD NOT
C                        EXCEED 20.
C               KEE      ELEMENT NUMBER OR NAME OF UP TO THREE
C                        CHARACTERS DESIGNATING THE ELEMENT TO WHICH
C                        THE PARAMETER TO BE ALTERED BELONGS.
C               KPP      PARAMETER NUMBER.
C               VALUE    NEW VALUE OF THE PARAMETER.
C
C
C  7. KEY = DEND         DEFINES THE END OF A DATA SET AND INSTRUCT THE
C                        PROGRAM TO START CALCULATION.
C
C
C
C
C
C  I. APPENDIX
C
C
C     A1. TYPES OF ION OPTICAL ELEMENTS AND NUMBER OF THEIR PARAMETERS.
C
C
C         TYPE               MEANING                          NUMBER OF
C                                                            PARAMETERS
C         BEAM      DEFINE THE BASE OF CALCULATION.            2 OR   9
C         TSET      INITIALIZE TRANSFER MATRIX.                   0
C         SENS      INVERT COORDINATE IN THE MEDIAN PLANE.        0
C         XSET      INITIALIZE TRANSFER MATRIX IN THE MEDIAN      0
C                   PLANE.
C
C
C
C                                 -  9  -
C
C
C         YSET      INITIALIZE TRANSFER MATRIX IN THE TRANSVERSE  0
C                   PLANE.
C         MTRX      TRANSFER MATRIX TO BE INSERTED INSTEAD    12 TO 120
C                   OF A PHYSICAL DEVICE.
C         DRFT      DRIFT SPACE.                                  1
C         DEFM      MAGNETIC SECTOR FIELD.                    13 OR  17
C         QUDM      MAGNETIC QUADRUPOLE FIELD.                 4 OR   8
C         HEXM      MAGNETIC SEXTUPOLE FIELD.                      2
C         OCTM      MAGNETIC OCTAPOLE FIELD.                      2
C         MPLM      MAGNETIC MULTIPOLE FIELD.                  6 OR  10
C         DEFE      ELECTRIC SECTOR FIELD.                     9 OR  19
C         QUDE      ELECTRIC QUADRUPOLE FIELD.                 4 OR   8
C         HEXE      ELECTRIC SEXTUPOLE FIELD.                      2
C         OCTE      ELECTRIC OCTAPOLE FIELD.                      2
C         MPLE      ELECTRIC MULTIPOLE FIELD.                  6 OR  10
C         ENDS      END MARK OF THE OPTICAL SYSTEM.               0
C
C
C     A2. PARAMETERS FOR ION OPTICAL ELEMENTS
C
C         THE LENGTH UNIT IS ARBITRARY, BUT SHOULD BE CONSISTENT AMONG
C         ALL THE RELEVANT PARAMETERS IN A DATA SET.  THE MATRIX
C         ELEMENTS WILL BE GIVEN IN THE SAME LENGTH UNIT.
C
C
C         TYPE  #            MEANING
C
C         BEAM  1   DESIGNATION OF DISPERSION BASE FOR THE CALCULATION,
C                   WHICH IS STORED IN 'NGROUP' IN LABELED COMMON BLOCK
C                   'BLOCK3'.
C                   1  MOMENTUM DISPERSION (FOR MAGNETIC SYSTEM)
C                   2  ENERGY DISPERSION   (FOR ELECTRIC SYSTEM)
C                   3  ENERGY AND MASS DISPERSION (FOR HYBRID SYSTEM OF
C                      MAGNETIC AND ELECTRIC ELEMENTS).
C               2   ORDER (1 - 3) OF MATRIX CALCULATION, WHICH IS STORED
C                   IN 'NORDER' IN LABELED COMMON BLOCK 'BLOCK3'.
C               3   ANGLE (DEGREES) OF THE CENTRAL RAY WITH RESPECT TO
C                   THE PRIMARY BEAM DIRECTION AT THE TARGET.
C               4   KINEMATICAL COEFFICIENT K10
C               5   KINEMATICAL COEFFICIENT K20
C               6   KINEMATICAL COEFFICIENT K11
C               7   KINEMATICAL COEFFICIENT K30
C               8   KINEMATICAL COEFFICIENT K21
C               9   KINEMATICAL COEFFICIENT K12
C
C             NOTE: THE #3 - #9 PARAMETERS ARE ONLY NECESSARY WHEN THE
C                   MATRICES ARE TO BE CORRECTED FOR THE KINEMATICAL
C                   EFFECT OF NUCLEAR REACTION.  FOR THE COEFFICIENTS
C                   K10 - K21, SEE APPENDIX A4.
C
C         MTRX  1   DESIGNATION OF  DISPERSION BASE FOR THE INPUT
C                   MATRIX.  (SAME AS #1 PARAMETER OF BEAM)
C
C
C
C                                 -  10  -
C
C
C               2   ORDER OF THE INPUT MATRIX.  (SAME AS #2 PARAMETER
C                   OF BEAM)
C               3   NUMBER OF THE MATRIX ELEMENTS TO BE PREPARED
C               /   DEPENDS ON THE VALUES OF THE ABOVE #1 AND #2 DATA.
C               /   THE ELEMENTS SHOULD BE ARRANGED IN THE ORDER OF
C               /   X-COORDINATE ELEMENTS, Y-COORDINATE ELEMENTS,
C               /   A-COORDINATE ELEMENTS AND B-COORDINATE ELEMENTS.
C             120   FOR THE NOTATIONS X, Y, A AND B, SEE APPENDIX A6.
C
C             NOTE: THE #1 AND #2 PARAMETERS CAN NOT BE ASSIGNED AS
C                   VARIABLES.  THE VARIABLE ASSIGNMENT IS ONLY MADE
C                   ON THE MATRIX ELEMENTS VIA THE ELEMENT NUMBER IN
C                   THE ORDER OF THIS DATA ARRANGEMENT (NOT INCLUDING
C                   #1 AND #2 DATA).  THE INPUT MATRIX SHOULD NOT BE
C                   CORRECTED FOR KINEMATICAL EFFECT.
C
C         DRFT  1   LENGTH OF THE DRIFT SPACE.
C
C         DEFM  1   RADIUS OF CENTRAL ORBIT CURVATURE IN THE MAGNETIC
C                   FIELD.
C               2   DEFLECTION ANGLE IN DEGREES.
C               3   1ST ORDER MAGNETIC FIELD INDEX N1.
C               4   2ND ORDER MAGNETIC FIELD INDEX N2.
C               5   3RD ORDER MAGNETIC FIELD INDEX N3.
C                   MAGNETIC FIELD IN THE MEDIAN PLANE IS ASSUMED TO BE
C                   EXPANDED AS
C
C                       B = B0*(1 + N1*X + N2*X**2 + N3*X**3).
C
C                   WHEN N2 = 999, THE FIELD IS ASSUMED TO BE DUE TO
C                   CONICALLY SHAPED POLES WITH A GAP BEING EXPRESSED
C                   AS
C
C                       GAP = 2*(#12 PARAMETER)*( 1 - N1*X ).
C
C                   IN THIS CASE N3 HAS NO MEANING BUT AN ARBITRARY
C                   NUMBER SHOULD BE GIVEN TO IT.
C               6   ANGLE (DEGREES) BETWEEN THE CENTRAL ORBIT AND THE
C                   NORMAL TO THE EFFECTIVE FIED BOUNDARY AT ENTRANCE.
C                   (POSITIVE FOR DIVERGING EFFECT IN THE MEDIAN PLANE)
C               7   ANGLE (DEGREES) BETWEEN THE CENTRAL ORBIT AND THE
C                   NORMAL TO THE EFFECTIVE FIELD BOUNDARY AT EXIT.
C                   (POSITIVE FOR DIVERGING EFFECT IN THE MEDIAN PLANE)
C               8   INVERSE RADIUS OF CURVATURE OF ENTRANCE BOUNDARY,
C                   MULTIPLIED BY THE #1 PARAMETER. (DIMENSIONLESS,
C                   POSITIVE FOR CONVEX SURFACE)
C               9   INVERSE RADIUS OF CURVATURE OF EXIT BOUNDARY
C                   MULTIPLIED BY THE #1 PARAMETER. (DIMENSIONLESS,
C                   POSITIVE FOR CONVEX SURFACE)
C              10   THE THIRD ORDER DERIVATIVE OF THE ENTRANCE BOUNDARY
C                   CURVE, MULTIPLIED BY THE SQUARE OF THE #1 PARAMETER
C                   (DIMENSIONLESS).  THE VALUE SHOULD BE POSITIVE
C
C
C
C                                -  11  -
C
C
C                   (NEGATIVE) IF IT HAS A EFFECT OF MAKING THE
C                   BOUNDARY CURVE CONVEX (CONCAVE) AT THE LARGER
C                   RADIUS SIDE RELATIVE TO THE CENTRAL ORBIT.
C              11   THE THIRD ORDER DERIVATIVE OF THE EXIT BOUNDARY
C                   CURVE, MULTIPLIED BY THE SQUARE OF THE #1 PARAMETER
C                   (DIMENSIONLESS).  THE SAME SIGN CONVENTION AS ABOVE
C                   APPLIES TO THIS PARAMETER.
C              12   HALF GAP WIDTH OF THE POLE PIECES.
C              13   DESIGNATION PARAMETER FOR FRINGING FIELD CORRECTION.
C                   NOTE THAT THE APPROXIMATION OF SHARP CUT-OFF FIELD
C                   IS ALSO TREATED AS ONE OF THE FRINGING FIELD CORREC-
C                   TIONS. IF THIS PARAMETER IS NEGATIVE, NO CORRECTION
C                   IS MADE.  THE NON-NEGATIVE PARAMETER SHOULD BE A
C                   NUMBER OF SINGLE FIGURE OR TWO FIGURES.  THE NUMBER
C                   AT UNITS DIGIT DESIGNATES THE FRINGING FIELD SHAPE
C                   AND THAT AT TENS DIGIT DETERMINES THE POSITION
C                   WHERE THE FRINGING FIELD CORRECTION HAS TO BE TAKEN
C                   INTO ACCOUNT.  THE NUMBER OF TENS DIGIT SHOULD BE
C                   0  FOR THE CORRECTION BOTH AT THE ENTRANCE AND EXIT,
C                   1  FOR THE CORRECTION ONLY AT THE ENTRANCE,
C                   2  FOR THE CORRECTION ONLY AT THE EXIT.
C                   THE FRINGING FIELD SHAPE IS DETERMINED BY THE GAP
C                   WIDTH (G) OF THE FIELD CLAMP, THE DISTANCE (D) OF
C                   THE CLAMP TO THE POLE PIECES AND THE RADIUS (R) OF
C                   THE POLE EDGE CORNER.  MEASURING G, D AND R IN
C                   UNITS OF THE GAP OF THE POLES, THE NUMBER AT UNITS
C                   DIGIT SHOULD BE
C                   0   FOR SHARP CUT-OFF FIELD           (L=  0   ),
C                   1   FOR G=1.29, D=1.5, R=0.59  (MEAS., L=0.3859),
C                   2   FOR G=1.3 , D=1.5, R=0.0   (CALC., L=0.4782),
C                   3   FOR G=1.3 , D=2.0, R=0.0   (CALC., L=0.5573),
C                   4   FOR G=1.5 , D=1.5, R=0.0   (CALC., L=0.4858),
C                   5   FOR G=1.5 , D=2.0, R=0.0   (CALC., L=0.5621),
C                   6   FOR G=2.0 , D=1.5, R=0.0   (CALC., L=0.5075),
C                   7   FOR G=2.0 , D=2.0, R=0.0   (CALC., L=0.5761),
C                   8   FOR G=2.0 , D=2.0, R=0.5   (MEAS., L=  ?   ),
C                   9  FOR AN ARBITRARY DISTRIBUTION WITH THE FRINGING
C                      FIELD INTEGRALS GIVEN BY THE #14 - 17 PARAMETERS.
C                   HERE, L DENOTES THE DISTANCE OF THE EFFECTIVE FIELD
C                   BOUNDARY FROM THE POLE EDGE IN THE SAME UNIT.
C                     THE FIELD INTEGRALS FOR THE CASES 2 - 7 HAVE BEEN
C                   OBTAINED BY CALCULATING FIELD VALUES USING THE
C                   METHOD OF CONFORMAL MAPPING.
C              14   EXTERNALLY GIVEN FRINGING FIELD INTEGRALS WHICH
C               /   CORRESPOND, IN ORDER, TO IM1, IM2, IM3 AND IM4
C               /   DEFINED IN REF. 6.  NOTE THAT THE LENGTH UNIT FOR
C              17   THE INTEGRALS SHOULD BE THE 'HALF GAP' OF THE POLES.
C
C              NOTE:  THE PARAMETERS #14 - #17 ARE ONLY REQUIRED WHEN
C                   THE NUMBER AT UNITS DIGIT OF THE #13 PARAMETER IS 9.
C                   ALSO SEE APPENDIX A5.
C
C
C
C
C                                 -  12  -
C
C
C         QUDM  1   EFFECTIVE LENGTH OF THE QUADRUPOLE FIELD.
C               2   MAGNETIC FIELD GRADIENT DIVIDED BY THE MAGNETIC
C                   RIGIDITY.  THE DIMENSION IS (LENGTH**-2).
C               3   APERTURE RADIUS.
C               4   DESIGNATION PARAMETER FOR THE FRINGING FIELD
C                   CORRECTION. THE SAME ARGUMENTS TO THE #13 PARAMETER
C                   OF DEFM APPLY TO THIS DATA.  FOR A NON-NEGATIVE
C                   VALUE, THE NUMBER AT UNITS DIGIT SHOULD BE;
C                   0  FOR SHARP CUT-OFF FIELD,
C                   1  FOR NORMAL FRINGING FIELD DISTRIBUTION,
C                   2  FOR AN ARBITRARY DISTRIBUTION WITH THE FRINGING
C                      FIELD INTEGRALS GIVEN BY THE #5 - #8 PARAMETERS.
C               5   EXTERNALLY GIVEN FRINGING FIELD INTEGRALS WHICH
C               /   CORRESPOND, IN ORDER, TO I1, I2, I3 AND I4 DEFINED
C               /   IN REF. 8.  NOTE THAT THE LENGTH UNIT FOR THE
C               8   INTEGRALS SHOULD BE THE APERTURE RADIUS.
C
C              NOTE:  THE PARAMETERS #5 - #8 ARE ONLY REQUIRED WHEN THE
C                   NUMBER OF UNITS DIGIT OF THE #4 PARAMETER IS NOT
C                   SMALLER THAN 2.
C
C         HEXM  1   EFFECTIVE LENGTH OF THE MAGNETIC SEXTUPOLE FIELD.
C               2   SECOND DERIVATIVE OF THE MAGNETIC FIELD, DIVIDED BY
C                   THE MAGNETIC RIGIDITY.  THE DIMENSION IS (L**-3).
C
C         OCTM  1   EFFECTIVE LENGTH OF THE MAGNETIC OCTAPOLE FIELD.
C               2   THIRD DERIVATIVE OF THE MAGNETIC FIELD, DIVIDED BY
C                   THE MAGNETIC RIGIDITY.  THE DIMENSION IS (L**-4).
C         MPLM  1   EFFECTIVE LENGTH OF THE MAGNETIC MULTIPOLE FIELD.
C               2   SAME WITH #2 PARAMETER OF QUDM.(QUADRUPOLE STRENGTH)
C               3   SAME WITH #2 PARAMETER OF HEXM.(SEXTUPOLE  STRENGTH)
C               4   SAME WITH #2 PARAMETER OF OCTM.(OCTAPOLE   STRENGTH)
C               5   SAME WITH #3 PARAMETER OF QUDM.(APERTURE)
C               6   SAME WITH #4 PARAMETER OF QUDM.(FRINGE FIELD DESIG.)
C               7                                          (FRINGING )
C               /   SAME WITH #5 - #8 PARAMETERS OF QUDM.  (  FIELD  )
C              10                                          (INTEGRALS)
C
C              NOTE:  FRINGING FIELD CORRECTIONS ARE ONLY MADE FOR THE
C                   QUADRUPOLE COMPONENT.  THE SAME ARGUMENTS TO THE
C                   #4 - #6 PARAMETERS OF QUDM APPLY TO THE #6 - #10
C                   PARAMETERS.
C
C         DEFE  1   RADIUS OF CENTRAL ORBIT CURVATURE IN THE ELECTRIC
C                   FIELD.
C               2   DEFLECTION ANGLE IN DEGREES.
C               3   1ST ORDER ELECTRIC FIELD INDEX N1.
C               4   2ND ORDER ELECTRIC FIELD INDEX N2.
C               5   3RD ORDER ELECTRIC FIELD INDEX N3.
C                   ELECTRIC FIELD IN THE MEDIAN PLANE IS ASSUMED TO BE
C                   EXPANDED AS
C
C
C
C
C                                 -  13  -
C
C
C                       E = E0*(1 + N1*X + N2*X**2 + N3*X**3).
C
C                   WHEN N2 = 999, THE FIELD IS ASSUMED TO BE OF A
C                   PERFECT CYLINDRICAL OR SPHERICAL CONDENSER ACCORDING
C                   AS N1 = -1 OR -2.  IN THIS CASE, N3 HAS NO MEANING
C                   BUT AN ARBITRARY NUMBER SHOULD BE GIVEN TO IT.
C               6   INVERSE RADIUS OF CURVATURE OF ENTRANCE BOUNDARY,
C                   MULTIPLIED BY THE #1 PARAMETER.  (DIMENSIONLESS,
C                   POSITIVE FOR CONVEX SURFACE)
C               7   INVERSE RADIUS OF CURVATURE OF EXIT BOUNDARY,
C                   MULTIPLIED BY THE #1 PARAMETER.  (DIMENSIONLESS,
C                   POSITIVE FOR CONVEX SURFACE)
C               8   HALF GAP WIDTH OF THE ELECTRODES.
C               9   DESIGNATION PARAMETER FOR THE FRINGING FIELD
C                   CORRECTION. THE SAME ARGUMENTS TO THE #13 PARAMETER
C                   OF DEFM APPLY TO THIS DATA AND A NON-NEGATIVE VALUE
C                   IS EFFECTIVE FOR THE CORRECTION.
C                   MEASURING THE APERTURE WIDTH (G) OF THE EARTH PLATE
C                   AND THE DISTANCE (D) OF THE EARTH PLATE TO THE
C                   ELECTRODES IN UNITS OF THE GAP OF THE ELECTRODES,
C                   THE NUMBER AT UNITS DIGIT SHOULD BE
C                   0  FOR SHARP CUT-OFF FIELD         (L = 0     ),
C                   1  FOR G = 0.2,  D = 0.25          (L =-0.0038),
C                   2  FOR G = 0.2,  D = 0.50          (L = 0.1429),
C                   3  FOR G = 0.2,  D = 1.00          (L = 0.3320),
C                   4  FOR G = 0.5,  D = 0.25          (L = 0.0231),
C                   5  FOR G = 0.5,  D = 0.50          (L = 0.1591),
C                   6  FOR G = 0.5,  D = 1.00          (L = 0.3385),
C                   7  FOR G = 1.0,  D = 0.50          (L = 0.2117),
C                   8  FOR G = 1.0,  D = 1.00          (L = 0.3603),
C                   9  FOR AN ARBITRARY DISTRIBUTION WITH THE FRINGING
C                      FIELD INTEGRALS GIVEN BY THE #10 - 19 PARAMETERS.
C                   HERE, L DENOTES THE DISTANCE OF THE EFFECTIVE FIELD
C                   BOUNDARY FROM THE ELECTRODE EDGE IN THE SAME UNIT.
C                     THE BUILT-IN VALUES OF THE FIELD INTEGRALS FOR
C                   THE CASES 1 - 8 HAVE BEEN CALCULATED FOR THICK
C                   SHIELD GEOMETRIES USING THE METHOD OF CONFORMAL
C                   MAPPING.  FOR THIN SHIELD CASES, THE INTEGRALS ARE
C                   TABULATED IN REF. 11.  IT IS TO BE NOTED THAT THOSE
C                   VALUES ARE BASED ON THE TWO DIMENSIONAL FIELD
C                   CALCULATIOINS FOR THE ELECTRODES AND EARTH PATE
C                   APERTURES LONG ENOUGH IN THE TRANSVERSE DIRECTION.
C                   TO SIMULATE A SMALL TRANSVERSE APERTURE OF THE
C                   EARTH PLATE, A CHOICE OF THE INTEGRALS FOR A SMALL
C                   G VALUE IS NECESSARY.
C              10   EXTERNALLY GIVEN FRINGING FIELD INTEGRALS WHICH
C               /   CORRESPOND, IN ORDER, TO I1A, I1B, I4A, I4B, I5, I6,
C               /   I7, I2, I3A AND I3B IN REF. 7.  NOTE THAT THE
C               /   LENGTH UNIT FOR THE INTEGRALS SHOULD BE THE 'HALF
C              19   GAP' OF THE ELECTRODES.
C
C              NOTE:  THE PARAMETERS #10 - #12 ARE ONLY REQUIRED WHEN
C
C
C
C                                 -  14  -
C
C
C                   THE NUMBER AT UNITS DIGIT OF THE #9 PARAMETER IS 9.
C                   ALSO SEE APPENDIX A5.
C         QUDE  1   EFFECTIVE LENGTH OF THE QUADRUPOLE FIELD.
C               2   ELECTRIC FIELD GRADIENT DIVIDED BY THE ELECTRIC
C                   RIGIDITY.  THE DIMENSION IS (L**-2).
C               3   APERTURE RADIUS
C               4   DESIGNATION PARAMETER FOR THE FRINGING FIELD
C                   CORRECTION. THE SAME ARGUMENTS TO THE #13 PARAMETER
C                   OF DEFM APPLY TO THIS DATA.  FOR A NON-NEGATIVE
C                   VALUE, THE NUMBER AT UNITS DIGIT SHOULD BE
C                   0  FOR SHARP CUT-OFF FRINGING FIELD,
C                   1  FOR NORMAL FRINGING FIELD DISTRIBUTION,
C                   2  FOR AN ARBITRARY DISTRIBUTION WITH THE FRINGING
C                      FIELD INTEGRALS GIVEN BY #5 - #8 PARAMETERS.
C               5   EXTERNALLY GIVEN FRINGING FIELD INTEGRALS WHICH
C               /   CORRESPOND TO I1, I2, I3 AND I4 DEFINED IN REF. 8.
C               /   NOTE THAT THE LENGTH UNIT FOR THE INTEGRALS SHOULD
C               8   BE THE APERTURE RADIUS.
C
C              NOTE:  THE PARAMETERS #5 - #8 ARE ONLY REQUIRED WHEN THE
C                   NUMBER AT UNITS DIGIT OF THE #4 PARAMETER IS NOT
C                   SMALLER THAN 2.
C         HEXE  1   EFFECTIVE LENGTH OF THE ELECTRIC SEXTUPOLE FIELD.
C               2   SECOND DERIVATIVE OF THE ELECTRIC FIELD, DIVIDED BY
C                   THE ELECTRIC RIGIDITY.  THE DIMENSION IS (L**-3).
C
C         OCTE  1   EFFECTIVE LENGTH OF THE ELECTRIC OCTAPOLE FIELD.
C               2   THIRD DERIVATIVE OF THE ELECTRIC FIELD, DIVIDED BY
C                   THE ELECTRIC RIGIDITY.  THE DIMENSION IS (L**-4).
C
C         MPLE  1   EFFECTIVE LENGTH OF THE ELECTRIC MULTIPOLE FIELD.
C               2   SAME WITH #2 PARAMETER OF QUDE.(QUADRUPOLE STRENGTH)
C               3   SAME WITH #2 PARAMETER OF HEXE.(SEXTUPOLE  STRENGTH)
C               4   SAME WITH #2 PARAMETER OF OCTE.(OCTAPOLE   STRENGTH)
C               5   SAME WITH #3 PARAMETER OF QUDE.(APERTURE)
C               6   SAME WITH #4 PARAMETER OF QUDE.(FRINGE FIELD DESIG.)
C               7                                          (FRINGING )
C               /   SAME WITH #5 - #8 PARAMETERS OF QUDE.  ( FIELD   )
C              10                                          (INTEGRALS)
C
C              NOTE:  FRINGING FIELD CORRECTIONS ARE ONLY MADE FOR
C                   THE QUADRUPOLE COMPONENT.  THE SAME ARGUMENTS TO
C                   THE #4 - #6 PARAMETERS OF QUDE APPLY TO THE #6 -
C                   #10 PARAMETERS.
C
C
C     A3. 'FIGURE OF MERIT' FUNCTION
C
C
C        F = 1   HORIZONTAL FOCUS.
C        F = 2   VERTICAL FOCUS.
C        F = 3   ENERGY OR MOMENTUM FOCUS.
C
C
C
C                                 -  15  -
C
C
C        F = 4   SPACIAL DOUBLE FOCUS.
C        F = 5   HORIZONTAL FOCUS WITH ENERGY OR MOMENTUM FOCUS.
C        F = 6   TRIPLE FOCUS.
C        F = 7 - 50    OPEN FOR FUTURE INSTALLATIONS OF NEW FUNCTIONS.
C
C        F > 50  FUNCTION IS DEFINED BY THE EXPRESSION GIVEN IN THE
C                SEPARATE CARDS.  THE EXPRESSION SHOULD BE GIVEN IN THE
C                FORM OF AN EQUATION WHICH INCLUDES ONE SYMBOL '=' IN
C                IT.  THE RIGHTHAND SIDE OF THE EQUATION IS EFFECTIVE
C                FOR DEFINING THE FUNCTION.  THE EXPRESSION MAY BE
C                COMPOSED OF OPERATORS '+', '-', '*', '/', '**', '('
C                AND ')' OF LESS THAN 198 IN TOTAL NUMBER AND NUMERICAL
C                CONSTANTS OR TRANSFER MATRIX ELEMENTS OF LESS THAN 100
C                IN TOTAL.  THE MAXIMUM NUMBER OF THE USABLE MATRIX
C                ELEMENTS ALONE IS 50.  THE MATRIX ELEMENTS SHOULD BE
C                EXPRESSED AS 'A(I,J,K)' OR 'A(J,K)', WITH I, J AND K
C                BEING NUMBERS OR CHARACTER STRINGS.  THE FIRST
C                ARGUMENT I DENOTES THE ELEMENT, AT THE EXIT OF WHICH
C                THE MATRIX ELEMENT IS TO BE CALCULATED.  J AND K ARE
C                THE SUBSCRIPTS WHICH DEFINE THE ROW AND COLUMN OF THE
C                MATRIX.  WHEN I IS OMITTED, THE MATRIX ELEMENT AT THE
C                EXIT OF THE TOTAL SYSTEM IS EMPLOYED.  AN EXAMPLE OF
C                THE EXPRESSION IS
C
C                 FFF = A(1,2)**2+5*A(5,1,51)**2+101.5*A(3,1,4)**2,
C
C                WHICH MAY ALSO BE WRITTEN AS
C
C                 F = A(X,A)**2 + 5*A(D,Y,B)**2 + 101.5*A(Q1,A,XAA)**2,
C
C                IF THE THIRD AND FIFTH ELEMENTS ARE NAMED Q1 AND D,
C                RESPECTIVELY, IN THE CASE OF DISPERSION REPRESENTATION
C                IN MASS AND ENERGY (#1 PARAMETER OF BEAM = 3).
C                (FOR THE MATRIX NOTATIONS, ALSO SEE APPENDIX A6.)
C
C          IN THE ACTUAL PARAMETER OPTIMIZATION, THE FUNCTION SHOULD
C        BE SO DEFINED AS TO TAKE A MINIMUM VALUE FOR THE OPTIMUM SET
C        OF PARAMETERS.  TO SHOW THE PRACTICAL IDEA ABOUT THE FUNCTION
C        FORM, THE ABOVE MENTIONED SIX BUILT-IN FUNCTIONS ARE LISTED
C        BELOW:
C           1. HORIZONTAL FOCUS        ; F = A(X,A)**2
C           2. VERTICAL FOCUS          ; F = A(Y,B)**2
C           3. ENERGY OR MOMENTUM FOCUS; F = A(X,D OR T)**2
C           4. SPACIAL DOUBLE FOCUS    ; F = A(X,A)**2 + A(Y,B)**2
C           5. HORIZONTAL FOCUS WITH   ; F = A(X,A)**2 + A(X,D OR T)**2
C              ENERGY OR MOMENTUM FOCUS;
C           6. TRIPPLE FOCUS           ; F = A(X,A)**2 + A(Y,B)**2
C                                            + A(X,D OR T)**2
C          THESE FUNCTIONS ARE, OF COURSE, TOO SIMPLE TO COVER ALL OF
C        THE PROBLEMS WITH DIFFERENT OPTIMIZATION PURPOSES.  THEREFORE
C        IN EACH SPECIFIC CASE, IT USUALLY BECOMES QUITE IMPORTANT TO
C        DEFINE, BUT UNFORTUNATELY SOMETIMES DIFFICULT TO FORESEE, THE
C
C
C
C                                 -  16  -
C
C
C        BEST FORM OF THE FUNCTION WHICH FITS THE MOST TO THE SPECIFIC
C        PROBLEM.  IN ALL THE CASES, HOWEVER, IT IS CONVENIENT TO START
C        WITH SUCH A SIMPLE FUNCTION AS SEEN IN THE ABOVE EXAMPLES.
C        THE NECESSARY REVISION OF THE FUNCTION MAY BE FOUND BY REFERR-
C        ING TO THE CALCULATED PROPERTIES OF THE OPTICAL SYSTEM RESULT-
C        ING FROM THE TRYAL OPTIMIZATION.
C          IT SHOULD BE MENTIONED FOR SUCH REVISION PROCEDURES THAT
C        THE EMPLOYMENT OF ARBITRARY CONSTANTS AND THE MIXTURE OF
C        MATRIX ELEMENTS OF DIFFERENT ORDERS ARE ALLOWED IN A FUNCTION.
C        THE FOLLOWING IS AN EXAMPLE WHICH APPEARED IN THE ACTUAL
C        DESIGN CALCULATION OF A MASS SEPARATOR TO OPTIMIZE THE FIRST
C        AND SECOND ORDER PARAMETERS;
C
C        F =   1000000*( A(X,A)**2 + A(Y,B)**2 + A(X,D)**2 )
C            + 10000*A(X,AD)**2 + 30000*A(X,DD)**2
C            + ( A(X,AC)/A(A,A)/A(X,C) + K1 )**2
C            + ( A(X,CD)/A(A,A)/A(X,C) + K2 )**2  .
C
C        THIS WAS USED TO REDUCE CHROMATIC ABERRATIONS WHILE CONTROL-
C        LING THE TILTING ANGLES OF THE DIRECTIONAL AND ENERGY FOCAL
C        LINES BY GIVING PROPER VALUES TO THE CONSTANTS K1 AND K2.
C        THERE MAY BE SEEN AN INTRODUCTION OF SOME WEIGHTING FACTORS
C        ACCORDING TO THE IMPORTANCE OF THE TERMS AND ALSO A MIXTURE
C        OF THE FIRST AND SECOND ORDER MATRIX ELEMENTS.
C
C
C     A4. KINEMATICAL COEFFICIENTS
C
C
C          THE KINEMATICAL COEFFICIENTS K10 THROUGH K21 ARE RELATED TO
C        THE NUCLEAR REACTION KINEMATICS IN THE FOLLOWING WAY;
C           K10 = G10,
C           K20 = (1/2)*G20,
C           K11 = G11/G01,
C           K30 = (1/6)*G30,
C           K21 = (1/2)*G21/G01,
C           K12 = (1/2)*(G01*G12 - G02*G11)/G01**3,
C        WHERE G'S ARE THE DERIVATIVES OF THE MOMENTUM (IN CASE OF
C        DISPERSION IN MOMENTUM) OR ENERGY (IN CASE OF DISPERSION IN
C        IN ENERGY) OF THE OUTGOING PARTICLE WITH RESPECT TO THE
C        VARIABLES IN NUCLEAR REACTION.  DENOTING THE MOMENTUM OR
C        ENERGY BY P, THE PARTICLE EMISSION ANGLE WITH RESPECT TO THE
C        BEAM BY A AND REACTION Q-VALUE BY Q, THE DERIVATIVES G ARE
C        EXPRESSED AS
C           G10 = (1/P)*DP/DA,
C           G01 = (1/P)*DP/DQ,
C           G20 = (1/P)*DDP/DADA,
C           G11 = (1/P)*DDP/DADQ,
C           G02 = (1/P)*DDP/DQDQ,
C           G30 = (1/P)*DDDP/DADADA,
C           G21 = (1/P)*DDDP/DADADQ,
C           G12 = (1/P)*DDDP/DADQDQ,
C
C
C
C                                 -  17  -
C
C
C        WHERE D IS THE SYMBOL OF PARTIAL DIFFERENTIATION. THE DIFF-
C        ERENTIATIONS SHOULD BE PERFORMED AT A = OPTIC AXIS ANGLE TO
C        THE BEAM.
C          THE COEFFICIENT K10 AFFECTS THE MATRIX ELEMENTS OF ALL
C        ORDERS, K20 AND K11 THE ELEMENTS OF SECOND AND HIGHER ORDERS
C        AND K30, K21 AND K12 AFFECT THOSE OF THIRD AND HIGHER ORDERS.
C        THE CORRECTED MATRIX ELEMENTS GENERALLY INCLUDE ONE OR MORE
C        COEFFICIENTS AND SOME TRIGONOMETRIC FUNCTIONS OF THE OPTIC
C        AXIS ANGLE.  IT SHOULD BE MENTIONED THAT IN THE MATRIX
C        OBTAINED, THE NOTATION T AND D (SEE APPENDIX A6.) DO NOT
C        NECESSARILY MEAN THE ACTUAL DEVIATIONS IN MOMENTUM AND ENERGY,
C        RESPECTIVELY, FOR THE OUTGOING PARTICLES IN GENERAL.  THEY
C        ONLY HAVE THEIR CORRECT MEANINGS FOR THE PARTICLES WHICH ARE
C        EMITTED ON THE OPTIC AXIS OF THE SPECTROMETER (REF. 9).
C
C
C     A5. COMMENT ON THE FRINGING FIELD CORRECTION
C         IN THE MAGNETIC AND ELECTRIC SECTOR
C
C
C          THE FRINGING FIELD CORRECTION ASSUMES A TRANSFORMATION PLANE
C        WHICH IS PERPENDICULAR TO THE OPTIC AXIS AND INCLUDES THE
C        CENTER OF THE CIRCLE CORRESPONDING TO THE CENTRAL ORBIT.  BOTH
C        THE PARTICLE TRAJECTORY IN THE FIELD-FREE REGION AND THAT IN
C        THE FIELD ARE EXTRAPOLATED UP TO THIS PLANE AND 'CONNECTED'
C        THERE BY A FRINGING FIELD TRANSFER MATRIX.  IF WE TAKE A
C        'DESIGN OPTIC AXIS' WHICH IS A STRAIGHT LINE AT THE OUTSIDE OF
C        AND A CIRCLE AT THE INSIDE OF THE EFFECTIVE FIELD BOUNDARY
C        (EFB), IT MAY BE SEEN THAT THE OPTIC AXIS HAS DISCONTINUITIES
C        BOTH IN ITS TANGENT AND IN POSITION AT THE EFB.  TO REMOVE THE
C        DISCONTINUITIES, THE TRANSFORMATION PLANE IS INTRODUCED
C        PERPENDICULAR TO THE DESIGN OPTIC AXIS.  IN THIS CASE, THE
C        DESIGN OPTIC AXIS IS ASSUMED TO BE A CIRCLE INSIDE OF THE
C        PLANE AND PARARELL TO THE 'REAL OPTIC AXIS' IN THE FIELD-FREE
C        REGION. IT IS TO BE NOTED THAT IT PASSES THE 'DESIGN CENTER'
C        OF THE EFB (REF. 12).  THE INTERSECTION POINT OF THE DESIGN
C        AXIS WITH THE TRANSFORMATION PLANE IS LOCATED BY A SMALL
C        DISTANCE AWAY FROM THE INTERSECTION POINT WITH THE EFB.  THIS
C        DISTANCE SUBTENDS A SMALL ANGLE AT THE CENTER OF THE CENTRAL
C        ORBIT, WHICH IS GIVEN AS DA IN THE MATRIX PRINTOUT.  IF DA IS
C        POSITIVE, THE TRANSFORMATION PLANE IS OUTSIDE OF THE FIELD
C        REGION RELATIVE TO THE EFB AND VICE VERSA.  THERE IS ALSO A
C        SMALL SHIFT OF THE REAL OPTIC AXIS FROM THE DESIGN OPTIC AXIS
C        IN THE FIELD-FREE REGION, WHICH IS ALSO GIVEN AS DX IN THE
C        PRINTOUT.  IF DX IS POSITIVE, THE SHIFT IS TOWARD THE OPPOSITE
C        SIDE TO THE CENTER OF THE CENTRAL ORBIT CIRCLE.
C          THE QUANTITIES DA AND DX INCLUDE THE FIELD INTEGRALS
C        IM3 AND IM4 (REF. 6) IN THE MAGNETIC SECTOR AND I2, I3A AND
C        I3B (REF. 7) IN THE ELECTRIC CASE.  THESE INTEGRALS HAVE NO
C        EFFECT ON THE MATRIX ELEMENTS.
C
C
C
C
C
C                                 -  18  -
C
C
C
C     A6. MATRIX NOTATIONS
C
C
C     X : X              COORDINATE IN THE MEDIAN PLANE
C     A : X'             TANGENT OF INCLINATION ANGLE IN THE MEDIAN
C                        PLANE
C     Y : Y              COORDINATE IN THE TRANSVERSE PLANE
C     B : Y'             TANGENT OF INCLINATION ANGLE IN THE TRANSVERSE
C                        PLANE
C     C : (M - M0)/M0    RELATIVE MASS DEVIATION
C     D : (E - E0)/E0    RELATIVE ENERGY DEVIATION
C     T : (P - P0)/P0    RELATIVE MOMENTUM DEVIATION
C
C
C     A TRANSFER MATRIX ELEMENT ( P ! Q ) IS EXPRESSED AS A(I, J) IN
C     THE PROGRAM, WHERE I AND J CORRESPOND TO P AND Q, RESPECTIVELY,
C     AS SHOWN IN THE TABLES GIVEN IN THE LAST PAGE.
C
C
C
C
C
C
C     REFERENCES
C
C
C     1.  T. MATSUO AND H. MATSUDA,  INT. J. MASS SPECTROM. ION PHYS.,
C         6 (1971) 361
C     2   T. MATSUO, H. MATSUDA AND H. WOLLNIK,  NUCL. INSTR. METH.,
C         103 (2972) 515
C     3.  T. MATSUO,  NUCL. INSTR. METH.,  126 (1975) 273
C     4.  T.MATSUO, H. MATSUDA, H. NAKABUSHI, Y. FUJITA AND A. J. H.
C         BOERBOOM,  INT. J. MASS SPECTROM. ION PHYS., 42 (1982) 217
C     5.  H. NAKABUSHI AND T. MATSUO,  NUCL. INSTR. METH., 198 (1982)
C         207
C     6.  H.NAKABUSHI, T. SAKURAI AND H. MATSUDA,  INT. J. MASS
C         SPECTROM. ION PHYS.,  TO BE PUBLISHED (1984)
C     7.  H. MATSUDA,  NUCL. INSTR. METH.,  91 (1971) 637
C     8.  H. MATSUDA AND H. WOLLNIK,  NUCL. INSTR. METH., 103 (1972)
C         117
C     9.  S. MORINOBU,  TO BE PUBLISHED
C    10.  T. MATSUO, H. MATSUDA, Y. FUJITA AND H. WOLLNIK,  MASS
C         SPECTROSCOPY, 24 (1976) 19
C    11.  Z. H. HU, T. MATSUO AND H. MATSUDA,  INT. J. MASS SPECTROM.
C         ION PHYS., 42 (1982) 145
C    12.  H. MATSUDA AND H. WOLLNIK,  NUCL. INSTR. METH., 77 (1970)
C         283
C
C
C
C
C
C
C
C                                 -  19  -
C
C          CORRESPONDENCE OF MATRIX ELEMENT NOTATION A(I, J) TO
C                     THE REPRESENTATION ( P ! Q )
C
C                               (I TO P)
C                               --------
C              --------------------------------------------
C               I      P        (NGROUP=1,2)    (NGROUP= 3)
C              --------------------------------------------
C               1      X    FOR  J = 1 - 31      J = 1 - 49
C                      Y         J =32 - 39      J =50 - 59
C               2      A         J = 1 - 31      J = 1 - 49
C                      B         J =32 - 39      J =50 - 59
C              --------------------------------------------
C
C                                 (J TO Q)
C                                 --------
C    ------------------------------------------------------------------
C      J             Q               *      J             Q
C    --------------------------------*---------------------------------
C          NGROUP  NGROUP  NGROUP    *          NGROUP  NGROUP  NGROUP
C           = 1     = 2      = 3     *           = 1     = 2     = 3
C    --------------------------------*---------------------------------
C      1     X       X        X      *     31     TBB     DBB     AAA
C      2     A       A        A      *     32     Y       Y       AAC
C      3     T       D        C      *     33     B       B       AAD
C      4     XX      XX       D      *     34     YX      YX      ACC
C      5     XA      XA       XX     *     35     YA      YA      ACD
C      6     XT      XD       XA     *     36     YT      YD      ADD
C      7     AA      AA       XC     *     37     BX      BX      AYY
C      8     AT      AD       XD     *     38     BA      BA      AYB
C      9     TT      DD       AA     *     39     BT      BD      ABB
C     10     YY      YY       AC     *     40     -       -       CCC
C     11     YB      YB       AD     *     41     -       -       CCD
C     12     BB      BB       CC     *     42     -       -       CDD
C     13     XXX     XXX      CD     *     43     -       -       CYY
C     14     XXA     XXA      DD     *     44     -       -       CYB
C     15     XXT     XXD      YY     *     45     -       -       CBB
C     16     XAA     XAA      YB     *     46     -       -       DDD
C     17     XAT     XAD      BB     *     47     -       -       DYY
C     18     XTT     XDD      XXX    *     48     -       -       DYB
C     19     XYY     XYY      XXA    *     49     -       -       DBB
C     20     XYB     XYB      XXC    *     50     -       -       Y
C     21     XBB     XBB      XXD    *     51     -       -       B
C     22     AAA     AAA      XAA    *     52     -       -       YX
C     23     AAT     AAD      XAC    *     53     -       -       YA
C     24     ATT     ADD      XAD    *     54     -       -       YC
C     25     AYY     AYY      XCC    *     55     -       -       YD
C     26     AYB     AYB      XCD    *     56     -       -       BX
C     27     ABB     ABB      XDD    *     57     -       -       BA
C     28     TTT     DDD      XYY    *     58     -       -       BC
C     29     TYY     DYY      XYB    *     59     -       -       BD
C     30     TYB     DYB      XBB    *
C    ------------------------------------------------------------------
C    (NGROUP DENOTES THE FIRST PARAMETER OF 'BEAM'.)
C
C
C                                 -  20  -
C
C
C
      CHARACTER*4 IIBUF, ELEM, NICK, TEXT
      CHARACTER*4 AX, ACM
      INTEGER FNUM, PROFF
      COMMON/BLOCK3/NGROUP,NORDER
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
      DIMENSION X(15),ACM(2)
      DATA AX,ACM/'X',' ','*'/
C
 1000 FORMAT(     1H1,19A4,A3)
 1001 FORMAT(//1H ,'REPEAT-',I2/)
 1002 FORMAT(1H ,2X,'X',I2,' =',1PE12.4,3X,3A1,'(',A4,') - #',I2/)
 1003 FORMAT(1H )
 1010 FORMAT(//1H ,'****  RESULT FOR THE FINAL CENTROID.  ****'///1H ,
     1 4X,'SYSTEM COMPOSITION'/)
 1012 FORMAT(1H ,6X,'INITIAL SET OF VARIABLES')
 1013 FORMAT(1H+,30X,3(3X,A1,I2,'(',I2,'-',A4,'-',I1,') =',1PE11.4))
 1014 FORMAT(1H ,6X,'MINIMIZED FUNCTION')
 1015 FORMAT(1H+,33X,'F =',I3)
 1016 FORMAT(1H ,33X,A1,I2,'(',I2,'-',A4,'-',I1,') =',1PE11.4,
     1            3X,A1,I2,'(',I2,'-',A4,'-',I1,') =',1PE11.4,
     2           3X ,A1,I2,'(',I2,'-',A4,'-',I1,') =',1PE11.4)
 1017 FORMAT(1H )
 1018 FORMAT(1H+,33X,80A1)
 1019 FORMAT(1H ,33X,80A1)
 1020 FORMAT(1H ,6X,'FINAL VALUE OF FUNCTION',3X,1PE11.4)
 1021 FORMAT(1H+,47X,'(MINIMUM)')
 1022 FORMAT(1H+,47X,'(NOT TRUE MINIMUM)')
 1023 FORMAT(1H ,6X,'NUMBER OF CONSTRAINTS',6X,I2)
 1024 FORMAT(1H+,32X,A1,29X,A1,29X,A1)
 1025 FORMAT(1H ,6X,'PARAMETERS ALTERED PRIOR TO CALCULATION = ')
 1026 FORMAT(1H+,10(49X,10(I2,'-',I2,3X)/1H ))
 1027 FORMAT(////1H ,19H****  JOB TITLED  ',5A4,38H......'  IS SKIPPED U
     1NPROCESSED.  ****)
C
C
C
   20 CALL INIT
      IF(NVR.EQ.0) GO TO 100
      DO 10 I=1,NVR
   10 X(I)=XI(I)
      GO TO (100,200),NCONT
C
C     REPETITION OF MATRIX CALCULATION AS DIRECTED BY DREP DATA.
C
  100 WRITE(6,1000) TEXT
      NVRR = NVR - NC
      IF(NVRR.LE.0) GO TO 6
      K=1
      IF(NC .LE. 0) GO TO 4
      CALL CSTEP(C, 36, NC, XSTEP, NVR, INDEX)
      IF(INDEX .EQ. 0) GO TO 4
      WRITE(6, 1027) (TEXT(I), I = 1, 5)
      GO TO 20
    5 WRITE(6,1000) TEXT
    4 WRITE(6,1001) K
      DO 8 I =1, NVR
      II = NVEL(I)
      IF(II .EQ. 0) GO TO 32
      WRITE(6, 1002) I,X(I),(NICK(II,J),J=1,3),ELEM(NELEM(II)),NVPR(I)
      GO TO 8
   32 WRITE(6, 1002) I,X(I),(ACM(1),J=1,3),ELEM(17),NVPR(I)
    8 CONTINUE
    6 CALL PRMSET(X)
    1 CALL JOBREP
      IF(NVR .EQ. 0 .OR. NVRR .EQ. 0) GO TO 20
      K=K+1
      DO 2 I=1,NVRR
      S=SIGN(1.0,XSTEP(I))
      X(I)=X(I)+XSTEP(I)
      IF(S*X(I).GT.S*XF(I)) GO TO 2
      IF(NC .LE. 0) GO TO 30
      DO 9 J = 1, NC
      II = NVRR + J
    9 X(II) = X(II) + C(J, I)
   30 CONTINUE
      IF(I.EQ.1) GO TO 5
      JJ=I-1
      DO 3 J=1,JJ
      DX = X(J)
      X(J)=XI(J)
      IF(NC .LE. 0) GO TO 3
      DX = (DX - XI(J))/XSTEP(J) - 1.0
      DO 31 K = 1, NC
      II = NVRR + K
   31 X(II) = X(II) - C(K, J)*DX
    3 CONTINUE
      GO TO 5
    2 CONTINUE
      GO TO 20
C
C     PARAMETER OPTIMIZATION WITH THE FIGURE OF MERIT BEING REPRESENTED
C     BY 'F' IN THE SUBPROGRAM 'FUNCT'.
C
  200 IF(NVR.EQ.0) GO TO 100
      CALL SMPLXC(NVR,15,X,XSTEP,NC,36,C,FLIMIT,ITER,PROFF,FFF,INDEX)
      IF(INDEX .GT. -2) GO TO 16
      WRITE(6,1027) (TEXT(I), I = 1, 5)
      GO TO 20
   16 WRITE(6,1000) TEXT
      WRITE(6,1010)
      CALL SYSPT(0)
      IF(NALT .LE. 0) GO TO 14
      WRITE(6, 1025)
      II = MIN0(NALT, 20)
      WRITE(6, 1026) (KEE(I), KPP(I), I = 1, II)
      IF(MOD(II,10) .NE. 0) WRITE(6,1003)
      GO TO 15
   14 WRITE(6,1003)
   15 WRITE(6, 1014)
      IF(FNUM.GT.50) GO TO 11
      WRITE(6,1015) FNUM
      GO TO 12
   11 WRITE(6,1018) (IIBUF(1,J),J=1,80)
      IF(IBB.GT.1) WRITE(6,1019) ((IIBUF(I,J),J=1,80),I=2,IBB)
   12 WRITE(6,1020) FFF
      IF(INDEX.GT.0) WRITE(6,1021)
      IF(INDEX.LT.0) WRITE(6,1022)
      WRITE(6,1023) NC
      WRITE(6,1012)
      L=NVR/3
      IF(MOD(NVR,3).NE.0) L=L+1
      DO 13 J=1,L
      II=3*(J-1)+1
      IJ=MIN0(II+2,NVR)
      IF(J.EQ.1) WRITE(6,1013) (AX,I,NVEL(I),ELEM(NELEM(NVEL(I))),
     1                          NVPR(I),XI(I),I=II,IJ)
      IF(J.NE.1) WRITE(6,1016) (AX,I,NVEL(I),ELEM(NELEM(NVEL(I))),
     1                          NVPR(I),XI(I),I=II,IJ)
      IF(NC.GT.0) WRITE(6,1024) (ACM(NCM(I)+1), I=II,IJ)
   13 CONTINUE
      WRITE(6,1017)
      NVR = 0
      GO TO 1
      END
C
C
      SUBROUTINE JOBREP
C
C
C     CALCULATION OF THE TRANSFER MATRIX OF THE TOTAL SYSTEM.
C
      CHARACTER*4 IIBUF, ELEM, NICK, TEXT
      INTEGER FNUM, PROFF
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON /MWORK/Q(2,59), R(2,59)
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
C
C
 1000 FORMAT( //1H ,'ELEMENT',I3,3X,A4,2X,'(',3A1,')  EXIT' /)
 1001 FORMAT( //1H ,'SYSTEM  EXIT' /)
 1002 FORMAT( //1H ,'ELEMENT',I3,3X,A4,2X,'(',3A1,')  EXIT',8X,
     1     'OPTIC AXIS PARAMETERS:   DA(IN) =', F8.4, ' DEG', 4X,
     2     'DA(OUT) =', F8.4, ' DEG'/1H , 63X, 'DX(IN) =', F8.4, 8X,
     3     'DX(OUT) =', F8.4)
 1003 FORMAT( //1H ,'SYSTEM  EXIT', 26X,
     1     'OPTIC AXIS PARAMETERS:   DA(IN) =', F8.4, ' DEG', 4X,
     2     'DA(OUT) =', F8.4, ' DEG'/1H , 63X, 'DX(IN) =', F8.4, 8X,
     3     'DX(OUT) =', F8.4)
 1004 FORMAT(1H ,'EFFECTIVE MATRIX WITH KINEMATICAL CORRECTION'/)
 1005 FORMAT(1H ,'NORMAL TRANSFER MATRIX'/)
C
      II = 1
      JC = 0
      IF(NPRNT .LT. 1) GO TO 2
C
      DO 100   I = 1, NPRNT
      IPRNT = IPRINT(I)
      IF(IPRNT .LT. II .OR. IPRNT .GE. NELT) GO TO 2
      CALL TRACE(II, IPRNT, JC)
      NE = NELEM(IPRNT)
      IF(NE .EQ. 3 .OR. NE .EQ. 7) GO TO 10
        WRITE(6, 1000) IPRNT, ELEM(NE), (NICK(IPRNT, J), J = 1, 3)
        GO TO 11
   10   WRITE(6, 1002) IPRNT, ELEM(NE), (NICK(IPRNT, J), J = 1, 3),
     1                 DANGL(1), DANGL(2), DSHFT(1), DSHFT(2)
   11 IF(KINE .EQ. 0) GO TO 3
          CALL CRRCT(A, Q)
          IF(KINE .EQ. 0) GO TO 3
          WRITE(6, 1004)
          CALL PRINT(Q)
          GO TO 4
    3   WRITE(6, 1005)
        CALL PRINT(A)
    4 JC = 1
  100 II = IPRNT+1
C
    2 CALL TRACE(II,NELT,JC)
      NE = NELEM(NELT)
      IF(NE .EQ. 3 .OR. NE .EQ. 7) GO TO 12
        WRITE(6, 1001)
        GO TO 13
   12   WRITE(6, 1003) DANGL(1), DANGL(2), DSHFT(1), DSHFT(2)
   13 IF(KINE .EQ. 0) GO TO 5
        CALL CRRCT(A, Q)
        IF(KINE .EQ. 0) GO TO 5
        WRITE(6, 1004)
        CALL PRINT(Q)
        RETURN
    5 WRITE(6, 1005)
      CALL PRINT(A)
      RETURN
      END
C
C
      SUBROUTINE SMPLXC(NVR,ND,XV,VSTEP,NC,NCD,C,FLIMIT,ITER,
     1                  IPRNT,FF,INDEX)
C
C
C     MINIMIZATION OF A FUNCTION BY SYMPLEX METHOD.
C     ARBITRARY LINEAR CONSTRAINTS MAY BE IMPOSED ON THE VARIABLES.
C     THIS SUBPROGRAM SHOULD BE USED IN CONJUNCTION WITH THE SUBPROGRAMS
C     CONV, SUBSP, DINV AND FUNCT.  THE FUNCTION MAY ARBITRARILY DEFINED
C     BY THE USERS THROUGH THE PREPARATION OF FUNCT.
C
C     NVR      NUMBER OF VARIABLES.  (.LE.36)
C     ND       ARRAY SIZE OF XV DEFINED IN THE MAIN ROUTINE.
C     XV       ARRAY OF THE VARIABLES.  XV CONTAINS INITIAL VALUES WHEN
C              ENTERING AND RESULTS WHEN RETURNING FROM THIS ROUTINE.
C     VSTEP    ARRAY CONTAINING SCALING FACTORS FOR THE VARIABLES.
C              A SYMPLEX VERTEX MAY BE CONVERTED INTO REAL SET OF
C              VARIABLES BY MULTIPLYING VSTEP(I)'S TO THE VERTEX
C              COORDINATES.
C     NC       NUMBER OF CONSTRAINTS.
C     NCD      ARRAY SIZE OF THE CONSTRAINT MATRIX C.  ALSO SEE THE
C              DIMENSION STATEMENT FOR C IN THIS SUBPROGRAM.
C     C        CONSTAINT MATRIX.  ALSO SEE BELOW.
C     FLIMIT   IF THE FUNCTION VALUES AT ALL THE VERTICES OF THE SYMPLEX
C              ARE IN AGREEMENT WITHIN FLIMIT, THE PROGRAM RECOGNIZES
C              THE CENTROID OF THE SYMPLEX TO BE THE MINIMUM POINT.
C     FF       FUNCTION VALUE AT THE CENTROID OF THE FINAL SYMPLEX.
C     ITER     MAXIMUM NUMBER OF TIMES OF SYMPLEX REFLECTION.
C     IPRNT    INTERMEDIATE PRINTOUT OPTION.  THE INTERMEDIATE PRINTOUT
C              ARE AVAILABLE FOR IPRNT = 0.
C     INDEX    IF THE MINIMUM POINT IS FOUND, INDEX IS SET TO 1 AND IF
C              OTHERWISE TO -1.  HOWEVER, IF THE CONSTRAINT MATRIX IS
C              NOT PROPERLY GIVEN, IND IS SET TO -2 AND NO SEARCH FOR
C              A MINIMUM IS PERFORMED.
C
C       THE CONSTRAINTS ARE ASSUMED TO WORK IN THE FOLLWING WAY;
C
C                    C * ( XV - XV0 ) = 0 ,
C
C     WHERE XV IS THE VECTOR OF THE VARIABLE PARAMETERS AND XV0 IS THE
C     INITIAL VALUE OF XV.
C
C       THE SUBPROGRAM FUNCT SHOULD HAVE THE FORM FUNCT(X,F,NVR,ND),
C     WHERE X IS THE ARRAY OF THE VARIABLES AND F IS THE FUNCTION VALUE
C     FOR THAT X.
C
C
      CHARACTER*4 KFM1, KFM2, KFM3, LFM1, LFM2, KOMT, ID, L
      DOUBLE PRECISION T
      DIMENSION  XV(ND),VSTEP(ND),C(NCD,NCD),LFM1(16,2),LFM2(5),
     1           KFM1(193),KFM2(91),KFM3(17),ID(4),KOMT(5)
      COMMON /WORK/ XT(36),XTR(36),X(36,37),XRL(36,37),XG(36),XR(36),
     1              XE(36),XC(36),XMX(36),XMN(36),F(37),XRR(36)
      DATA INITL,NVT/2*0/
C      DATA LFM1/4H(1H ,4H,1X,,4H 7X,,4H2HIT,4H,1X,,4H2HVT,4H,1HX,4H,1X,,
C     1          4H8X, ,4H1HX,,4HI2, ,4H    ,4H2H F,4H,8X,,4H2HFM,4H2HAX,
C     2          4H/1H ,4H,1X,,4H 8X,,4H    ,4H7X  ,3*4H    ,
C     3          4H,6X,,4H2H(X,4H,I2,,4H1H) ,4*4H    /
C      DATA KFM2(1),KFM2(2),KFM2(4),KFM2(5),KFM2(6),KFM2(7),KFM2(91),
C     1     KFM1(193),KFM3(1) /4H(/1H,3H ,  ,4HI3, ,4HI3, ,4HA4, ,4HA2  ,
C     2                        4H   ),4H  /),4H(1H+/
C      DATA LFM2/4H,1PE,4H11.3,4H/1H ,4H,11X,4H 7X,/
C      DATA KOMT/4H    ,4H  RF,4H  CN,4H  EX,4H  RD/
C      DATA ID/2H S,2H P,2H F,2H  /
      DATA LFM1/'(1H ',',1X,',' 7X,','2HIT',',1X,','2HVT',',1HX',',1X,',
     1          '8X, ','1HX,','I2, ','    ','2H F',',8X,','2HFM','2HAX',
     2          '/1H ',',1X,',' 8X,','    ','7X  ',3*'    ',
     3          ',6X,','2H(X',',I2,','1H) ',4*'    '/
      DATA KFM2(1),KFM2(2),KFM2(4),KFM2(5),KFM2(6),KFM2(7),KFM2(91),
     1     KFM1(193),KFM3(1) /'(/1H',' , ' ,'I3, ','I3, ','A4, ','A2  ',
     2                        '   )','  /)','(1H+'/
      DATA LFM2/',1PE','11.3','/1H ',',11X',' 7X,'/
      DATA KOMT/'    ','  RF','  CN','  EX','  RD'/
      DATA ID/' S',' P',' F','  '/
      DATA ALPHA,BETA,GAMMA/1.0,0.5,2.0/
C
  107 FORMAT(1H1///1H ,27(1H*),45H  MINIMIZATION  PROCEDURE  (SYMPLEX ME
     1THOD)  ,27(1H*)//1H ,7X,'NUMBER OF VARIABLES   =',I4/
     2                 1H ,7X,'NUMBER OF CONSTRAINTS =',I4/
     3                 1H ,7X,'REFLECTION LIMIT      =',I4/
     4                 1H ,7X,'CONVERGENCE LIMIT     =',1PE11.4/)
  108 FORMAT(1H ,11X,13HINITIAL VALUE,2X,12HSCALE FACTOR,5X,16HNOTATIONS
     1(COL.4),4X,16HNOTATIONS(COL.4)//1H ,7X,6HX 1 = ,1PE11.4,2X,E11.4,
     2   6X,15HRF - REFLECTION,5X,19HS - SUCCEEDED TRIAL/1H ,43X,16HCN -
     3 CONTRACTION,4X,29HP - PARTIALLY SUCCEEDED TRIAL)
  109 FORMAT(1H+,7X,1HX,I2,3H = ,1PE11.4,2X,E11.4)
  110 FORMAT(1H ,43X,14HEX - EXPANSION,6X,16HF - FAILED TRIAL)
  111 FORMAT(1H ,43X,14HRD - REDUCTION)
  112 FORMAT(1H ,7X,1HX,I2,3H = ,1PE11.4,2X,E11.4)
  113 FORMAT(/)
  114 FORMAT(///1H ,5X,'****  CONVERGENCE LIMIT ATTAINED AT IT =',I5,
     1              '.  ****')
  115 FORMAT(1H ,3X,50H*****  CHARACTERISTICS OF THE FINAL SYMPLEX  ****
     1*///1H ,14X,14H** CENTROID **, 7X,13H** MAXIMUM **,4X,13H** MINIMU
     2M **,4X,11H** DIFF. **)
  119 FORMAT(///1H ,5X,'*****  ITERATION LIMIT EXCEEDED AT IT =',I5,
     1              '.  *****')
  120 FORMAT(/1H ,10X,1HX,I2,2H =,1PE12.5,8X,E12.5,5X,E12.5,5X,E10.3)
  121 FORMAT(/1H ,10X,5HF   =,1PE12.5,8X,E12.5,5X,E12.5,5X,E10.3)
  122 FORMAT(1H1///1H ,27(1H*),'  MINIMIZATION  REPORT  (SYMPLEX METHOD)
     1  ',27(1H*)///1H ,10X,'NUMBER OF VARIABLES   =',I4//
     2            1H ,10X,'NUMBER OF CONSTRAINTS =',I4//
     3            1H ,10X,'REFLECTION LIMIT      =',I4//
     4            1H ,10X,'CONVERGENCE LIMIT     =',1PE11.4)
  123 FORMAT(///1H ,3X,'****  INITIAL SYMPLEX CONSTRUCTION  ****'///1H ,
     1              14X,'** CENTROID **',7X,'** MAXIMUM **',4X,
     2              '** MINIMUM **',4X,'** DIFF. **',4X,
     3              '** SCALE FACTOR **')
  124 FORMAT(/1H ,10X,1HX,I2,2H =,1PE12.5,8X,E12.5,5X,E12.5,5X,E10.3,8X,
     1            E12.5)
  125 FORMAT(/1H ,5X,'**********   SUCCESSFUL MINIMIZATION   ***********
     1'///)
  126 FORMAT(/1H ,5X,'**********   INCOMPLETE MINIMIZATION   ***********
     1'///)
  127 FORMAT(//1H ,96(1H*))
C
      INDEX=1
      NXD=ND
      NCDD=NCD
      FF=0.0
      IIPRNT=0
      IF(IPRNT.EQ.0) GO TO 802
      WRITE(6,122) NVR,NC,ITER,FLIMIT
      NVT=0
      GO TO 70
  802 WRITE(6,107) NVR,NC,ITER,FLIMIT
      WRITE(6,108) XV(1),VSTEP(1)
      J=2
      IF(NVR.GE.2) WRITE(6,109) J,XV(2),VSTEP(2)
      WRITE(6,110)
      J=3
      IF(NVR.GE.3) WRITE(6,109) J,XV(3),VSTEP(3)
      WRITE(6,111)
      J=4
      IF(NVR.GE.4) WRITE(6,109) J,XV(4),VSTEP(4)
      IF(NVR.GE.5) WRITE(6,112) (J,XV(J),VSTEP(J),J=5,NVR)
      WRITE(6,113)
      IF(INITL.EQ.0.OR.NVR.NE.NVT) GO TO 81
      WRITE(6,KFM1) (I,I=1,NVR)
      GO TO 70
C
C  FORMAT GENERATION
C
   81 INITL=1
      NVT=NVR
      LN1=(NVR-1)/9
      LNT=LN1+1
      LN2=NVR-9*LN1
      J2=1
      LP=10
      L=LFM1(16,2)
      DO 71 J=1,LNT
      JJ=48*(J-1)
      IF(J.GE.2) J2=2
      DO 72 I=1,8
      IJ=JJ+I
   72 KFM1(IJ)=LFM1(I,J2)
      IF(NVR.GE.9) KFM1(JJ+3)=L
      IF(J.EQ.LNT) LP=LN2+1
      IO=8
      DO 73 I=1,LP
      II=4*I+4
      IF(I.EQ.LP) IO=12
      DO 73 N=1,4
      NN=JJ+II+N
   73 KFM1(NN)=LFM1(IO+N,J2)
      IF(J.EQ.1) KFM1(NN-4)=LFM1(9,1)
   71 CONTINUE
      KFM1(NN+1)=KFM1(193)
C
      KFM2(3)=L
      IF(NVR.LT.9) KFM2(3)=LFM2(5)
      IO=7
      DO 76 I=1,NVR
      II=IO+2*I-1
      KFM2(II)=LFM2(1)
      KFM2(II+1)=LFM2(2)
      IF(MOD(I,9).NE.0.OR.NVR.EQ.I) GO TO 76
      KFM2(II+2)=LFM2(3)
      KFM2(II+3)=LFM2(4)
      IO=IO+2
   76 CONTINUE
      IF(NVR.GT.9) GO TO 77
   78 KFM2(II+2)=LFM2(1)
      KFM2(II+3)=LFM2(2)
      II=II+4
      GO TO 80
   77 NN=9-LN2
      IF(NN.EQ.0) GO TO 78
      II=II+2
      JJ=II+NN-1
      DO 79 I=II,JJ
   79 KFM2(I)=LFM2(4)
      II=I-1
      GO TO 78
   80 KFM2(II)=KFM2(91)
      WRITE(6,KFM1) (I,I=1,NVR)
C
      LPP=MAX0(MIN0(1,LN1)*9,LN2)+3
      DO 800 I=2,LPP
  800 KFM3(I)=LFM2(4)
      I = LPP
      IF(NVR.GE.9) GO TO 801
      KFM3(I+1)=LFM1(2,1)
      KFM3(I+2)=LFM1(5,2)
      I=I+2
  801 KFM3(I+1)=LFM2(1)
      KFM3(I+2)=LFM2(2)
      KFM3(I+3)=KFM2(91)
C
C  CONSTRUCTION OF AN INITIAL SYMPLEX
C
   70 IT=0
      NVRR=NVR-NC
      NVTX=NVRR+1
      VTXN=NVTX
      VRN=NVRR
      BET1=1.0D0-BETA
      GAM1=1.0D0-GAMMA
      DO 805 I = 1, NVR
  805 IF(VSTEP(I) .EQ. 0.0) VSTEP(I) = 1.0
      IF(NC .EQ. 0) GO TO 803
      DO 804 I = 1, NC
      DO 804 J = 1, NVR
  804 C(I,J) = C(I,J)*VSTEP(J)
      CALL SUBSP(C, NCDD, NVR, NC, IND)
      IF(IND .EQ. 0) GO TO 803
      INDEX = -2
      RETURN
  803 DO 1 I=1,NVRR
      DO 1 J=1,NVTX
    1 X(I,J)=0.0D0
      T=0.0D0
      DO 2 J=2,NVTX
      IF(J-3) 2,3,10
   10 JJ=J-3
      DO 4 I=1,JJ
    4 X(I,J)=X(I,J-1)
    3 X(J-2,J)=X(J-2,J-1)/FLOAT(J-1)
      T=0.0D0
      DO 6 K=1,J-2
    6 T=T+X(K,J)**2
    2 X(J-1,J)=DSQRT(1.0D0-T)
      DO 7 I=1,NVRR
      T=0.0D0
      DO 8 J=1,NVTX
    8 T=T+X(I,J)
      T = T/VTXN
      DO 11 J = 1, NVTX
   11 X(I,J) = X(I,J)-T
    7 XG(I) = 0.0
      J=0
      CALL FUNCT(XV,FOO,NVR,ND)
      IF(IPRNT.EQ.0) WRITE(6,KFM2) IT,J,KOMT(1),ID(4),( XV(K),K=1,NVR),
     1                             FOO
C
C  CALCULATION OF FUNCTIONAL VALUES AND THE SEARCH FOR THE VERTEXES
C  GIVING THE MAXIMUM, SECOND MAXIMUM AMD MINIMUM VALUES.
C
      DO 12 J=1,NVTX
      DO 13 I = 1, NVRR
   13 XT(I) = X(I,J)
      CALL CONV(NVR,NC,NXD,NCDD,XTR,C,XT,XV,VSTEP)
      DO 131 I = 1, NVR
  131 XRL(I,J) = XTR(I)
      CALL FUNCT(XTR,F(J),NVR,36)
   12 IF(IPRNT.EQ.0) WRITE(6,KFM2) IT,J,KOMT(1),ID(4),(XTR(K),K=1,NVR),
     1                             F(J)
      JMAX=1
      JMIN=1
   40 DO 14 J=1,NVTX
      T=F(J)
      IF(T.GE.F(JMAX)) JMAX=J
      IF(T.LE.F(JMIN)) JMIN=J
   14 CONTINUE
      IF(IPRNT.EQ.0) WRITE(6,KFM3) F(JMAX)
   28 JSMAX=1
      IF(JMAX.EQ.1) JSMAX=2
      FMX=F(JMAX)
      DO 15 J=1,NVTX
      T=F(J)
      IF(T.GE.F(JSMAX).AND.T.LT.FMX) JSMAX=J
   15 CONTINUE
      IF(IPRNT.EQ.0) GO TO 26
      IF(IT.GT.0.OR.IIPRNT.NE.0) GO TO 26
      DO 151 I=1,NVR
      XMAX=XRL(I,1)
      XMIN=XMAX
      DO 152 J=1,NVTX
      T=XRL(I,J)
      IF(T.GE.XMAX) XMAX=T
      IF(T.LE.XMIN) XMIN=T
  152 CONTINUE
      XMX(I) = XMAX
      XMN(I) = XMIN
  151 XTR(I)= XMAX-XMIN
      DEL=F(JMAX)-F(JMIN)
      WRITE(6,123)
      WRITE(6,124) (I,XV(I),XMX(I),XMN(I),XTR(I),VSTEP(I),I=1,NVR)
      WRITE(6,121) FOO,F(JMAX),F(JMIN),DEL
      IIPRNT=1
      GO TO 19
C
C  CONVERGENCE CHECK
C
   26 CONTINUE
      DEL=F(JMAX)-F(JMIN)
      IF(IT.EQ.0) GO TO 19
      DO 17 I=1,NVRR
      T=0.0D0
      DO 18 J=1,NVTX
   18 T=T+X(I,J)
   17 XG(I)=T
   19 IF(DEL.LT.FLIMIT) GO TO 200
      IF(IT.LT.ITER) GO TO 20
C
C  TERMINATION
C
      INDEX=-1
      WRITE(6,119) IT
      GO TO 27
  200 WRITE(6,114) IT
   27 CONTINUE
      DO 21 I=1,NVR
      XMAX=XRL(I,1)
      XMIN=XMAX
      TT = 0.0
      DO 211 J=1,NVTX
      T=XRL(I,J)
      IF(T.GE.XMAX) XMAX=T
      IF(T.LE.XMIN) XMIN=T
  211 TT = TT + T
      XT(I)= XMAX-XMIN
      XMX(I)=XMAX
      XMN(I)=XMIN
   21 XV(I) = TT/VTXN
      CALL FUNCT(XV,FF,NVR,ND)
      IF(INDEX.LT.0) GO TO 212
      IF(FF.GT.F(JMIN)) INDEX=-1
  212 IF(INDEX.GT.0) WRITE(6,125)
      IF(INDEX.LT.0) WRITE(6,126)
      WRITE(6,115)
      WRITE(6,120) (J,XV(J),XMX(J),XMN(J),XT(J),J=1,NVR)
      WRITE(6,121) FF,F(JMAX),F(JMIN),DEL
      IF(IPRNT.NE.0) WRITE(6,127)
      RETURN
C
C  REFLECTION AND COMPARISON
C
   20 DO 22 I=1,NVRR
      XG(I)=(XG(I)-X(I,JMAX))/VRN
   22 XR(I) = (1.0D0+ALPHA)*XG(I)-ALPHA*X(I,JMAX)
      CALL CONV(NVR, NC, NXD, NCDD, XRR, C, XR, XV, VSTEP)
      CALL FUNCT(XRR,FR,NVR,36)
      IT=IT+1
      KOM=2
      IID=3
      IF(FR.GE.F(JMAX)) GO TO 233
      IID=2
      FMX=FR
      IF(FR.GT.F(JSMAX)) GO TO 233
      IID=1
      FMX=F(JSMAX)
  233 IF(IPRNT.NE.0) GO TO 235
      WRITE(6,KFM2) IT,JMAX,KOMT(KOM),ID(IID),(XRR(K),K=1,NVR),FR
      IF(IID.LE.2) WRITE(6,KFM3) FMX
  235 GO TO (234,23,34),IID
  234 IF(FR.LT.F(JMIN)) GO TO 24
   30 DO 25 I=1,NVRR
   25 X(I,JMAX)=XR(I)
      DO 250 I = 1, NVR
  250 XRL(I, JMAX) = XRR(I)
      F(JMAX)=FR
   33 JMAX=JSMAX
      IF(IT-ITER) 28,26,26
C
C  EXPANSION AND COMPARISON
C
   24 DO 29 I=1,NVRR
   29 XE(I) = GAMMA*XR(I)+GAM1*XG(I)
      CALL CONV(NVR, NC, NXD, NCDD, XTR, C, XE, XV, VSTEP)
      CALL FUNCT(XTR,FE,NVR,36)
      IDD=1
      IF(FE.LT.FR) GO TO 31
      IDD=3
   31 IF(IPRNT.EQ.0) WRITE(6,KFM2) IT,JMAX,KOMT(4),ID(IDD),
     1                             (XTR(K),K=1,NVR),FE
      JMIN=JMAX
      IF(IDD.GE.2) GO TO 30
      DO 32 I=1,NVRR
   32 X(I,JMAX)=XE(I)
      DO 320 I = 1, NVR
  320 XRL(I, JMAX) = XTR(I)
      F(JMAX)=FE
      GO TO 33
   23 DO 35 I=1,NVRR
   35 X(I,JMAX)=XR(I)
      DO 321 I = 1, NVR
  321 XRL(I, JMAX) = XRR(I)
      F(JMAX)=FR
C
C  CONTRACTION
C
   34 DO 37 I=1,NVRR
   37 XC(I) = BETA*X(I,JMAX)+BET1*XG(I)
      CALL CONV(NVR, NC, NXD, NCDD, XTR, C, XC, XV, VSTEP)
      CALL FUNCT(XTR,FC,NVR,36)
      IDD=3
      IF(FC.GE.F(JMAX)) GO TO 388
      IDD=1
      FMX=FC
      IF(FC.LE.F(JSMAX)) FMX=F(JSMAX)
  388 IF(IPRNT.EQ.0) WRITE(6,KFM2) IT,JMAX,KOMT(3),ID(IDD),
     1                             (XTR(K),K=1,NVR),FC
      IF(IDD.GE.2) GO TO 38
      IF(IPRNT.EQ.0) WRITE(6,KFM3) FMX
      DO 39 I=1,NVRR
   39 X(I,JMAX)=XC(I)
      DO 391 I = 1, NVR
  391 XRL(I, JMAX) = XTR(I)
      F(JMAX)=FC
      IF(FC-F(JSMAX)) 399,398,26
  399 IF(FC.LT.F(JMIN)) JMIN=JMAX
      JMAX=JSMAX
  398 IF(IT-ITER) 28,26,26
C
C  REDUCTION
C
   38 DO 41 J=1,NVTX
      DO 42 I=1,NVRR
      T=0.5D0*(X(I,J)+X(I,JMIN))
      X(I,J)=T
   42 XT(I)=T
      CALL CONV(NVR, NC, NXD, NCDD, XTR, C, XT, XV, VSTEP)
      DO 421 I = 1, NVR
  421 XRL(I, J) = XTR(I)
      CALL FUNCT(XTR,F(J),NVR,36)
   41 IF(IPRNT.EQ.0) WRITE(6,KFM2) IT,J,KOMT(5),ID(4),
     1                             (XTR(K),K=1,NVR),F(J)
      GO TO 40
      END
C
C
      SUBROUTINE CONV(NVR, NC, NXD, NCD, XT, C, X, XO, VSTEP)
C
C
C     CONVERT A VECTOR REPRESENTATION IN THE SUBSPACE TO THAT IN THE
C     REAL SPACE.
C
C
      DIMENSION XT(NXD), C(NCD, NCD), X(NXD), XO(NXD), VSTEP(NXD)
C
      IF(NC .LE. 0) GO TO 10
      NVRR = NVR - NC
      DO 1 I = 1, NVR
        T = 0.0
      DO 2 J = 1, NVRR
    2   T = T + C(I, J) * X(J)
    1 XT(I) = T * VSTEP(I) + XO(I)
      RETURN
C
   10 DO 11 I = 1, NVR
   11 XT(I) = X(I) * VSTEP(I) + XO(I)
      RETURN
      END
C
C
      SUBROUTINE SUBSP(C, ND, NV, NC, INDEX)
C
C
C     GENERATE ORTHONORMAL SUBSPACE BASE VECTORS AND A TRANSFORMATION
C     MATRIX TO CONVERT A VECTOR REPRESENTATION IN THE SUBSPACE TO THAT
C     IN THE ORIGINAL SPACE.  THE SUBSPACE IS DEFINED BY
C
C                    C * V = 0 .
C
C     WHERE C IS AN (NC * NV)-DIMENSIONED CONSTRAINT MATRIX AND V IS AN
C     ARBITRARY NV-DIMENSIONED VECTOR.  THE TRANSFORMATION MATRIX WILL
C     BE GIVEN IN C (NV * NC MATRIX).  IF THE SUBSPACE CAN SUCCESSFULLY
C     BE  DEFINED, IND WILL BE SET TO 0 AND IF OTHERWISE TO 1.
C        ND, NV AND NC SHOULD NOT EXCEED 36.  ALSO SEE THE DIMENSION
C     STATEMENTS IN THIS SUBPROGRAM.
C
C
      DOUBLE PRECISION CC, DET, T, TT
      COMMON /WORK/ CC(36, 36), IPERM(36), T, TT, DET, FREE(391)
      DIMENSION C(ND, ND)
      DATA NCC, MCC/ 36, 36/
C
 1000 FORMAT(////1H ,'****  ILLEGAL CONSTRAINT MATRIX  ****')
 1001 FORMAT(////1H ,'****  IMPROPER CONSTRAINTS  ****')
C
C
C     INITIALIZATION
C
      INDEX = 0
      NFREE = NV - NC
      DO 1 I = 1, NV
        IPERM(I) = I
      DO 1 J = 1, NV
    1 CC(I, J) = 0.0D0
C
C     REARRANGE C AND COPY IT ON CC.
C
      DO 10 I = 1, NC
        K = 0
        DO 11 J = 1, NV
          IF(C(I, IPERM(J)) .EQ. 0.0) GO TO 11
           K = 1
           IF(J .LT. I) GO TO 11
           IF(J .EQ. I) GO TO 10
           K = IPERM(J)
           IPERM(J) = IPERM(I)
           IPERM(I) = K
           GO TO 10
   11   CONTINUE
        IF(K .EQ. 0) GO TO 51
   10 CONTINUE
      IDET = 0
      IEX = 0
   13 DO 12 I = 1, NC
      DO 12 J = 1, NV
   12 CC(I, J) = C(I, IPERM(J))
      IF(IDET .NE. 0) GO TO 29
      JI = NC + 1
      DO 14 I = 1, NC
      DO 14 J = JI, NV
   14 CC(I, J) = -CC(I, J)
C
C     GENERATE AN OPERATOR TO TRANSFORM A VECTOR REPRESENTATION.
C
      CALL DINV(CC, NCC, MCC, NC, NV, DET, IND, 1)
      IF(IND .GE. 4) GO TO 51
      IF(IND .EQ. 1) GO TO 24
        IF(IEX .NE. 0) GO TO 52
        IDET = 1
        GO TO 13
   24 DO 21 I = 1, NFREE
      II = NC + I
          DO 22 J = 1, NC
   22     CC(J, I) = CC(J, II)
        DO 23 J = 1, NFREE
   23   CC(NC + J, I) = 0.0D0
   21 CC(II, I) = 1.0D0
      GO TO 37
C
C     CHECK AUTHOGONALITY OF THE CONSTRAINT MATRIX.
C
   29 IEX = NC
      T = 0.0D0
      DO 201 I = 1, NC
  201 T = T + CC(I,1)**2
      T = DSQRT(T)
        DO 202 I = 1, NC
  202   CC(I,1) = CC(I, 1)/T
      DO 203 I = 2, NC
        II = I - 1
  208   CONTINUE
          DO 204 J = 1, II
          T = 0.0D0
          TT = 0.0D0
            DO 205 K = 1, NC
            T = T + CC(K, J)*CC(K, I)
  205       TT = TT + CC(K, I)**2
          TT = DSQRT(TT)
          CO = ABS(ABS(T/TT) - 1.0)
          IF(CO .GT. 1.0E-6) GO TO 206
            IEX = IEX + 1
            IF(IEX .GT. NV) GO TO 52
            KK = IPERM(IEX)
            IPERM(IEX) = IPERM(I)
            IPERM(I) = KK
              DO 207 K = 1, NC
              CC(K, I) = C(K, IPERM(I))
  207         CC(K, IEX) = C(K, IPERM(IEX))
              GO TO 208
  206       IF(I .EQ. NC .AND. J .EQ. II) GO TO 203
            DO 209 K = 1, NC
  209       CC(K, I) = CC(K,I) - T*CC(K, J)
  204     CONTINUE
          TT = 0.0D0
          DO 210 K = 1, NC
  210     TT = TT + CC(K, I)**2
          TT = DSQRT(TT)
            DO 211 K = 1, NC
  211       CC(K, I) = CC(K, I)/TT
  203 CONTINUE
      IDET = 0
      GO TO 13
C
C     AUTHONORMALIZE BASE SET IN THE SUBSPACE.
C
   37 DO 30 I = 1, NFREE
      IF(I .EQ. 1) GO TO 31
        DO 32 J = 1, I - 1
          T = 0.0D0
          DO 33 K = 1, NV
   33     T = T + CC(K, J) * CC(K, I)
            DO 34 K = 1, NV
   34       CC(K, I) = CC(K, I) - T*CC(K, J)
   32   CONTINUE
   31      T = 0.0D0
          DO 35 K = 1, NV
   35     T = T + CC(K, I)**2
        T = DSQRT(T)
        DO 36 K = 1, NV
   36   CC(K, I) = CC(K, I)/T
   30 CONTINUE
C
C     REARRANGE CC AND COPY IT ON C.
C
      DO 40 I = 1, NV
      DO 40 J = 1, NFREE
   40 C(IPERM(I), J) = CC(I, J)
      RETURN
C
C     TREAT ERRORS.
C
   51   WRITE(6, 1000)
        INDEX = 1
        RETURN
   52   WRITE(6, 1001)
        INDEX = 1
        RETURN
      END
C
C
      SUBROUTINE DINV(A,NDIMEN,MDIMEN,N,M,DET,IND,IP)
C
C
C     THIS SUBPROGRAM ACCOMPLISHES INVERSION OF THE MATIX A OF ORDER N.
C     PHYSICALLY, THE MATRIX A MAY HAVE N*M (N IS EQUAL TO OR LESS THAN
C     M) ELEMENTS.  N SHOULD BE LESS THAN 51 AND M LESS THAN 101.  WHEN
C     THIS SIZE LIMIT IS VIOLATED, IND WILL BE SET TO 4.
C          THE FIRST N*N ELEMENTS OF A SHOULD BE THE MATRIX ELEMENTS AND
C     THE NEXT N*(M-N) ELEMENTS MAY REPRESENT (M-N) ARBITRARY COLUMN
C     VECTORS.
C          THE INVERSE MATRIX WILL BE GIVEN IN THE FIRST N*N ELEMENTS
C     OF A.  THE REMAINING ELEMENTS OF A WILL BE (M-N) COLUMN VECTORS
C     WHICH ARE THE SOLUTIONS (X) OF THE LINEAR EQUATIONS
C
C               A(ORIGINAL N*N) * X = V ,
C
C     WITH V BEING THE COLUMN VECTORS GIVEN IN THE ORIGINAL MATRIX.
C     DET WILL CONTAIN THE VALUE OF THE DETERMINANT OF ORIGINAL A.
C          THE QUALITATIVE RESULT OF THE MATRIX INVERSION IS INDICATED
C     BY IND, WHICH IS SET TO 1, 2 OR 3 ACCORDING AS THE MATRIX IS
C     REGULAR, NEARLY SINGULAR OR SINGULAR, RESPECTIVELY.  WHEN THE
C     MATRIX IS SINGULAR, A WARNING MESSAGE IS ALSO PRINTED OUT IF IP
C     IS EQUAL TO ZERO.
C
C
      DOUBLE PRECISION  A,X,DET,PIVOT,PIVI,W,EPS,AMAX,V
      DIMENSION A(NDIMEN,MDIMEN),IPERM(50),X(100)
C
C
   10 FORMAT(////1H ,'****  ILLEGAL MATRIX SIZE (SUBR. DINV).  ****')
   20 FORMAT(////1H ,'****  THE GIVEN MATRIX IS SINGULAR (SUBR. DINV).
     1****')
C
C     INITIALIZATION.
C
      IF(0.GE.N.OR.M.LT.N.OR.N.GE.51.OR.M.GE.101) GO TO 2010
       IND=1
    5 DET=1.0D0
      DO 6 I=1,N
    6 IPERM(I)=I
      EPS=0.0D0
C
C     DETERMINATION OF PIVOT.
C
      DO 500 K=1,N
      AMAX=0.0D0
      DO 120 J=K,N
      V=DABS(A(K,J))
      IF(AMAX-V) 100,120,120
  100 AMAX=V
      L=J
  120 CONTINUE
      IF(EPS-AMAX) 220,140,140
  140 IF(EPS*0.01-AMAX)  215,200,200
  200 DET=0.0D0
      IND=3
      DO 210 I=1,N
      DO 210 J=1,N
  210 A(I,J)=1.0D30
      IF(IP.EQ.0) WRITE(6,20)
      GO TO 1000
  215 IND=2
  220 PIVOT=A(K,L)
      DET=DET*PIVOT
      PIVI=1.0D0/PIVOT
      IF(L-K)    300,390,300
C
C     EXCHANGE OF COLUMNS.
C
  300 IW=IPERM(K)
      IPERM(K)=IPERM(L)
      IPERM(L)=IW
      DO 320 I=1,N
           W=A(I,K)
      A(I,K)=A(I,L)
  320 A(I,L)=W
  390 CONTINUE
C
C     SWEEP OUT.
C
      DO 400 J=1,M
      X(J)=A(K,J)*PIVI
  400 A(K,J)=X(J)
      DO 490 I=1,N
      IF(I-K)  410,490,410
  410 W=A(I,K)
      IF(W)     420,490,420
  420 DO 440 J=1,M
      IF(J-K)  430,440,430
  430 A(I,J)=-W*X(J)+A(I,J)
  440 CONTINUE
      A(I,K)=-W*PIVI
  490 CONTINUE
      A(K,K)=PIVI
      EPS=DMAX1(AMAX*1.0D-13,EPS)
  500 CONTINUE
C
C     REARRANGEMENT OF COLUMNS.
C
      DO 700 I=1,N
  600 K=IPERM(I)
      IF(K-I)   610,700,610
  610      IW=IPERM(K)
      IPERM(K)=IPERM(I)
      IPERM(I)=IW
      DO 620 J=1,M
           W=A(I,J)
      A(I,J)=A(K,J)
  620 A(K,J)=W
      DET=-DET
      GO TO 600
  700 CONTINUE
 1000 RETURN
 2010 CONTINUE
      IF(IP.EQ.0) WRITE(6,10) N,M
      IND=4
      GO TO 1000
      END
C
C
      SUBROUTINE CSTEP(C, NCD, NC, XSTEP, NV, INDEX)
C
C     CALCULATE STEP WIDTHS OF VARIATIONS FOR THE NON-INDEPENDENT
C     VARIABLES.  INDEX IS SET TO 0 OR 1, ACCORDING AS THE CALCULATION
C     IS SUCCESSFULLY DONE OR NOT.
C
C
      DOUBLE PRECISION CC, DET
      DIMENSION C(NCD, NCD), XSTEP(NV)
      COMMON/WORK/ CC(36, 36), DET, FREE(431)
C
 1000 FORMAT(////1H ,'****  IMPROPER CONSTRAINTS  ****')
C
C     CHECK THE CONSTRAINT MATRIX.
C
      NFREE = NV - NC
      NCDD = NCD
      NVV = NV
      IF(NFREE .LE. 0) GO TO 30
      DO 10 I = 1, NC
        KC = 0
          DO 11 J = 1, NV
            IF(C(I, J) .EQ. 0.0) GO TO 11
           KC = KC + 1
   11     CONTINUE
        IF(KC .EQ. 0) GO TO 30
   10 CONTINUE
C
C     CALCULATION
C
      DO 20 J = 1, NC
        JJ = NFREE + J
      DO 20 I = 1, NC
   20 CC(I, J) = C(I, JJ)
        DO 21 J = 1, NFREE
          JJ = NC + J
        DO 21 I = 1, NC
   21   CC(I, JJ) = -C(I, J) * XSTEP(J)
      CALL DINV(CC, NCDD, NCDD, NC, NVV, DET, JUDGE, 1)
      IF(JUDGE .NE. 1) GO TO 30
        DO 22 J = 1, NFREE
          JJ = NC + J
        DO 22 I = 1, NC
   22  C(I, J) = CC(I, JJ)
      INDEX = 0
      RETURN
C
C     TREAT ERRORS.
C
   30 INDEX = 1
      WRITE(6, 1000)
      RETURN
      END
C
C
      SUBROUTINE FUNCT(X,F,NVV,ND)
C
C
C     FIGURE OF MERIT OF THE FOCUSSING PROPERTIES.
C
C
      CHARACTER*4 IIBUF, NICK, TEXT
      DIMENSION X(ND)
      INTEGER FNUM, PROFF
      INTEGER OSTK,ASTK,KSTK,LSTK,MSTK,OSTKL,VSTKL,ASTKL,ESTK,PSTK,PSTKL
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK3/ NGROUP, NORDER
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      COMMON /FNCT/ OSTK(200),VSTK(100),ASTK(50),KSTK(50),LSTK(50),
     1              MSTK(50),OSTKL,VSTKL,ASTKL,ESTK(30),PSTK(30),PSTKL
C
 1000 FORMAT(1H1,////1H ,'**** ILLEGAL FUNCTION DESIGNATION. ****')
 1100 FORMAT(////1H ,'****  ILLEGAL VALUE FOR NGROUP OR NORDER.  ****')
 1200 FORMAT(////1H ,'****  ERROR IN EVALUATING THE FUNCTION.  ****')
C
C
      NVV = NVV
      IF(NGROUP .LE. 0 .OR. NGROUP .GE. 4 .OR. NORDER .LE. 0 .OR.
     1   NORDER .GE. 4) GO TO 120
      IF(FNUM.GT.50) GO TO 51
      IF(FNUM.LT.1) GO TO 100
      CALL PRMSET(X)
      GO TO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,
     1       23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,
     2       42,43,44,45,46,47,48,49,50),FNUM
C
    1 CALL TRACE(1,NELT,0)
      F=TERM(A, 1, 2)**2
      RETURN
    2 CALL TRACE(1,NELT,0)
      II=33
      IF(NGROUP.GE.3) II=51
      F=TERM(A, 1, II)**2
      RETURN
    3 CALL TRACE(1,NELT,0)
      II=3
      IF(NGROUP.GE.3) II=4
      F=TERM(A, 1, II)**2
      RETURN
    4 CALL TRACE(1,NELT,0)
      II=33
      IF(NGROUP.GE.3) II=51
      F=TERM(A, 1, 2)**2 + TERM(A, 1, II)**2
      RETURN
    5 CALL TRACE(1,NELT,0)
      II=3
      IF(NGROUP.GE.3) II=4
      F=TERM(A, 1, 2)**2 + TERM(A, 1, II)**2
      RETURN
    6 CALL TRACE(1,NELT,0)
      II=3
      IJ=33
      IF(NGROUP.GE.3) II=4
      IF(NGROUP.GE.3) IJ=51
      F=TERM(A, 1, 2)**2 + TERM(A, 1, IJ)**2 + TERM(A, 1, II)**2
      RETURN
    7 GO TO 100
    8 GO TO 100
    9 GO TO 100
   10 GO TO 100
   11 GO TO 100
   12 GO TO 100
   13 GO TO 100
   14 GO TO 100
   15 GO TO 100
   16 GO TO 100
   17 GO TO 100
   18 GO TO 100
   19 GO TO 100
   20 GO TO 100
   21 GO TO 100
   22 GO TO 100
   23 GO TO 100
   24 GO TO 100
   25 GO TO 100
   26 GO TO 100
   27 GO TO 100
   28 GO TO 100
   29 GO TO 100
   30 GO TO 100
   31 GO TO 100
   32 GO TO 100
   33 GO TO 100
   34 GO TO 100
   35 GO TO 100
   36 GO TO 100
   37 GO TO 100
   38 GO TO 100
   39 GO TO 100
   40 GO TO 100
   41 GO TO 100
   42 GO TO 100
   43 GO TO 100
   44 GO TO 100
   45 GO TO 100
   46 GO TO 100
   47 GO TO 100
   48 GO TO 100
   49 GO TO 100
   50 GO TO 100
C
C
   51 CALL PRMSET(X)
      II = 1
      JCONT = 0
      IASTK = 1
      DO 53 I = 1, PSTKL
        IF(I .NE. 1) JCONT = 1
        IF(II .GE. NELT) GO TO 110
        CALL TRACE(II, ESTK(I), JCONT)
        II = ESTK(I) + 1
        JF = PSTK(I)
        DO 52 J = 1, JF
          VSTK(ASTK(IASTK)) = TERM(A, LSTK(IASTK), MSTK(IASTK))
   52   IASTK = IASTK + 1
   53 CONTINUE
      CALL EVAL(F, INDEX)
      IF(INDEX .NE. 0) GO TO 110
      RETURN
C
C
  100 WRITE(6,1000)
      GO TO 2000
  110 WRITE(6,1200)
      GO TO 2000
  120 WRITE(6,1100)
 2000 CALL EXIT
      RETURN
      END
C
C
      SUBROUTINE TRACE(NI,NF,JCONT)
C
C
C     MATRIX CALCULATION.
C
C
      CHARACTER*4 ELEM, NICK
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2,59)
      COMMON/BLOCK3/ NGROUP, NORDER
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
C
 1000 FORMAT(1H1///1H ,'**** ILLEGAL ELEMENT ORDER IN THE MATRIX CALCULA
     1TION.  ****')
 1001 FORMAT(////1H ,'****  ELEMENT ',A4,' HAS NOT BEEN DEFINED SO FAR.
     1 ****')
 1002 FORMAT(////1H ,'****  UNABLE TO IDENTIFY AN INPUT MATRIX IN ROUTIN
     1E TRACE.  ****')
C
C
      IF( NF .GT. NELT .OR. NI .LT. 1 .OR. NI .GT. NF ) GO TO 200
      IF(JCONT .NE. 0) GO TO 500
      CALL STRT
      MCNT = 0
C
  500 DO 100 I = NI, NF
      K = NELEM(I)
      GO TO ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
     1        18, 19, 20, 21, 22, 23 ), K
C
    1 CALL DRIFT(PRM(I,1))
                                     GO TO 100
    2 CALL SENSE
                                     GO TO 100
    3 CALL MAGNET(PRM(I, 1),PRM(I, 2),PRM(I, 3),PRM(I, 4),PRM(I, 5),
     1            PRM(I, 6),PRM(I, 7),PRM(I, 8),PRM(I, 9),PRM(I,10),
     2            PRM(I,11),PRM(I,12),  IFIX(PRM(I,13)),  PRM(I,14),
     3            PRM(I,15),PRM(I,16),PRM(I,17))
                                     GO TO 100
    4 CALL MPLM(PRM(I,1),PRM(I,2),0.0,0.0,PRM(I,3),IFIX(PRM(I,4)),
     1          PRM(I,5),PRM(I,6),PRM(I,7),PRM(I,8))
                                     GO TO 100
    5 CALL MPLM(PRM(I,1),0.0,PRM(I,2),0.0,0.0, 0,0.0,0.0,0.0,0.0)
                                     GO TO 100
    6 CALL MPLM(PRM(I,1),0.0,0.0,PRM(I,2),0.0, 0,0.0,0.0,0.0,0.0)
                                     GO TO 100
    7 CALL ELECT(PRM(I, 1),PRM(I, 2),PRM(I, 3),PRM(I, 4),PRM(I, 5),
     1           PRM(I, 6),PRM(I, 7),PRM(I, 8),IFIX(PRM(I, 9)),
     2           PRM(I,10),PRM(I,11),PRM(I,12),PRM(I,13),PRM(I,14),
     3           PRM(I,15),PRM(I,16),PRM(I,17),PRM(I,18),PRM(I,19))
                                     GO TO 100
    8 CALL MPLE(PRM(I,1),PRM(I,2),0.0,0.0,PRM(I,3),IFIX(PRM(I,4)),
     1          PRM(I,5),PRM(I,6),PRM(I,7),PRM(I,8))
                                     GO TO 100
    9 CALL MPLE(PRM(I,1),0.0,PRM(I,2),0.0,0.0, 0, 0.0,0.0,0.0,0.0)
                                     GO TO 100
   10 CALL MPLE(PRM(I,1),0.0,0.0,PRM(I,2),0.0, 0,0.0,0.0,0.0,0.0)
                                     GO TO 100
   11 CALL STRT
                                     GO TO 100
   12 CALL XSET
                                     GO TO 100
   13 CALL YSET
                                     GO TO 100
   14 GO TO 200
   15 CALL MPLM(PRM(I,1),PRM(I,2),PRM(I,3),PRM(I,4),PRM(I,5),
     1          IFIX(PRM(I,6)),PRM(I,7),PRM(I,8),PRM(I,9),PRM(I,10))
                                     GO TO 100
   16 CALL MPLE(PRM(I,1),PRM(I,2),PRM(I,3),PRM(I,4),PRM(I,5),
     1          IFIX(PRM(I,6)),PRM(I,7),PRM(I,8),PRM(I,9),PRM(I,10))
                                     GO TO 100
   17 GO TO 200
   18 MCNT = MCNT + 1
      IF(MCNT .GT. IBMX .OR. JBMX(MCNT) .NE. I) GO TO 400
      DO 181 L = 1, 2
      DO 181 J = 1, 59
  181 B(L, J) = BMTRX(MCNT, L, J)
      CALL PRDCT(A, B, NGROUP, IGROUP(MCNT), NORDER)
                                     GO TO 100
   19 GO TO 300
   20 GO TO 300
   21 GO TO 300
   22 GO TO 300
   23 GO TO 300
  100 CONTINUE
        RETURN
  200     WRITE(6,1000)
          CALL EXIT
          RETURN
  300       WRITE(6, 1001) ELEM(K)
            CALL EXIT
            RETURN
  400         WRITE(6, 1002)
              CALL EXIT
              RETURN
               END
C
C
      SUBROUTINE PRMSET(X)
C
C
C     SETTING THE PARAMETERS TO THE VALUES GIVEN IN THE ARRAY 'X'.
C
      CHARACTER*4 IIBUF, NICK, TEXT
      INTEGER FNUM, PROFF
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      DIMENSION X(1)
C
      IF(NVR.LE.0) RETURN
      DO 10 I = 1, NVR
      NE = NVEL(I)
      NP = NVPR(I)
        IF(NE .EQ. 0) GO TO 20
        IF(NELEM(NE) .EQ. 18) GO TO 30
          PRM(NE, NP) = X(I)
          GO TO 10
   20       AKK(NP - 2) = X(I)
            KINE = 1
            GO TO 10
   30         BMTRX(MXNV(I), IIMV(I), JJMV(I)) = X(I)
   10 CONTINUE
      RETURN
      END
C
C
      SUBROUTINE INIT
C
C
C     READIN AND PRINTOUT OF THE INPUT DATA AND PREPARATION FOR THE
C     CALCULATION.
C
      CHARACTER*4 ELEM, IIBUF, IBUF, NICK, TEXT
      CHARACTER*4 ICN2,ICN3,CC,EEE,KEQ,JEQ,NVVEQ,NPPEQ
      INTEGER FNUM, PROFF
      INTEGER OSTK,ASTK,KSTK,LSTK,MSTK,OSTKL,VSTKL,ASTKL,ESTK,PSTK,PSTKL
      COMMON/BLOCK3/NGROUP,NORDER
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
      COMMON /BFFR/ IBUF(400), LENGTH, IPTR
      COMMON /FNCT/ OSTK(200),VSTK(100),ASTK(50),KSTK(50),LSTK(50),
     1              MSTK(50),OSTKL,VSTKL,ASTKL,ESTK(30),PSTK(30),PSTKL
      COMMON/LIMIT/ NELMT, NPLMT, NBMX, NALMT
      DIMENSION STACK(100)
      EQUIVALENCE (K, KEQ), (J, JEQ), (NVV, NVVEQ), (NPP, NPPEQ)
      DATA ICN2, ICN3/'DREP', 'DMIN'/
C     DATA IPRM, CC/0, 1HC/
      DATA IPRM, CC/0, 'C'/
C
 1000 FORMAT(80A1)
 1001 FORMAT(I1,19A4,A3)
 2000 FORMAT(////1H ,19H****  JOB TITLED  ',5A4,38H......'  IS SKIPPED U
     1NPROCESSED.  ****)
 2001 FORMAT(1H1/1H ,19A4,A3////)
 2002 FORMAT(1H ,'****  INPUT DATA  ****'//)
 2003 FORMAT(1H ,2X,'X',I2,I5,5X,A4,I4,1P2E13.4)
 2004 FORMAT(1H+,50X,1PE12.4)
 2005 FORMAT(/1H ,10X,1P9E13.4)
 2006 FORMAT(1H ,2X,'PARAMETERS ALTERED PRIOR TO CALCULATION = ')
 2007 FORMAT(1H+,10(45X,10(I2,'-',I2,3X)//1H ))
 2008 FORMAT(/1H ,2X,A4,2X,'V =',I2,3X,'C =',I2,3X,'F =',I3,3X,'I =',
     1       I4,3X,'L =',1PE11.4,3X,'P =',I1,3X,'M =',I2,3X,'O =',I2/)
 2009 FORMAT(1H ,8X,'MINIMIZING FUNCTION',3X,80A1/)
 2010 FORMAT(1H ,30X,80A1/)
 2011 FORMAT(1H ,8X,'IPIRNT =',12(I3,'(',3A1,')',1X)/)
 2012 FORMAT(/1H ,2X,A4,2X,'V =',I2,3X,'M =',I3,3X,'C =',I2,3X,'O =',
     1            I2/)
 2013 FORMAT(/1H ,2X,'VARIABLES'/)
 2014 FORMAT(1H ,3X,'NO',5X,'ELEMENT',4X,'PRM',4X,'XI',10X,'STEP')
 2015 FORMAT(1H+,54X,'XF')
 2016 FORMAT(1H )
 2017 FORMAT(1H ,2X,'X',I2,I5,'(',3A1,')',A4,I4,1P2E13.4)
 2018 FORMAT(1H+,1X,1H*)
 2019 FORMAT(1H ,2X,'CONSTRAINTS'/)
 2020 FORMAT(1H ,2X,I3,5X,1P9E13.4)
 2021 FORMAT(1H ,16X,12(I3,'(',3A1,')',1X)/)
 2022 FORMAT(1H ,45X,'AND OTHER',I2,' PARAMETERS.'/)
C
C
C     READ TITLE OF THE PROBLEM
C
    1 READ(5, 1001, ERR = 7, END = 5) ISTOP, TEXT
      IF(ISTOP .EQ. 1) STOP
        NCONT = 0
        ILLEG = 0
        NALT = 0
C
C     READ KEY WORD
C
    2 CALL TAKE( STACK, 0, I, JUDGE )
       GO TO ( 8, 3, 98, 5 ), JUDGE
    3   IF(I .LE. 5 .AND. I .GT. 0) GO TO (10, 20, 30, 40, 60), I
    8     CALL ERWT( 1, ILLEG )
          GO TO 4
C
C     TREATMENT OF READ ERRORS
C
   99     CALL TAKE( STACK, 0, I, JUDGE )
          GO TO (99, 6, 99, 5), JUDGE
    6     IF( I .NE. 4 ) GO TO 99
    9       WRITE(6, 2000) (TEXT(I), I = 1, 5)
            GO TO 1
    4        CALL ERWT( 21, ILLEG )
             GO TO 99
    5         CALL ERWT(3, ILLEG)
              STOP
    7           CALL ERWT(4, ILLEG)
                GO TO 99
   98             CALL ERWT(2, ILLEG)
                  GO TO 4
C
C     READ SYSTEM PARAMETERS
C
   10 K    = 0
      IBMX = 0
      KINE = 0
      IPRM = 0
   11 CALL TAKE( STACK, 0, I, JUDGE )
        GO TO ( 12, 13, 98, 5 ), JUDGE
   13   IF( I .LE. 5 ) GO TO 12
        IF( K .GT. NELMT ) GO TO 16
        I = I - 5
        IF(K .NE. 0 .AND. I .NE. 17) GO TO 163
        IF(K .EQ. 0 .AND. I .NE. 17) GO TO 164
        IF(K .NE. 0 .AND. I .EQ. 17) GO TO 164
           CALL TAKE(STACK, NPRM(17), N, JUDGE)
             GO TO (165, 165, 98, 5), JUDGE
  165          IF(STACK(1) .LE. 0.0 .OR. STACK(1) .GT. 3.0 .OR.
     1            STACK(2) .LE. 0.0 .OR. STACK(2) .GT. 3.0 .OR.
     2            AMOD(STACK(1), 1.0) .NE. 0.0 .OR.
     3            AMOD(STACK(2), 1.0) .NE. 0.0)    GO TO 166
               NGROUP = STACK(1)
               NORDER = STACK(2)
               L = NPRM(17) - 2
               DO 167 J = 1, L
  167          AKK(J) = 0.0
               DO 131 J = 1, L
               IF(STACK(J + 2) .GT. 0.99E30) GO TO 132
  131          AKK(J) = STACK(J + 2)
  132          DO 170 J = 1, L
               IF(AKK(J) .EQ. 0.0) GO TO 170
               KINE = 1
               GO TO 112
  170          CONTINUE
  112            IF(JUDGE .NE. 2) GO TO 14
                 GO TO 168
  163   IF(I .EQ. 14) GO TO 15
        NELEM(K) = I
        DO 169 IJ = 1, 20
  169   PRM(K, IJ) = 0.0
        IPTR = 5
        CALL THREE(IBUF, LENGTH, IPTR, NICK(K,1), NICK(K,2), NICK(K,3))
        IF(I .NE. 18) GO TO 161
          CALL MREAD(STACK, K, NBMX, N, ILLEG, JUDGE)
          GO TO (14, 162, 98, 5), JUDGE
  162       IF(N .EQ. 0) GO TO 4
            GO TO 152
  161   IF(NPRM(I) .EQ. 0) GO TO 14
          CALL TAKE( STACK, NPRM(I), N, JUDGE )
            GO TO ( 17, 18, 98, 5 ), JUDGE
   17       IF( I .EQ. 14 ) GO TO 15
            I = NFOR(I)
            IF(I .EQ. 0) GO TO 171
  182       IF(STACK(I).LT.0.0 .OR. AMOD(STACK(I),1.0).NE.0.0) GO TO 172
  171         DO 19 I = 1, N
   19         PRM(K, I) = STACK(I)
              GO TO 14
   18       I = NFOR(I)
            IF(I .EQ. 0) GO TO 152
              AI = 8.0
              IF( I .LE. 8) AI = 1.0
            IF(AMOD(STACK(I), 10.0) .GT. AI) GO TO 152
              DO 183 J = 1, I
                IF( STACK(J) .GE. 0.99E30 ) GO TO 152
  183           PRM(K, J) = STACK(J)
            IF(STACK(I).LT.0.0 .OR. AMOD(STACK(I),1.0).NE.0.0) GO TO 184
  168         K = K + 1
              I = N
              GO TO 13
   14           K = K + 1
                GO TO 11
   15             NELT = K - 1
                  IF( NELT .LE. 0 ) GO TO 153
                  IPRM = 1
                  GO TO 2
C
   12 CALL ERWT( 5, ILLEG )
      GO TO 4
   16   CALL ERWT( 6, ILLEG )
        GO TO 4
  152       EEE = ELEM( NELEM(K) )
            IBUF(81) = KEQ
            IBUF(82) = EEE
            CALL ERWT( 20, ILLEG )
            CALL ERWT( 21, ILLEG )
            I = N
            GO TO 6
  172         CALL ERWT( 24, ILLEG )
              GO TO 4
  184           CALL ERWT( 24, ILLEG )
                CALL ERWT( 21, ILLEG )
                I = N
                GO TO 6
  153             CALL ERWT( 11, ILLEG )
                  GO TO 4
  166               CALL ERWT(14, ILLEG)
                    IF(JUDGE .NE. 2) GO TO 4
                    I = N
                    GO TO 6
  164                 CALL ERWT(29, ILLEG)
                      GO TO 4
C
C     READ NEW SYSTEM PARAMETERS WHICH REPLACE OLD ONES
C
   60 IF(IPRM .EQ. 0) GO TO 61
      NALT = 0
   68  CALL CTAKE( STACK, 3, I, JUDGE )
          GO TO ( 69, 3, 98, 5 ), JUDGE
   69    IF( AMOD(STACK(1), 1.0) .NE. 0.0 .OR. STACK(1) .LT. 0.0 .OR.
     1   AMOD(STACK(2), 1.0) .NE. 0.0 .OR. STACK(2) .LE. 0.0) GO TO 64
         K = STACK(1)
         J = STACK(2)
         R = STACK(3)
         IF( K .NE. 0 ) GO TO 62
           IF(J .GT. NPRM(17) .OR. J .LT. 1) GO TO 66
           IF(J .GT. 2) GO TO 661
             IF(R .LE. 0.0 .OR. R .GT. 3.0 .OR. AMOD(R, 1.0) .NE. 0.0
     1          .OR. AMOD(R, 1.0) .NE. 0.0) GO TO 662
             M = R
             IF(J .NE. 1) GO TO 664
               IF(IBMX .EQ. 0 .OR. M .EQ. 3) GO TO 665
               DO 666 L = 1, IBMX
               IF(IGROUP(L) .NE. M) GO TO 667
  666          CONTINUE
  665        NGROUP = M
             GO TO 67
  664        NORDER = M
             GO TO 67
  661      AKK(J - 2) = R
           KINE = 0
           M = NPRM(17) - 2
           DO 668 L = 1, M
           IF(AKK(L) .EQ. 0.0) GO TO 668
           KINE = 1
           GO TO 67
  668      CONTINUE
           GO TO 67
   62   IF(K .LE. 0 .OR. K .GT. NELT) GO TO 66
        IF(NELEM(K) .NE. 18) GO TO 663
          CALL MXID(K, J, L, M, N, INDEX)
          IF(INDEX .NE. 0) GO TO 66
          BMTRX(L, M, N) = R
          GO TO 67
  663   IF(J .LE. 0 .OR. J .GT. NPRM(NELEM(K))) GO TO 66
          I = NFOR(NELEM(K))
          IF( I .EQ. 0 ) GO TO 631
          IF( J .NE. I ) GO TO 631
          IF(R .LE. 0.0 .OR. AMOD(R, 1.0) .NE. 0.0) GO TO 632
  631   PRM(K, J) = R
   67   NALT = NALT + 1
        IF(NALT .GT. NALMT) GO TO 671
        KEE(NALT) = K
        KPP(NALT) = J
        GO TO 68
C
  662 CALL ERWT(14, ILLEG)
      GO TO 4
  61    CALL ERWT(7, ILLEG )
        GO TO 4
   66     IBUF(81) = KEQ
          IBUF(82) = JEQ
          CALL ERWT( 8, ILLEG )
          GO TO 4
   64       CALL ERWT( 15, ILLEG )
            GO TO 4
  632         CALL ERWT( 24, ILLEG )
              GO TO 4
  667           CALL ERWT(30, ILLEG)
                GO TO 4
  671             CALL ERWT(32, ILLEG)
                  GO TO 68
C
C     READ DATA FOR REPETITION PROBLEM
C
   20 NCONT = 1
      GO TO 201
C
C     READ DATA FOR MINIMIZATION PROBLEM
C
   30 NCONT = 2
C
C
  201 READ(5, 1000, ERR = 98, END = 5) (IBUF(I), I = 1, 80)
      LENGTH = 80
      IPTR = 1
      CALL OPTION(IBUF, LENGTH, IPTR, JUDGE)
        IF(JUDGE .NE. 0) GO TO 241
        IF(NVR .NE. 0 .AND. IPRM .EQ. 0) GO TO 202
        IF( NCONT .EQ. 1 ) GO TO 24
          IF( FNUM .LE. 50 ) GO TO 24
          DO 35 I = 1, 5
          READ(5, 1000, ERR = 98, END = 5) (IIBUF(I, J), J = 1, 80)
          IF( IIBUF(I,80) .NE. CC) GO TO 24
   35     CONTINUE
C
            CALL ERWT( 25, ILLEG )
            GO TO 4
  241         IBUF(81) = ICN2
              IF( NCONT .EQ. 2 ) IBUF(81) = ICN3
              CALL ERWT( 9, ILLEG )
              GO TO 4
   29           CALL ERWT( 17, ILLEG )
                CALL ERWT( 21, ILLEG )
                GO TO 6
  262             CALL ERWT( 18, ILLEG )
                  CALL ERWT( 21, ILLEG )
                  GO TO 6
  221               CALL ERWT( 16, ILLEG )
                    GO TO 4
  202                 CALL ERWT( 31, ILLEG )
                      GO TO 4
C
   24   IF( NVR .GT. 0 ) GO TO 21
          NVR = 0
          IF( NCONT .EQ. 2 ) NPRNT = 0
          NCONT = 1
          GO TO 25
   21 NST = 5
       IF( NCONT .EQ. 2 ) NST = 4
        DO 22 I = 1, NVR
         CALL CTAKE( STACK, NST, N, JUDGE )
          GO TO ( 28, 29, 98, 5 ), JUDGE
   28     IF( AMOD(STACK(1), 1.0) .NE. 0.0 .OR. STACK(1) .LT. 0.0 .OR.
     1        AMOD(STACK(2), 1.0) .NE. 0.0 .OR. STACK(2) .LE. 0.0)
     2                                                         GO TO 221
          NVEL(I) = STACK(1)
          NVPR(I) = STACK(2)
          XI(I)   = STACK(3)
          XSTEP(I)= STACK(4)
          IF( NCONT .EQ. 1 ) XF(I) = STACK(5)
   22   CONTINUE
      IF( NC .LE. 0 ) GO TO 25
      DO 26 I = 1, NC
      CALL TAKE( STACK, NVR, N, JUDGE )
        GO TO ( 261, 262, 98, 5 ), JUDGE
  261     DO 263 J = 1, N
  263     C(I, J) = STACK(J)
   26   CONTINUE
      DO 27 J = 1, NVR
      DO 27 I = 1, NC
        IF(I .EQ. 1) NCM(J) = 0
        IF(C(I, J) .NE. 0.0) NCM(J) = 1
   27 CONTINUE
   25 IF( NPRNT .LE. NPLMT ) GO TO 23
        CALL ERWT( 10, ILLEG )
        NPRNT = NPLMT
   23 IF( NPRNT .LE. 0 ) GO TO 255
      CALL CCTAKE(STACK, NPRNT, N, JUDGE )
        GO TO ( 251, 252, 98, 5, 231 ), JUDGE
  231     CALL ERWT( 33, ILLEG )
          GO TO 4
  252     CALL ERWT( 22, ILLEG )
          I = N
              DO 257 J = 1, NPRNT
              IF( STACK(J) .GE. 1.0E30 ) GO TO 258
  257         CONTINUE
              J = NPRNT + 1
  258         N = J - 1
              NPRNT = N
              IF( N .LE. 0 ) GO TO 256
  251   DO 253 J = 1, N
        IF( AMOD(STACK(J), 1.0) .EQ. 0.0 ) GO TO 254
            CALL ERWT( 19, ILLEG)
            IPRINT(J) = 0
            GO TO 253
  254    IPRINT(J) = STACK(J)
  253   CONTINUE
        IF( JUDGE .EQ. 2 ) GO TO 256
  255 CALL TAKE( STACK, 0, I, JUDGE )
      GO TO ( 255, 256, 98, 5 ), JUDGE
  256 IF( I .GT. 0 .AND. I .LE. 5 ) GO TO 3
        CALL ERWT( 1, ILLEG)
        GO TO 255
C
C     END OF DATA INPUT
C
   40 IF(NCONT .GT. 0) GO TO 42
        NCONT = 1
        NVR = 0
        NPRNT = 0
   42 IF(IPRM .NE. 0) GO TO 496
        CALL ERWT( 11, ILLEG )
        GO TO 9
C
C     CHECK VARIABLE PARAMETERS.
C
  496 IF(NVR .LE. 0) GO TO 41
      DO 493 I = 1, NVR
          NVV = NVEL(I)
          NPP = NVPR(I)
        IF(NVV .NE. 0) GO TO 498
        IF(NPP .GT. NPRM(17) .OR. NPP .LE. 2) GO TO 494
        IF(NPP .GE. 3) KINE = 1
        GO TO 493
  498     NEL = NELEM(NVV)
          NNP = NPRM(NEL)
          NFR = NFOR(NEL)
          IF(NEL .NE. 18) GO TO 499
            CALL MXID(NVV, NPP, MXNV(I), IIMV(I), JJMV(I), INDEX)
            IF(INDEX .NE. 0) GO TO 494
            GO TO 493
  499     AI = 3.0
          IF( NFR .LE. 8 ) AI = 1.0
        IF( NVV .GT. NELT .OR. NPP .GT. NNP ) GO TO 494
        IF( NFR .EQ. 0 ) GO TO 497
        IF( NPP .EQ. NFR ) GO TO 494
        IF( NPP .GT. NFR .AND. PRM(NVV, NFR) .LE. AI ) GO TO 495
  497   IF(NCONT .EQ. 2 .AND. XI(I) .GE. 1.0E8)
     1                                   XI(I) = PRM( NVEL(I), NVPR(I) )
  493 CONTINUE
      GO TO 41
  494   IBUF(81) = NVVEQ
        IBUF(82) = NPPEQ
        CALL ERWT( 12, ILLEG )
        GO TO 9
  495     IBUF(81) = NVVEQ
          IBUF(82) = NPPEQ
          CALL ERWT( 23, ILLEG )
          GO TO 9
   41 IF(NPRNT .GE. 0) GO TO 43
        NPRNT = 0
        CALL ERWT( 10, ILLEG )
C
C     ANALYZE EXPRESSION OF FUNCTION.
C
   43 IF(FNUM .LE. 50 .OR. NCONT .NE. 2) GO TO 411
      IBB = 0
        DO 31 I = 1, 5
          DO 36 J = 1, 80
   36       IBUF(IBB + J) = IIBUF(I, J)
          IF(IIBUF(I, 80) .NE. CC) GO TO 37
          IBB = IBB + 79
   31   CONTINUE
   37 LENGTH = IBB + 80
      IBB = LENGTH/79
        CALL ANAL(JUDGE)
        IF(JUDGE .EQ. 0) GO TO 412
  415     CALL ERWT( 13, ILLEG )
          GO TO 9
C
C     CHECK ELEMENT NUMBERS ASSOCIATED WITH THE TRANSFER MATRIX ELEMENTS
C     NECCESSARY FOR THE EVALUATION OF THE FUNCTION.
C
  412   PSTKL = 0
        IF(ASTKL .EQ. 0) GO TO 415
          DO 414 I = 1, ASTKL
          KPRNT = NPRNT
            K = KSTK(I)
            L = LSTK(I)
            M = MSTK(I)
            IF(K .LE. 0 .OR. K .GT. NELT) GO TO 415
            IF(L .LE. 0 .OR. L .GE. 3) GO TO 415
            IF(M .LE. 0) GO TO 415
            IF(M .GE. 40 .AND. NGROUP .LE. 2) GO TO 415
            IF(K .EQ. NELT) GO TO 418
            IF(KPRNT .LE. 0) GO TO 416
            DO 417 J = 1, KPRNT
                IF(K .EQ. IPRINT(J)) GO TO 418
  417       CONTINUE
  416       NPRNT = NPRNT + 1
            IF(NPRNT .GT. NPLMT) GO TO 23
            IPRINT(NPRNT) = K
  418       CONTINUE
  414     CONTINUE
C
C     REARRANGE ARGUMENT STACK FOR THE MATRIX ELEMENTS.
C
          IF(ASTKL .LE. 1) GO TO 419
  421       II = 0
            DO 420 I = 1, ASTKL - 1
              IF(KSTK(I) .LE. KSTK(I + 1)) GO TO 420
              K = ASTK(I + 1)
              ASTK(I + 1) = ASTK(I)
              ASTK(I) = K
              K = KSTK(I + 1)
              KSTK(I + 1) = KSTK(I)
              KSTK(I) = K
              K = LSTK(I + 1)
              LSTK(I + 1) = LSTK(I)
              LSTK(I) = K
              K = MSTK(I + 1)
              MSTK(I + 1) = MSTK(I)
              MSTK(I) = K
              II = 1
  420       CONTINUE
            IF(II .NE. 0) GO TO 421
C
C     COUNT NUMBER OF THE ELEMENTS FOR WHICH TRANSFER MATRICES AT THE
C     EXITS ARE REQUIRED TO SAVE.
C
  419     PSTKL = 1
          ESTK(1) = KSTK(1)
          PSTK(1) = 1
          IF(ASTKL .LE. 1) GO TO 424
          DO 422 I = 1, ASTKL - 1
            IF(KSTK(I) .NE. KSTK(I + 1)) GO TO 423
            PSTK(PSTKL) = PSTK(PSTKL) + 1
            GO TO 422
  423       PSTKL = PSTKL + 1
            ESTK(PSTKL) = KSTK(I + 1)
            PSTK(PSTKL) = 1
  422     CONTINUE
  424     CONTINUE
C
C     CHECK PRINT OPTION.
C
  411 IF(NPRNT .EQ. 0) GO TO 50
   44   II = 1
        DO 46 I = 1, NPRNT
          K = IPRINT(I)
          IF(K .LE. 0 .OR. K .GT. NELT) GO TO 47
          IPRINT(II) = K
          II = II + 1
          GO TO 46
   47     CALL ERWT( 10, ILLEG )
   46   CONTINUE
      NPRNT = II - 1
      IF(NPRNT .LT. 0) NPRNT = 0
      IF(NPRNT .LE. 1) GO TO 50
   48   II = 0
        DO 49 I = 1, NPRNT - 1
          IF( IPRINT(I) - IPRINT(I + 1) ) 49, 491, 492
  491     IPRINT(I + 1) = 0
          GO TO 44
  492       K = IPRINT(I + 1)
            IPRINT(I + 1) = IPRINT(I)
            IPRINT(I) = K
            II = 1
   49   CONTINUE
        IF(II .NE. 0) GO TO 48
      IF(NPRNT .LE. NELT) GO TO 50
        NPRNT = NELT
   45   CALL ERWT( 10, ILLEG )
C
C     PRINTOUT OF THE INPUT DATA.
C
   50 WRITE(6,2001) TEXT
      WRITE(6,2002)
      CALL SYSPT(1)
      IF(NALT .LE. 0) GO TO 591
      II = MIN0(NALT, NALMT)
      WRITE(6, 2006)
      WRITE(6, 2007) (KEE(I), KPP(I), I = 1, II)
      IF(MOD(II, 10) .NE. 0) WRITE(6, 2016)
      II = NALT - II
      IF(II .GT. 0) WRITE(6, 2022) II
  591 IF(NCONT .EQ. 1) GO TO 53
      WRITE(6, 2008)    ICN3,NVR,NC,FNUM,ITER,FLIMIT,PROFF,NPRNT,MOUT
      IF(FNUM .LE. 50) GO TO 57
        WRITE(6, 2009) (IIBUF(1, J), J = 1, 80)
        IF(IBB .GT. 1) WRITE(6, 2010) ((IIBUF(I,J),J=1,80),I=2,IBB)
        GO TO 57
   53 WRITE(6, 2012) ICN2,NVR, NPRNT, NC, MOUT
   57 IF(NPRNT .LE. 0) GO TO 54
      II = MIN0(NPRNT, 12)
      WRITE(6,2011) (IPRINT(I), (NICK(IPRINT(I),J), J=1, 3), I = 1, II)
      IF(II .GE. NPRNT) GO TO 54
      WRITE(6, 2021) (IPRINT(I), (NICK(IPRINT(I),J), J=1,3), I=13,NPRNT)
   54 IF(NVR.EQ.0) GO TO 55
      WRITE(6,2013)
      WRITE(6,2014)
      IF(NCONT.EQ.1) WRITE(6,2015)
      WRITE(6,2016)
      DO 56 I=1,NVR
      II = NVEL(I)
      IF(II .EQ. 0) GO TO 561
      WRITE(6, 2017) I,II,(NICK(II,J),J=1,3),ELEM(NELEM(II)),NVPR(I),
     1               XI(I),XSTEP(I)
      GO TO 562
  561 WRITE(6, 2003) I,II,ELEM(17),NVPR(I),XI(I),XSTEP(I)
  562 IF(NCONT .LE. 0) GO TO 59
      IF(NCM(I) .NE. 0) WRITE(6, 2018)
   59 IF(NCONT.EQ.1) WRITE(6,2004) XF(I)
   56 WRITE(6,2016)
      IF(NC .LE. 0) GO TO 55
      WRITE(6, 2019)
      DO 58 I = 1, NC
      JI = 1
  582 J = MIN0(NVR, JI + 8)
      IF(JI .NE. 1) GO TO 581
      WRITE(6, 2020) I, ( C(I, K), K = JI, J)
      GO TO 583
  581 WRITE(6, 2005) ( C(I, K), K = JI, J )
  583 IF(J .GE. NVR) GO TO 58
      JI = J + 1
      GO TO 582
   58 WRITE(6, 2016)
   55 RETURN
      END
C
C
      SUBROUTINE ERWT( K, ILLEG )
C
C
C      WRITE ERROR MESSAGES.
C
C
      CHARACTER*4 IBUF
      COMMON /BFFR/ IBUF(400), LENGTH, IPTR
C
 1000 FORMAT(1H1)
 1001 FORMAT(////1H ,'****  ILLEGAL KEY WORD (',4A1,')  ****')
 1002 FORMAT(////1H ,'****  INPUT DATA READ-ERROR.  ****')
 1003 FORMAT(////1H ,'****  UNEXPECTED END OF DATA  ****')
 1004 FORMAT(////1H ,'****  TITLE READ-ERROR  ****')
 1005 FORMAT(////1H ,'****  ILLEGAL ELEMENT NAME (',4A1,')  ****')
 1006 FORMAT(////1H ,'****  TOO LARGE NUMBER OF ELEMENTS.  ****')
 1007 FORMAT(////1H ,'****  ILLEGAL ALTERATION REQUEST BEFORE INPUT OF S
     1YSTEM PARAMETERS  ****')
 1008 FORMAT(////1H ,'****  ILLEGAL PARAMETER DESIGNATION IN ALTERING SY
     1STEM DATA  (KEE =',I3,', KPP =',I3,')  ****')
 1009 FORMAT(////1H ,'****  ILLEGAL OPTION FOR ',A4,'.  ****')
 1010 FORMAT(////1H ,'****  ILLEGAL PRINT OPTION FOR THE MATRIX ELEMENTS
     1.  (WARNING ONLY)  ****')
 1011 FORMAT(   ////1H ,'****  NO DATA FOR SYSTEM PARAMETERS  ****')
 1012 FORMAT(////1H ,'****  ILLEGAL VARIABLE ASSIGNMENT (ELEM =',I3,
     1               ',  PARAM =',I3,')  ****')
 1013 FORMAT(////1H ,'****  ERROR IN THE EXPRESSION OF THE FUNCTION.  **
     1**')
 1014 FORMAT(////1H ,'****  ILLEGAL DATA FOR NGROUP AND/OR NORDER.  ****
     1')
 1015 FORMAT(////1H ,'****  ILLEGAL ELEMENT/PARAMETER DESIGNATION IN DAL
     1T DATA.  ****')
 1016 FORMAT(////1H ,'****  ILLEGAL VARIABLE ASSIGNMENT.  ****')
 1017 FORMAT(////1H ,'****  NUMBER OF VARIABLES IS LESS THAN EXPECTED, O
     1R  ****'/1H ,'****  VARIABLE ASSIGNMENT IS INVALID.
     2 ****')
 1018 FORMAT(////1H ,'****  NUMBER OF CONSTRAINT DATA IS LESS THAN EXPEC
     1TED.  ****')
 1019 FORMAT(////1H ,'****  NON-INTEGER NUMBER FOR SPECIFYING AN ELEMENT
     1 FOR MATRIX PRINT-OUT.  (WARNING ONLY)  ****')
 1020 FORMAT(////1H ,'****  NUMBER OF DATA FOR PARAMETERS OF #',I2,' ELE
     1MENT (',A4,') IS LESS THAN EXPECTED.  ****')
 1021 FORMAT(////1H ,'      CURRENT CONTENTS OF READ-BUFFER ARE ;'//1H ,
     1 6X,'<<<<',80A1,'>>>>.')
 1022 FORMAT(////1H ,'****  NUMBER OF DATA TO SPECIFY ELEMENTS FOR MATRI
     1X PRINT-OUT IS LESS THAN EXPECTED.  (WARNING ONLY)  ****')
 1023 FORMAT(////1H ,'****  VARIABLE ASSIGNMENT (ELEM =',I3,',  PARAM ='
     1,I3,') IS INCONSISTENT WITH SYSTEM PARAMETER DATA.  ****')
 1024 FORMAT(////1H ,'****  NON-INTEGER OR NEGATIVE NUMBER FOR FRINGING
     1FIELD SPECIFICATION.  ****')
 1025 FORMAT(////1H ,'****  NUMBER OF FUNCTION CARDS IS EXCEEGING ITS LI
     1MIT ( 5 ).  ****')
 1026 FORMAT(////1H ,'****  TOO LARGE NUMBER OF INPUT MATRICES.  ****')
 1027 FORMAT(////1H ,'****  NO PRESENTATION OF NGROUP AND NORDER FOR INP
     1UT MATRIX NO.',I2,'.  ****')
 1028 FORMAT(////1H ,'****  ILLEGAL DATA FOR NGROUP OR NORDER FOR INPUT
     1MATRIX NO.',I2,'.  ****')
 1029 FORMAT(////1H ,12H****  'BEAM',' DATA SHOULD PRECEED THE SYSTEM PA
     1RAMETER DATA.  ****')
 1030 FORMAT(////1H ,'****  DISPERSION BASE IN DALT DATA DOES NOT FIT TO
     1 AN INPUT MATRIX.  ****')
 1031 FORMAT(////1H ,'****  ILLEGAL VARIABLE DEFINITION BEFORE INPUT OF
     1SYSTEM DATA.  ****')
 1032 FORMAT(////1H ,'****  TOO MANY REQUESTS FOR PARAMETER ALTERATION.
     1 THE REQUESTS ARE ACCEPTED BUT WILL NOT BE LISTED BELOW.  (WARNING
     2 ONLY)  ****')
 1033 FORMAT(////1H ,'****  UNDEFINED ELEMENT NAME IN MATRIX PRINT-OUT O
     1PTION.  ****')
C
C
      IF(ILLEG .EQ. 0) WRITE(6, 1000)
      GO TO (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
     1       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
     2       32, 33), K
C
    1 WRITE(6, 1001) ( IBUF(I), I = 1, 4 )
        GO TO 100
    2 WRITE(6, 1002)
        GO TO 100
    3 WRITE(6, 1003)
        GO TO 100
    4 WRITE(6, 1004)
        GO TO 100
    5 WRITE(6, 1005) ( IBUF(I), I = 1, 4 )
        GO TO 100
    6 WRITE(6, 1006)
        GO TO 100
    7 WRITE(6, 1007)
        GO TO 100
    8 WRITE(6, 1008) IBUF(81), IBUF(82)
        GO TO 100
    9 WRITE(6, 1009) IBUF(81)
        GO TO 100
   10 WRITE(6, 1010)
        GO TO 100
   11 WRITE(6, 1011)
        GO TO 100
   12 WRITE(6, 1012) IBUF(81), IBUF(82)
        GO TO 100
   13 WRITE(6, 1013)
        GO TO 100
   14 WRITE(6, 1014)
        GO TO 100
   15 WRITE(6, 1015)
        GO TO 100
   16 WRITE(6, 1016)
        GO TO 100
   17 WRITE(6, 1017)
        GO TO 100
   18 WRITE(6, 1018)
        GO TO 100
   19 WRITE(6, 1019)
        GO TO 100
   20 WRITE(6, 1020) IBUF(81), IBUF(82)
        GO TO 100
   21 WRITE(6, 1021) ( IBUF(I), I = 1, 80 )
        GO TO 100
   22 WRITE(6, 1022)
        GO TO 100
   23 WRITE(6, 1023) IBUF(81),IBUF(82)
        GO TO 100
   24 WRITE(6, 1024)
        GO TO 100
   25 WRITE(6, 1025)
        GO TO 100
   26 WRITE(6, 1026)
        GO TO 100
   27 WRITE(6, 1027) IBUF(81)
        GO TO 100
   28 WRITE(6, 1028) IBUF(81)
        GO TO 100
   29 WRITE(6, 1029)
        GO TO 100
   30 WRITE(6, 1030)
        GO TO 100
   31 WRITE(6, 1031)
        GO TO 100
   32 WRITE(6, 1032)
        GO TO 100
   33 WRITE(6, 1033)
  100 ILLEG = 1
      RETURN
      END
C
C
      SUBROUTINE MREAD(STACK, NE, NBMX, NCONT, ILLEG, JUDGE)
C
C
C     READIN MATRIX ELEMENTS INTO BMTRX.
C
C       JUDGE = 1   SUCCESSFUL READIN.
C       JUDGE = 2   INPUT DATA ERROR.
C       JUDGE = 3   READ ERROR.
C       JUDGE = 4   EOF DETECTION.
C
C
      CHARACTER*4 ELEM, IBUF, NICK
      CHARACTER*4 IBMXEQ
      COMMON/BLOCK3/ NGROUP, NORDER
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5), IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
      COMMON /BFFR/ IBUF(400), LENGTH, IPTR
      EQUIVALENCE (IBMX, IBMXEQ)
      DIMENSION STACK(100)
C
      NCONT = 0
      IF(IBMX .GE. NBMX) GO TO 100
      IBMX = IBMX + 1
      JBMX(IBMX) = NE
      CALL TAKE(STACK, 2, N, JUDGE)
        GO TO (1, 101, 102, 103), JUDGE
    1     IF(AMOD(STACK(1), 1.0) .NE. 0.0 .OR.
     1       AMOD(STACK(2), 1.0) .NE. 0.0)   GO TO 104
          NG = STACK(1)
          NO = STACK(2)
          IF(NG .LE. 0 .OR. NG .GT. 3 .OR. NO .LE. 0 .OR. NO .GT. 3)
     1                                                         GO TO 104
          IF(NGROUP .EQ. 3) GO TO 2
          IF(NGROUP .NE. NG) GO TO 104
    2     IGROUP(IBMX) = NG
          IORDER(IBMX) = NO
          DO 11 I = 1, 2
          DO 11 J = 1, 59
   11     BMTRX(IBMX, I, J) = 0.0
      DO 12 I = 1, 2
      CALL NTAKE(STACK, NMXE(NG, NO), N, JUDGE)
        GO TO (10, 105, 102, 103), JUDGE
   10       N = 0
            JX = IXEND(NG, NO)
            IY = IYSTR(NG)
            JY = IYEND(NG, NO)
               DO 13 J = 1, JX
               N = N + 1
   13          BMTRX(IBMX, I, J) = STACK(N)
                 DO 14 J = IY, JY
                 N = N + 1
   14            BMTRX(IBMX, I, J) = STACK(N)
   12      CONTINUE
            JUDGE = 1
            RETURN
C
  100 CALL ERWT(26, ILLEG)
      GO TO 200
  101   IBUF(81) = IBMXEQ
        CALL ERWT(27, ILLEG)
  105   NCONT = N
        GO TO 200
  102     JUDGE = 3
          RETURN
  103       JUDGE = 4
            RETURN
  104         IBUF(81) = IBMXEQ
              CALL ERWT(28, ILLEG)
  200             JUDGE = 2
                  RETURN
                    END
C
C
      SUBROUTINE MXID(NE, NP, MX, IM, JM, INDEX)
C
C     MATRIX IDENTIFICATION AND DETERMINATION OF ELEMENT SUBSCRIPTS.
C
C       INDEX = 0   SUCCESSFUL EXECUTION.
C       INDEX = 1   UNSUCCESSFUL EXECUTION.
C
C
      CHARACTER*4 ELEM, NICK
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
C
      INDEX = 1
      IF(NELEM(NE) .NE. 18) RETURN
        DO 10 J = 1, IBMX
        IF(JBMX(J) .EQ. NE) GO TO 20
   10   CONTINUE
        RETURN
   20     MX = J
          IG = IGROUP(MX)
          IO = IORDER(MX)
          N = NMXE(IG, IO)
          IF(NP .GT. 2*N .OR. NP .LE. 0) RETURN
            IM = 1
            JM = NP
            IF(JM .LE. N) GO TO 30
            IM = 2
            JM = JM - N
   30         IF(JM .GT. IXEND(IG, IO))
     1                  JM = JM - IXEND(IG, IO) + IYSTR(IG) - 1
         INDEX = 0
         RETURN
           END
C
C
      SUBROUTINE SYSPT(IDENS)
C
C
C     PRINTOUT SYSTEM PARAMETERS WITH OR WITHOUT SEPARATIONS BETWEEN
C     LINES.
C     THE PARAMETERS ASSIGNED AS VARIABLES ARE MARKED BY ASTERISKS.
C
C
      CHARACTER*4 IIBUF, ELEM, NICK, TEXT
      CHARACTER*4 FORM, FM, BLANK
      INTEGER FNUM, PROFF
      COMMON/BLOCK3/ NGROUP, NORDER
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
      DIMENSION FORM(15),FM(6),DUMMY(20)
C      DATA FORM(1),FORM(2),FM/4H(1H+,4H13X,,4H12X,,4H2H *,4H10X,,4H1H*),
C     1                        4H 3X,,4H2H* /
C      DATA BLANK / 1H  /
      DATA FORM(1),FORM(2),FM/'(1H+','13X,','12X,','2H *','10X,','1H*)',
     1                        ' 3X,','2H* '/
      DATA BLANK / ' '  /
C
 1000 FORMAT(1H ,4X,'TYPE NAME',3X,9(I2,10X),I2)
 1001 FORMAT(1H )
 1002 FORMAT(1H ,I3,1X,A4)
C 1003 FORMAT(1H ,I3,1X,A4,5X,1P10E12.4)
 1003 FORMAT(1H ,I3,1X,A4,5X,1P8E12.4,1P2E11.4)
 1004 FORMAT(1H ,13X,1P10E12.4)
 1005 FORMAT(1H+,8X,1H(,3A1,1H))
 1006 FORMAT(1H+,17X,'**  LISTED BELOW.  **')
C
      WRITE(6, 1000) (I, I = 1, 10)
      IF(IDENS .NE. 0) WRITE(6, 1001)
        JMAX = NPRM(17) - 2
        DUMMY(1) = NGROUP
        DUMMY(2) = NORDER
        DO 25 J = 1, JMAX
   25   DUMMY(J + 2) = AKK(J)
      DO 10 II = 1, NELT + 1
        I = II - 1
        IF(I .NE. 0) GO TO 26
          NE = 17
          GO TO 31
   26   NE = NELEM(I)
   31   NP = NPRM(NE)
        IF(NP .NE. 0) GO TO 11
          WRITE(6, 1002) I, ELEM(NE)
          IF(NICK(I, 1) .NE. BLANK) WRITE(6, 1005) (NICK(I,J), J = 1, 3)
          IF(NE .EQ. 18) WRITE(6, 1006)
          JMAX = NP
          GO TO 12
   11   NF = NFOR(NE)
        IF( NF .EQ. 0 ) GO TO 21
        AI = 3.0
        IF(NF .LE. 8) AI = 1.0
        IF(AMOD(PRM(I, NF), 10.0) .GT. AI) GO TO 21
        NP = NF
   21   JMIN = 1
   22   JMAX = MIN0(NP, JMIN + 9)
          IF( JMIN .NE. 1 ) GO TO 23
          IF(I .EQ. 0) GO TO 32
          WRITE(6, 1003) I, ELEM(NE), ( PRM(I, J), J = JMIN, JMAX )
          IF(NICK(I,1) .NE. BLANK) WRITE(6, 1005) (NICK(I,J), J = 1, 3)
          GO TO 24
   32     IF(KINE .NE. 0) GO TO 34
          JMAX = 2
          NP = 2
   34     WRITE(6, 1003) I, ELEM(NE), (DUMMY(J), J = JMIN, JMAX)
          GO TO 24
   23     IF(I .EQ. 0) GO TO 33
          WRITE(6, 1004)  ( PRM(I, J), J = JMIN, JMAX )
          GO TO 24
   33     WRITE(6, 1004)  ( DUMMY(J), J = JMIN, JMAX)
   24     IF( NVR .LE. 0 ) GO TO 12
            DO 14 J = 1, NVR
            IF( NVEL(J) .NE. I ) GO TO 14
              K = NVPR(J)
              IF( K .LT. JMIN .OR. K .GT. JMAX ) GO TO 14
              K = K - JMIN + 1
              LL = 2
              IF( K .LE. 1 ) GO TO 15
               DO 16 L = 1, K - 1
               LL = LL + 1
   16          FORM(LL) = FM(1)
   15             DO 17 L = 1, 3
   17             FORM(LL + L) = FM(L + 1)
              IF( PRM(I, K) .LT. 0.0 ) FORM(LL + 1) = FM(6)
              IF( PRM(I, K) .EQ. 0.0 ) FORM(LL + 2) = FM(5)
            WRITE(6, FORM)
   14       CONTINUE
   12     IF( IDENS .NE. 0 ) WRITE(6,1001)
        IF( JMAX .EQ. NP ) GO TO 10
        JMIN = JMIN + 10
        GO TO 22
   10 CONTINUE
        IF(IBMX .EQ. 0) RETURN
        DO 30 I = 1, IBMX
        IF(IDENS .NE. 0) WRITE(6, 1001)
        II = I
   30   CALL SPRINT(II)
      IF(IDENS .NE. 0) WRITE(6, 1001)
      RETURN
      END
C
C
      SUBROUTINE PRINT(A)
C
C       ENTRIES ;  PRINT AND SPRINT.
C
C     PRINT : PRINT MATRIX A GIVEN IN THE ARGUMENT IN F-TYPE FORMAT.
C     SPRINT: PRINT MATRIX BMTRX IN THE COMMON BLOCK 'SYSTEM' IN E-TYPE
C             FORMAT AND MARK VARIABLE ELEMENTS BY ASTERISKS.
C
C
      CHARACTER*4 IIBUF, ELEM, NICK, TEXT
      CHARACTER*4 FORM, FM, P, Q, R, T, TT, BLANK
      DIMENSION P(39),Q(39),R(59),TT(4),ITS(3),FORM(15),FM(6),A(2,59)
      DIMENSION T(137)
      EQUIVALENCE (P(1), T(1)), (Q(1), T(40)), (R(1), T(79))
      COMMON/BLOCK3/ NGROUP, NORDER
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
      DATA P/
     1      'X  ','A  ','T  ','XX ','XA ','XT ','AA ','AT ','TT ','YY ',
     2      'YB ','BB ','XXX','XXA','XXT','XAA','XAT','XTT','XYY','XYB',
     3      'XBB','AAA','AAT','ATT','AYY','AYB','ABB','TTT','TYY','TYB',
     4      'TBB','Y  ','B  ','YX ','YA ','YT ','BX ','BA ','BT '/
      DATA Q/
     1      'X  ','A  ','D  ','XX ','XA ','XD ','AA ','AD ','DD ','YY ',
     2      'YB ','BB ','XXX','XXA','XXD','XAA','XAD','XDD','XYY','XYB',
     3      'XBB','AAA','AAD','ADD','AYY','AYB','ABB','DDD','DYY','DYB',
     4      'DBB','Y  ','B  ','YX ','YA ','YD ','BX ','BA ','BD '/
      DATA R/
     1      'X  ','A  ','C  ','D  ','XX ','XA ','XC ','XD ','AA ','AC ',
     2      'AD ','CC ','CD ','DD ','YY ','YB ','BB ','XXX','XXA','XXC',
     3      'XXD','XAA','XAC','XAD','XCC','XCD','XDD','XYY','XYB','XBB',
     4      'AAA','AAC','AAD','ACC','ACD','ADD','AYY','AYB','ABB','CCC',
     5      'CCD','CDD','CYY','CYB','CBB','DDD','DYY','DYB','DBB','Y  ',
     6      'B  ','YX ','YA ','YC ','YD ','BX ','BA ','BC ','BD '/
      DATA TT/'X','A','Y','B'/
      DATA FORM(1),FORM(2),FM/'(1H+',' 1X,','12X,','2H *','10X,','1H*)',
     1                        ' 3X,','2H* '/
      DATA ITS/ 1, 40, 79/
      DATA BLANK/' ' /
C
 1001 FORMAT(1H , 8X, 10(9X, A3))
 1002 FORMAT(1H , 4X, A1, 7X, 10F12.5)
 1003 FORMAT(1H )
 1004 FORMAT(1H ,'MTRX #', I1,1X, 10(9X, A3))
 1005 FORMAT(1H+,7X,1H(,3A1,1H))
 1006 FORMAT(1H ,11X, A1, 1X, 1P10E12.4)
 1007 FORMAT(1H ,8X,10(9X,A3))
C
      NG = NGROUP
      NO = NORDER
      INDEX = 1
      GO TO 100
C
C
      ENTRY SPRINT(MXN)
C
      NG = IGROUP(MXN)
      NO = IORDER(MXN)
      INDEX = 2
C
C
  100 MSTR = 1
      MEND = IXEND(NG, NO)
      K = 0
C
  200 LEN = MEND - MSTR + 1
      LINE = LEN/10
      IF(MOD(LEN, 10) .NE. 0) LINE = LINE + 1
C
        DO 10 L = 1, LINE
        ME = MIN0(MSTR + 9, MEND)
        IST = MSTR + ITS(NG) - 1
        ITE = ME   + ITS(NG) - 1
        GO TO (300, 400), INDEX
C
  300     WRITE(6, 1001) (T(I), I = IST, ITE)
          DO 301  J = 1, 2
  301     WRITE(6, 1002) TT(J + K), (A(J, I), I = MSTR , ME)
          IF(J .EQ. 2) WRITE(6, 1003)
          GO TO 10
C
  400       IF(K .NE. 0 .OR. L .NE. 1) GO TO 410
            WRITE(6, 1004) MXN, (T(I), I = IST, ITE)
            IF(NICK(JBMX(MXN), 1) .NE. BLANK)
     1                   WRITE(6, 1005) (NICK(JBMX(MXN), I), I = 1, 3)
            GO TO 411
  410       WRITE(6, 1007) (T(I), I = IST, ITE)
  411       DO 401 J = 1, 2
            WRITE(6, 1006) TT(J + K), (BMTRX(MXN, J, I), I = MSTR, ME)
              DO 402 I = 1, NVR
               IF(NELEM(NVEL(I)).NE.18 .OR. MXNV(I).NE.MXN) GO TO 402
               IF(IIMV(I) .NE. J) GO TO 402
               IF(JJMV(I) .GT. ME .OR. JJMV(I) .LT. MSTR) GO TO 402
               IBL = JJMV(I) - MSTR + 1
                 DO 403 M = 1, IBL
                 LL = M + 2
  403            FORM(LL) = FM(1)
                   DO 404 M = 1, 3
  404              FORM(LL + M) = FM(M + 1)
               IF(BMTRX(MXN,IIMV(I),JJMV(I)) .LT. 0.0) FORM(LL+1)=FM(6)
               IF(BMTRX(MXN,IIMV(I),JJMV(I)) .EQ. 0.0) FORM(LL+2)=FM(5)
               WRITE(6, FORM)
  402         CONTINUE
  401       CONTINUE
   10   MSTR = ME + 1
C
      IF(K .NE. 0) RETURN
      MSTR = IYSTR(NG)
      MEND = IYEND(NG, NO)
      K = 2
      GO TO 200
        END
C
C
      SUBROUTINE OPTION(IBUF, LENGTH, IPTR, JUDGE)
C
C
C     ANALYZE OPTION CARD.
C
C
      CHARACTER*4 IIBUF, IBUF, TEXT
      CHARACTER*4 CHR1, CHR2, GNC
      INTEGER FNUM, PROFF
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      DIMENSION IBUF(4)
C
  100 FORMAT(////1H ,'****  OUTPUT OPTION TO FILE',I3,' IS IGNORED.   (W
     1ARNING ONLY)  ****')
C
C
C     INITIALIZATION.
C
      JUDGE = 1
      IND = 0
      NC = 0
      FNUM = 0
      ITER = 0
      FLIMIT = 1.0E-8
      NPRNT = 0
      PROFF = 0
      NVR = 0
      MOUT = 0
C
C     CHECK FORM OF EQUATION.
C
   10 CHR1 = GNC(IBUF, LENGTH, IPTR)
      IF(CHR1 .EQ. COMMA) GO TO 10
      IF(CHR1 .NE. BLANK) GO TO 11
      IF(IND .EQ. 0) RETURN
      GO TO 32
   11 CHR2 = GNC(IBUF, LENGTH, IPTR)
      IF(CHR2 .NE. EQUAL) RETURN
      CHR2 = GNC(IBUF, LENGTH, IPTR)
      IF(CHR2 .EQ. BLANK) RETURN
      IPTR = IPTR - 1
      CALL NUMBER(IBUF, LENGTH, IPTR, IR, RR, INT, INDEX)
      IF(INDEX .NE. 0) RETURN
C
C     CHECK CHARACTERS AT THE LEFTHAND SIDE OF THE EQUATION.
C
      IF(CHR1 .EQ. CC) GO TO 21
      IF(CHR1 .EQ. CF) GO TO 22
      IF(CHR1 .EQ. CI) GO TO 23
      IF(CHR1 .EQ. CL) GO TO 24
      IF(CHR1 .EQ. CM) GO TO 25
      IF(CHR1 .EQ. CP) GO TO 26
      IF(CHR1 .EQ. CV) GO TO 27
      IF(CHR1 .EQ. CO) GO TO 28
      RETURN
C
C     DEFINE OPTIOAL PARAMETERS.
C
   21 NC = IR
      GO TO 31
   22 FNUM = IR
      GO TO 31
   23 ITER = IR
      GO TO 31
   24 FLIMIT = RR
      GO TO 31
   25 NPRNT = IR
      GO TO 31
   26 PROFF = IR
      GO TO 31
   27 NVR = IR
      GO TO 31
   28 IF(IR .EQ. 5 .OR. IR .EQ. 6 .OR. IR .LT. 0) GO TO 33
      MOUT = IR
      GO TO 31
   33 WRITE(6, 100) IR
C
   31 IND = IND + 1
      IF(IND .LT. 8) GO TO 10
      IF( NC .GT. 0 .AND. NC .GE. NVR ) RETURN
   32 JUDGE = 0
      RETURN
      END
C
C
      SUBROUTINE TAKE( STACK, NSTACK, N, JUDGE )
C
C       ENTRIES ; TAKE, CTAKE , TAKE AND CCTAKE.
C
C     TAKE NUMERIC DATA FROM CARDS INTO STACK WITH A STACK SIZE OF
C     NSTACK WORDS.  DATA TAKING IS TERMINATED ON FINDING A CONTROL
C     CARD OR ON DETECTING THE STACK BEING FILLED UP.  THE NUMBER OF THE
C     DATA TAKEN IS GIVEN IN N.  WHEN JUDGE = 2, N SHOWS WHAT KIND
C     OF CONTROL CARD IS FOUND.  WHEN NSTACK .LE. 0, ONLY CONTROL
C     CARD CHECK IS PERFORMED.
C     'TAKE', 'CTAKE' AND 'CCTAKE' BEGIN THE JOB WITH READING A CARD AND
C     'TAKE' WITH PROCESSING THE CURRENT BUFFER.  'CTAKE' CONVERTS THE
C     FIRST THREE CHARACTERS IN TO A NUMBER AND ACCEPTS IT AS A FIRST
C     DATA.  'CCTAKE' CONVERTS EVERY THREE SUCCESSIVE CHARACTERS
C     ENCOUNTERED (NOT INCLUDING BLANKS AND STARTING WITH A NON-BLANK
C     CHARACTER) INTO A NUMBER AND TAKES IT AS A DATA.
C
C       JUDGE = 1   RETURN AFTER FILLING UP THE STACK.
C       JUDGE = 2   RETURN ON DETECTING A CONTROL CARD.
C       JUDGE = 3   RETURN ON DETECTING AN ERROR.
C       JUDGE = 4   RETURN ON DETECTING END OF DATA.
C       JUDGE = 5   RETURN ON DETECTING WRONG NAME. (CCTAKE ONLY)
C
C
      CHARACTER*4 IBUF
      CHARACTER*4 GNC, M
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      COMMON /BFFR/ IBUF(400), LENGTH, IPTR
      DIMENSION STACK(1)
C
 1000 FORMAT( 80A1 )
C
      ITYPE = 0
      GO TO 40
C
C
      ENTRY CTAKE(STACK, NSTACK, N, JUDGE)
C
      ITYPE = 1
      GO TO 40
C
C
      ENTRY NTAKE(STACK, NSTACK, N, JUDGE)
C
      IF(NSTACK .LE. 0) GO TO 3
      ITYPE = 2
      GO TO 40
C
C
      ENTRY CCTAKE(STACK, NSTACK, N, JUDGE)
C
      ITYPE = 3
C
C
C     INITIALZATION
C
   40 N = 0
      LENGTH = 80
      IF(ITYPE .EQ. 2) GO TO 11
C
C     READ A CARD.
C
   10 READ( 5, 1000, ERR = 3, END = 4 ) (IBUF(I), I = 1, 80)
        CALL HEAD( IBUF, I )
        IF( I .GT. 0 .OR. NSTACK .LE. 0) GO TO 2
C
C     SKIP BLANKS.
C
      IPTR = 1
   11 M = GNC( IBUF, LENGTH, IPTR)
        IF(M .EQ. BLANK) GO TO 10
        IPTR = IPTR - 1
C
C     CONVERT CONTENTS OF IBUF INTO A NUMBER.
C
   20 IS = 0
      ICHR = 0
      IF(ITYPE .NE. 1 .AND. ITYPE .NE. 3) GO TO 24
      IF(M .EQ. BLANK .OR. M .EQ. COMMA .OR. M .EQ. EQUAL .OR.
     1   M .EQ. COLON .OR. M .EQ. SEMI .OR. M .EQ. SLASH) GO TO 201
        CALL CONVRT(IBUF, LENGTH, IPTR, RR, INDEX)
        GO TO (41, 10, 43, 44), INDEX
   41   IF(ITYPE .EQ. 1) ITYPE = 0
        IPTR = IPTR - 1
        GO TO 42
   43   IF(ITYPE .EQ. 1) ITYPE = 0
   24 CALL NUMBER( IBUF, LENGTH, IPTR, IR, RR, INT, INDEX )
      IF( INDEX .GE. 2 ) GO TO 3
      IF( INDEX .EQ. 1 ) GO TO 21
   42     N = N + 1
          STACK(N) = RR
          IF( IS .NE. 0 ) STACK(N) = -RR
        IF( N .GE. NSTACK ) GO TO 1
  201   IPTR = IPTR + 1
        GO TO 11
   44 IF(ITYPE .EQ. 3) GO TO 5
      GO TO 43
C
C     CHECK SYMBOL OF SIGN.
C
   21   IF( ICHR .NE. 0 ) GO TO 32
        IF( IBUF(IPTR) .EQ. PLUS ) GO TO 22
        IF( IBUF(IPTR) .EQ. MINUS ) GO TO 23
        GO TO 32
   23     IS = 1
   22     ICHR = 1
          IPTR = IPTR + 1
          M = GNC( IBUF, LENGTH, IPTR )
          IF( M .EQ. BLANK ) GO TO 10
          IPTR = IPTR-1
          GO TO 24
C
C     SKIP CHARACTERS UNTIL EITHER OF BLANK, COMMA, =, :, ; OR /
C     APPEARS.
C
   30 IPTR = IPTR + 1
      IF( IPTR .GT. LENGTH ) GO TO 10
        M = IBUF(IPTR)
   32   IF( M .EQ. BLANK .OR. M .EQ. COMMA .OR. M .EQ. EQUAL .OR.
     1      M .EQ. COLON .OR. M .EQ. SEMI  .OR. M .EQ. SLASH) GO TO 31
        GO TO 30
   31         IPTR = IPTR + 1
              IF( IPTR .GT. LENGTH ) GO TO 10
              GO TO 11
C
C     TERMINATION.
C
    1 JUDGE = 1
        IPTR = IPTR + 1
        RETURN
    2 JUDGE = 2
        STACK( N + 1 ) = 1.0E30
        N = I
        RETURN
    3 JUDGE = 3
        RETURN
    4 JUDGE = 4
        RETURN
    5 JUDGE = 5
        RETURN
        END
C
C
      SUBROUTINE ANAL(JUDGE)
C
C
C     ANALYZE EXPRESSION OF FUNCTION
C
C     CODE  MEANING
C       0....  (
C       1....  -
C       2....  +
C       3....  /
C       4....  *
C       5....  **
C       6....SINGLE ARGUMENT OPERATION
C       7....DOUBLE ARGUMENT OPERATION
C       8....PUT INTO STACK
C
C
      CHARACTER*4 IBUF
      CHARACTER*4 GNC, CHR, KEQ
      INTEGER DBL
      INTEGER OPR, VL, PLVL, PBGIN, PEND, XLVL
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      INTEGER OSTK,ASTK,KSTK,LSTK,MSTK,OSTKL,VSTKL,ASTKL,ESTK,PSTK,PSTKL
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      COMMON /BFFR/ IBUF(400), LENGTH, IPTR
      COMMON /FNCT/ OSTK(200),VSTK(100),ASTK(50),KSTK(50),LSTK(50),
     1              MSTK(50),OSTKL,VSTKL,ASTKL,ESTK(30),PSTK(30),PSTKL
      COMMON /ANLZ/ OPR(50),VL(50),PLVL,PBGIN(50),PEND(50),XLVL
      EQUIVALENCE (K, KEQ)
C
C
C
C     INITIALIZATION
C
      JUDGE = 1
      IPTR  = 1
      PLVL  = 0
      OSTKL = 0
      VSTKL = 0
      ASTKL = 0
      LEN   = LENGTH
C
C     SEARCH FOR EQUAL
C
      DO 1 I = 1, LENGTH
      CHR = GNC(IBUF, LEN, IPTR)
      IF(CHR .EQ. EQUAL) GO TO 61
      IF(CHR .EQ. BLANK) RETURN
    1 CONTINUE
      RETURN
C
C     BEGIN ANALYSIS
C
   10 CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .EQ. MINUS) GO TO 20
      IF(CHR .EQ. PLUS)  GO TO 30
      IF(CHR .EQ. SLASH) GO TO 40
      IF(CHR .EQ. STAR)  GO TO 50
      IF(CHR .EQ. OPAR)  GO TO 60
      IF(CHR .EQ. CPAR)  GO TO 70
      IF(CHR .EQ. CA)    GO TO 80
      IF(CHR .EQ. BLANK) GO TO 90
C
C     SYMBOL = NUMBER
C
      IF(VSTKL .GE. 100) RETURN
      IPTR = IPTR - 1
      CALL NUMBER(IBUF, LENGTH, IPTR, IR, RR, INT, INDEX)
      IF(INDEX .NE. 0) RETURN
      CALL VSTACK(RR)
      GO TO 10
C
C     SYMBOL = -
C
   20 IF(OSTKL .GE. 200) RETURN
      IF(DBL(0) .NE. 0) RETURN
      IF(PBGIN(PLVL) .EQ. 1) GO TO 21
      CALL OSTACK(1)
      GO TO 10
   21 CALL VSTACK(-1.0)
      CALL OSTACK(4)
      GO TO 10
C
C     SYMBOL = +
C
   30 IF(OSTKL .GE. 200) RETURN
      IF(DBL(0) .NE. 0) RETURN
      IF(PBGIN(PLVL) .EQ. 1) GO TO 10
      CALL OSTACK(2)
      GO TO 10
C
C     SYMBOL = /
C
   40 IF(OSTKL .GE. 200) RETURN
      IF(DBL(0) .NE. 0) RETURN
      IF(PBGIN(PLVL) .EQ. 1) RETURN
      CALL OSTACK(3)
      GO TO 10
C
C     SYMBOL = * OR **
   50 IF(OSTKL .GE. 200) RETURN
      K = DBL(0)
      IF(K .EQ. 1) RETURN
      IF(PBGIN(PLVL) .EQ. 1) RETURN
      IF(K .EQ. 2) GO TO 51
      CALL OSTACK(4)
      GO TO 10
   51 CALL OSTACK(5)
      KEQ = GNC(IBUF, LENGTH, IPTR)
      GO TO 10
C
C     SYMBOL = (
C
   60 IF(OSTKL .GE. 200) RETURN
      PBGIN(PLVL) = 0
   61 PLVL = PLVL + 1
      CALL OSTACK(0)
      VL(PLVL) = 0
      OPR(PLVL) = 0
      PBGIN(PLVL) = 1
      PEND(PLVL) = 1
      GO TO 10
C
C     SYMBOL = )
C
   70 IF(OSTKL .GE. 200) RETURN
      IF(PEND(PLVL) .EQ. 1) RETURN
   73 IF(VL(PLVL) .EQ. 0) RETURN
      IF(OPR(PLVL) .NE. 0) GO TO 71
      IF(VL(PLVL) .GT. 1) RETURN
      CALL OSTACK(6)
      GO TO 72
   71 IF(VL(PLVL) - 1 .NE. OPR(PLVL)) RETURN
      CALL OSTACK(7)
   72 PLVL = PLVL - 1
      IF(PLVL .LT. 0) RETURN
      VL(PLVL) = VL(PLVL) + 1
      PEND(PLVL) = 0
      IF(CHR .EQ. BLANK) GO TO 91
      GO TO 10
C
C     SYMBOL = A
C
   80 IF(ASTKL .GE. 50)  RETURN
      IF(VSTKL .GE. 100) RETURN
      CALL ARG(K, L, M, INDEX)
      IF(INDEX .NE. 0) RETURN
      CALL VSTACK(0.0)
      ASTKL = ASTKL + 1
      ASTK(ASTKL) = VSTKL
      KSTK(ASTKL) = K
      LSTK(ASTKL) = L
      MSTK(ASTKL) = M
      GO TO 10
C
C     SYMBOL = EOL
   90 IF(OSTKL .GE. 200) RETURN
      IF(PLVL .NE. 1) RETURN
      GO TO 73
   91 JUDGE = 0
      RETURN
      END
C
C
      SUBROUTINE HEAD(IBUF, NCONT)
C
C
C     CHECK FIRST FOUR CHARACTERS OF IBUF AND IDENTIFY DATA TYPE.
C
C
      CHARACTER*4 ITYPE, IBUF
      DIMENSION IBUF(4), ITYPE(4, 28)
      DATA ITYPE/ 'D','P','R','M',   'D','R','E','P',   'D','M','I','N',
     1            'D','E','N','D',   'D','A','L','T',
     2            'D','R','F','T',   'S','E','N','S',   'D','E','F','M',
     3            'Q','U','D','M',   'H','E','X','M',   'O','C','T','M',
     4            'D','E','F','E',   'Q','U','D','E',   'H','E','X','E',
     5            'O','C','T','E',   'T','S','E','T',   'X','S','E','T',
     6            'Y','S','E','T',   'E','N','D','S',   'M','P','L','M',
     7            'M','P','L','E',   'B','E','A','M',   'M','T','R','X',
     8            'A','A','A','A',   'B','B','B','B',   'C','C','C','C',
     9            'D','D','D','D',   'E','E','E','E' /
C
C
      NCONT = 0
      DO 10 I = 1, 28
      IF( IBUF(1) .NE. ITYPE(1, I) .OR.  IBUF(2) .NE. ITYPE(2, I) .OR.
     1    IBUF(3) .NE. ITYPE(3, I) .OR.  IBUF(4) .NE. ITYPE(4, I) )
     2    GO TO 10
        NCONT = I
        RETURN
   10 CONTINUE
        RETURN
      END
C
C
      SUBROUTINE THREE(IBUF, LENGTH, IPTR, M1, M2, M3)
C
C
C     TAKE THREE SUCCESSIVE CHARACTERS, NOT INCLUDING BLANKS AND
C    STARTING  WITH A NON-BLANK AND NON-NUMERIC CHARACTER, FROM IBUF.
C
C
      CHARACTER*4 GNC, M1, M2, M3, M, NUMB, IBUF
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      DIMENSION NUMB(10), IBUF(4)
      EQUIVALENCE (NUMB(1),N0)
C
      M1 = BLANK
      M2 = BLANK
      M3 = BLANK
   20   M = GNC(IBUF, LENGTH, IPTR)
        IF(M .EQ. BLANK) RETURN
        IF(M .EQ. COMMA .OR. M .EQ. EQUAL .OR. M .EQ. COLON .OR.
     1     M .EQ. SEMI .OR. M .EQ. SLASH) GO TO 20
          DO 30 I = 1, 10
          IF(M .EQ. NUMB(I)) GO TO 20
   30     CONTINUE
            M1 = M
            DO 40 I = 1, 2
            IF(IPTR .GT. LENGTH) RETURN
            M = IBUF(IPTR)
            IF(M .EQ. BLANK .OR. M .EQ. COMMA .OR. M .EQ. EQUAL .OR.
     1         M .EQ. COLON .OR. M .EQ. SEMI .OR. M .EQ. SLASH) RETURN
            IF(I .EQ. 1) M2 = M
            IF(I .EQ. 2) M3 = M
   40       IPTR = IPTR + 1
              RETURN
              END
C
C
      SUBROUTINE CONVRT(IBUF, LENGTH, IPTR, RR, INDEX)
C
C
C     CONVERT A NICKNAME IN THE BUFFER INTO AN ELEMENT NUMBER.
C
C        INDEX = 1   SUCCESSFUL CONVERSION.
C        INDEX = 2   EMPTY BUFFER DETECTION.
C        INDEX = 3   NUMERIC CHARACTER DETECTION.
C        INDEX = 4   ERROR DETECTION.
C
C
      CHARACTER*4 NICK, IBUF
      CHARACTER*4 GNC, M, M1, M2, M3, NUMB
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      DIMENSION NUMB(10), IBUF(4)
      EQUIVALENCE (NUMB(1),N0)
C
      M = GNC(IBUF, LENGTH, IPTR)
      IF(M .EQ. BLANK) GO TO 20
      IPTR = IPTR - 1
        DO 10 I = 1, 10
        IF(M .EQ. NUMB(I)) GO TO 30
   10   CONTINUE
        IPTT = IPTR
          CALL THREE(IBUF, LENGTH, IPTR, M1, M2, M3)
          DO 40 I = 1, NELT
          IF(M1 .EQ. NICK(I, 1) .AND. M2 .EQ. NICK(I, 2) .AND.
     1       M3 .EQ. NICK(I, 3)) GO TO 50
   40     CONTINUE
      INDEX = 4
      IPTR = IPTT
      RETURN
   20   INDEX = 2
        RETURN
   30     INDEX = 3
          RETURN
   50       RR = I
            INDEX = 1
            RETURN
              END
C
C
      SUBROUTINE NUMBER(IBUF, LENGTH, IPTR, IR, RR, INT, INDEX)
C
C     CONVERT A NUMERIC STRING INTO A NUMBER STORING THE RESULT IN IR
C     AND RR IN AN INTEGER AND A REAL FORMS, RESPECTIVELY.  THE MAXIMUM
C     NUMBER OF SIGNIFICANT FIGURES ACCEPTABLE IS 9.
C
C      INDEX = 0   NORMAL RETURN
C      INDEX = 1   NON NUMERIC RETURN
C      INDEX = 2   ERROR RETURN
C
C
      CHARACTER*4 IBUF
      CHARACTER*4 CHR, NUMB
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      DIMENSION NUMB(10), IBUF(4)
      EQUIVALENCE (NUMB(1),N0)
      DATA IMAX /214748363/
C
C
      IR = 0
      II = 0
      IDFLG = 0
      IDEC = 0
   70 CHR = IBUF(IPTR)
      DO 10 J = 1, 10
      IF(CHR .EQ. NUMB(J)) GO TO 20
   10 CONTINUE
      IF(CHR .NE. PERIOD) GO TO 30
      IF(IDFLG .NE. 0) GO TO 40
      IDFLG = 1
      GO TO 60
   30 IF(II .NE. 0) GO TO 50
      IF(IDFLG .NE. 0) GO TO 40
      INDEX = 1
      RETURN
   40 INDEX = 2
      RETURN
   50 INDEX = 0
      INT = 0
      IF(IDFLG .EQ. 0) INT = 1
      RR = FLOAT(IR)/10.0**IDEC
      RETURN
   20 IF(IR .LE. IMAX) GO TO 80
      IF(IDFLG .EQ. 0) IDEC = IDEC - 1
      GO TO 90
   80 IR = IR*10 + J - 1
      IF(IDFLG .NE. 0) IDEC = IDEC + 1
   90 II = II + 1
   60 IPTR = IPTR + 1
      IF(IPTR .LE. LENGTH) GO TO 70
      IF(II .NE. 0) GO TO 50
      GO TO 40
      END
C
C
      CHARACTER*4 FUNCTION GNC(IBUF, LENGTH, IPTR)
C
C     GET NEXT CODE
C
C
      CHARACTER*4 IBUF
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      DIMENSION IBUF(4)
C
C
   20 IF(IPTR .LE. LENGTH) GO TO 10
      GNC = BLANK
      RETURN
   10 GNC = IBUF(IPTR)
      IPTR = IPTR + 1
      IF(GNC .NE. BLANK) RETURN
      GO TO 20
      END
C
C
      SUBROUTINE ARG(K, L, M, JUDGE)
C
C     DEFINE ARGUMENTS OF THE MATRIX ELEMENT ENCOUNTERED
C
C
      CHARACTER*4 IBUF, NICK, IS
      CHARACTER*4 GNC, CHR
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      COMMON /BFFR/ IBUF(400), LENGTH, IPTR
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      COMMON/BLOCK3/ NGROUP, NORDER
      DIMENSION MAX(3), MM(3), IS(7), IA(39), IB(39), IC(59)
      DATA MAX/ 39, 39, 59/
      DATA IS/ 'X', 'A', 'Y', 'B', 'T', 'D', 'C' /
      DATA IA/ 100, 200, 500, 110, 210, 510, 220, 520, 550, 330,
     1         430, 440, 111, 211, 511, 221, 521, 551, 331, 431,
     2         441, 222, 522, 552, 332, 432, 442, 555, 533, 543,
     3         544, 300, 400, 310, 320, 530, 410, 420, 540 /
      DATA IB/ 100, 200, 600, 110, 210, 610, 220, 620, 660, 330,
     1         430, 440, 111, 211, 611, 221, 621, 661, 331, 431,
     2         441, 222, 622, 662, 332, 432, 442, 666, 633, 643,
     3         644, 300, 400, 310, 320, 630, 410, 420, 640 /
      DATA IC/ 100, 200, 700, 600, 110, 210, 710, 610, 220, 720,
     1         620, 770, 760, 660, 330, 430, 440, 111, 211, 711,
     2         611, 221, 721, 621, 771, 761, 661, 331, 431, 441,
     3         222, 722, 622, 772, 762, 662, 332, 432, 442, 777,
     4         776, 766, 733, 743, 744, 666, 633, 643, 644, 300,
     5         400, 310, 320, 730, 630, 410, 420, 740, 640 /
C
C     SEARCH FOR OPEN PARENTHESES
C
      INDEX = 1
      CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .NE. OPAR) RETURN
C
C     COUNT COMMAS.
C
      IPO = IPTR
      ICOM = 0
    2 CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .EQ. BLANK) RETURN
      IF(CHR .EQ. CPAR) GO TO 1
      IF(CHR .NE. COMMA) GO TO 2
      ICOM = ICOM + 1
      GO TO 2
    1 IF(ICOM .LE. 0 .OR. ICOM .GT. 2) RETURN
      IPTR = IPO
C
C     TAKE FIRST ARGUMENT.
C
      K = NELT
      IF(ICOM .EQ. 1) GO TO 23
      CALL CONVRT(IBUF, LENGTH, IPTR, RR, INDEX)
      GO TO (11, 100, 13, 100), INDEX
   11 K = RR
      GO TO 20
   13 CALL NUMBER(IBUF, LENGTH, IPTR, IR, RR, INT, INDEX)
      IF(INDEX .NE. 0 .OR. INT .NE. 1) RETURN
      K = IR
C
C     TAKE SECOND ARGUMENT.
C
   20 CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .NE. COMMA) RETURN
   23 CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .EQ. BLANK) RETURN
      DO 21 I = 1, 4
      IF(CHR .EQ. IS(I)) GO TO 22
   21 CONTINUE
      IPTR = IPTR - 1
      CALL NUMBER(IBUF, LENGTH, IPTR, IR, RR, INT, INDEX)
      IF(INDEX .NE. 0 .OR. INT .NE. 1) RETURN
      L = IR
      GO TO 30
   22 IF(I .GE. 3) I = I - 2
      L = I
C
C     TAKE THIRD ARGUMENT.
C
   30 CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .NE. COMMA) RETURN
      DO 31 I = 1, 3
   31 MM(I) = 0
      DO 32 I = 1, 4
      CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .EQ. BLANK) RETURN
      IF(CHR .EQ. CPAR) GO TO 38
      DO 33 J = 1, 7
      IF(CHR .EQ. IS(J)) GO TO 39
   33 CONTINUE
      IF(I .EQ. 1) GO TO 46
      RETURN
   39 MM(I) = J
   32 CONTINUE
      RETURN
   38 IF(I .EQ. 1) RETURN
      IF(MM(1) .GE. MM(2)) GO TO 35
      I = MM(1)
      MM(1) = MM(2)
      MM(2) = I
   35 IF(MM(1) .GE. MM(3)) GO TO 36
      I = MM(1)
      MM(1) = MM(3)
      MM(3) = I
   36 IF(MM(2) .GE. MM(3)) GO TO 37
      I = MM(2)
      MM(2) = MM(3)
      MM(3) = I
   37 IPO = MM(1)*100 + MM(2)*10 + MM(3)
      J = MAX(NGROUP)
      DO 40 I = 1, J
      GO TO (41, 42, 43), NGROUP
   41 IF(IPO .EQ. IA(I)) GO TO 44
      GO TO 40
   42 IF(IPO .EQ. IB(I)) GO TO 44
      GO TO 40
   43 IF(IPO .EQ. IC(I)) GO TO 44
   40 CONTINUE
      RETURN
   44 M = I
      GO TO 45
   46 IPTR = IPTR - 1
      CALL NUMBER(IBUF, LENGTH, IPTR, IR, RR, INT, INDEX)
      IF(INDEX .NE. 0 .OR. INT .NE. 1) RETURN
      M = IR
      CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .NE. CPAR) RETURN
   45 JUDGE = 0
  100 RETURN
      END
C
C
      INTEGER FUNCTION DBL(IIII)
C
C     CHECK NEXT CHARACTER
C
C     DBL = 0  ;  NEXT IS NOT AN OPERATOR.
C     DBL = 1  ;  NEXT IS +, - OR / .
C     DBL = 2  ;  NEXT IS * .
C
C
      CHARACTER*4 IBUF
      CHARACTER*4 GNC, CHR
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
      COMMON /BFFR/ IBUF(400), LENGTH, IPTR
C
C
      IIII = IIII
      K = IPTR
      DBL = 1
      CHR = GNC(IBUF, LENGTH, IPTR)
      IF(CHR .EQ. PLUS .OR. CHR .EQ. MINUS .OR. CHR .EQ. SLASH) GO TO 1
      IF(CHR .EQ. STAR) GO TO 2
      DBL = 0
      GO TO 1
    2 DBL = 2
    1 IPTR = K
      RETURN
      END
C
C
      SUBROUTINE OSTACK(IOP)
C
C     ENTRY = OSTACK  :  PUT AN OPRATOR INTO OSTK
C     ENTRY = VSTACK  :  PUT A VALUE INTO VSTK
C
C
      INTEGER OPR, VL, PLVL, PBGIN, PEND, XLVL
      INTEGER OSTK,ASTK,KSTK,LSTK,MSTK,OSTKL,VSTKL,ASTKL,ESTK,PSTK,PSTKL
      COMMON /ANLZ/ OPR(50),VL(50),PLVL,PBGIN(50),PEND(50),XLVL
      COMMON /FNCT/ OSTK(200),VSTK(100),ASTK(50),KSTK(50),LSTK(50),
     1              MSTK(50),OSTKL,VSTKL,ASTKL,ESTK(30),PSTK(30),PSTKL
C
C
      OSTKL = OSTKL + 1
      OSTK(OSTKL) = IOP
      IF(IOP .GE. 1 .AND. IOP .LE. 5) OPR(PLVL) = OPR(PLVL) + 1
      PBGIN(PLVL) = 0
      PEND(PLVL) = 1
      RETURN
C
C
      ENTRY VSTACK(V)
C
C
      VSTKL = VSTKL + 1
      OSTKL = OSTKL + 1
      VSTK(VSTKL) = V
      OSTK(OSTKL) = 8
      PBGIN(PLVL) = 0
      PEND(PLVL) = 0
      VL(PLVL) = VL(PLVL) + 1
      RETURN
      END
C
C
      SUBROUTINE EVAL(RESULT, INDEX)
C
C     EVALUATE FUNCTION
C
C
      INTEGER XLVL, VLVL, OLVL, OPR, OPT, OPP
      INTEGER OSTK,ASTK,KSTK,LSTK,MSTK,OSTKL,VSTKL,ASTKL,ESTK,PSTK,PSTKL
      COMMON /FNCT/ OSTK(200),VSTK(100),ASTK(50),KSTK(50),LSTK(50),
     1              MSTK(50),OSTKL,VSTKL,ASTKL,ESTK(30),PSTK(30),PSTKL
      COMMON /ANLZ/ OPR(100),OLVL,X(100),XLVL
C
C
      INDEX = 1
      IFLAG = 0
      XLVL = 0
      VLVL = 0
      OLVL = 0
      DO 1000 I = 1, OSTKL
      OPT = OSTK(I)
      IF(OPT .EQ. 0) GO TO 100
      IF(OPT .EQ. 8) GO TO 80
      IF(OPT .EQ. 7) GO TO 70
      IF(OPT .EQ. 6) GO TO 60
   30 OPP = OPR(OLVL)
      IF(OPT .LE. OPP) GO TO 40
      IF(OPT .EQ. 2 .AND. OPP .EQ. 1) GO TO 40
      IF(OPT .EQ. 4 .AND. OPP .EQ. 3) GO TO 40
      IF(IFLAG .EQ. 0) GO TO 100
      CALL CALC(OPT, INDEX)
      IF(INDEX .NE. 0) RETURN
      IF(OPP .EQ. 0) GO TO 10
      OPT = OPP
      GO TO 30
   10 IFLAG = 0
      OPT = OPR(OLVL)
      IF(OPT .EQ. 0) GO TO 1000
      GO TO 51
   40 CALL CALC(OPP, INDEX)
      IF(INDEX .NE. 0) RETURN
      GO TO 30
   60 OLVL = OLVL - 1
      GO TO 50
   70 IFLAG = 1
   50 OPT = OPR(OLVL)
   51 OLVL = OLVL - 1
      IF(OLVL .LE. 0)  GO TO 1000
      GO TO 30
   80 XLVL = XLVL + 1
      VLVL = VLVL + 1
      IF(VLVL .GT. VSTKL) RETURN
      X(XLVL) = VSTK(VLVL)
      GO TO 1000
  100 OLVL = OLVL + 1
      OPR(OLVL) = OPT
 1000 CONTINUE
      IF(XLVL .NE. 1) RETURN
      RESULT = X(1)
      INDEX = 0
      RETURN
      END
C
C
      SUBROUTINE CALC(OPT, INDEX)
C
C     PERFORM CALCULATION
C
C
      INTEGER OLVL, XLVL, OPR, OPT
      COMMON /ANLZ/ OPR(100), OLVL, X(100), XLVL
C
C
      INDEX = 1
      T = X(XLVL)
      XLVL = XLVL - 1
      GO TO (10, 20, 30, 40, 50), OPT
   10 X(XLVL) = X(XLVL) - T
      GO TO 60
   20 X(XLVL) = X(XLVL) + T
      GO TO 60
   30 X(XLVL) = X(XLVL) / T
      GO TO 60
   40 X(XLVL) = X(XLVL) * T
      GO TO 60
   50 IF(AMOD(T,1.0) .NE. 0.0) GO TO 51
      IT = T
      X(XLVL) = X(XLVL)**IT
      GO TO 60
   51 IF(X(XLVL) .LT. 0.0) RETURN
      X(XLVL) = X(XLVL)**T
   60 OLVL = OLVL - 1
      INDEX = 0
      RETURN
      END
C
C
      SUBROUTINE STRT
C
C
C     INITIALIZATION OF MATRIX A.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK3/NGROUP,NORDER
C
      IF(NORDER.LT.1.OR.NORDER.GT.3) GO TO 103
      IF(NGROUP.LT.1.OR.NGROUP.GT.3) GO TO 203
      CALL UNIT(A, NGROUP)
      RETURN
  103 DO 9000 L=1,10
 9000  WRITE(6,9500) NORDER
      STOP
  203 DO 9001 L=1,10
 9001 WRITE(6,9501) NGROUP
 9500 FORMAT(1H ,'NORDER=',I5,9X,'IS NOT ALLOWED'/)
 9501 FORMAT(1H ,'NGROUP=',I5,9X,'IS NOT ALLOWED'/)
      STOP
      END
C
C
      SUBROUTINE UNIT(A, NGROUP)
C
C
C     INITIALIZE A-MATRIX.
C
C
      DIMENSION A(2, 59)
C
      DO 10 I=1,2
      DO 10 K=1,59
   10 A(I,K) = 0.0
      A(1,1) = 1.0
      A(2,2) = 1.0
      IF(NGROUP .GE. 3) GO TO 20
      A(1,32)= 1.0
      A(2,33)= 1.0
      RETURN
   20 A(1,50) = 1.0
      A(2,51) = 1.0
      RETURN
      END
C
C
      SUBROUTINE XSET
C
C     ENTRIES:  XSET AND YSET
C
C     INITIALIZE TRANSFER MATRIX SEPARATELY FOR X (ENTRY XSET) AND
C     Y (ENTRY YSET) DIRECTIONS.  ALL THE 2ND AND 3RD ORDER ELEMENTS
C     ARE SET TO ZERO.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON /BLOCK3/ NGROUP, NORDER
C
      J1 = 1
      IF(NGROUP .GE. 3) GO TO 10
      J2 = 31
      J3 = 34
      GO TO 11
   10 J2 = 49
      J3 = 52
   11 DO 12 I = 1, 2
      DO 13 J = J1, J2
   13 A(I, J) = 0.0
      DO 14 J = J3, 59
   14 A(I, J) = 0.0
   12 CONTINUE
      A(1, 1) = 1.0
      A(2, 2) = 1.0
      RETURN
C
C
      ENTRY YSET
C
C
      IF(NGROUP .GE. 3) GO TO 20
      J1 = 4
      J2 = 32
      J3 = 33
      GO TO 21
   20 J1 = 5
      J2 = 50
      J3 = 51
   21 DO 22 I = 1, 2
      DO 22 J = J1, 59
   22 A(I, J) = 0.0
      A(1, J2) = 1.0
      A(2, J3) = 1.0
      RETURN
      END
C
C
      SUBROUTINE SENSE
C
C
C     INVERT X-AXIS.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2,59)
      COMMON/BLOCK3/ NGROUP,NORDER
C
      DO 10 I=1,2
      DO 10 K=1,59
   10 B(I,K) = 0.0
      B(1,1) = -1.0
      B(2,2) = -1.0
      IF( NGROUP .GE. 3 ) GO TO 100
      B(1,32) = 1.0
      B(2,33) = 1.0
      GO TO 200
  100 B(1,50) = 1.0
      B(2,51) = 1.0
  200 CALL MULT(A, B, NGROUP, NORDER)
      RETURN
      END
C
C
      SUBROUTINE CRRCT(A, B)
C
C
C     MAKE KINEMATICAL CORRECTION TO MATRIX A AND STORE THE RESULT IN B.
C
C
      CHARACTER*4 ELEM
      DIMENSION A(2,59), B(2, 59)
      COMMON/BLOCK3/ NGROUP, NORDER
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
C
      IXE = IXEND(NGROUP, NORDER)
      IYS = IYSTR(NGROUP)
      IYE = IYEND(NGROUP, NORDER)
      CALL UNIT(B, NGROUP)
        DO 10 I = 1, 2
        II = I
        DO 20 J = 1, IXE
        JJ = J
   20   B(II, JJ) = TERM(A, II, JJ)
        DO 30 J = IYS, IYE
        JJ = J
   30   B(II, JJ) = TERM(A, II, JJ)
   10 CONTINUE
      RETURN
       END
C
C
      FUNCTION TERM(A, I, J)
C
C
C     MAKE KINEMATICAL CORRECTION TO AN ELEMENT OF MATRIX A, AT ROW
C     NUMBER I AND COLUMN NUMBER J.
C
C
      CHARACTER*4 NICK
      DIMENSION A(2, 59)
      COMMON/BLOCK3/ NGROUP, NORDER
      COMMON/SYSTEM/PRM(100,20),NELEM(100),NELT,KPP(20),KEE(20),NALT,
     1              NICK(100,3),BMTRX(5,2,59),IGROUP(5),IORDER(5),IBMX,
     2              JBMX(5),KINE,AKK(10),INDA,INDB,INDC,INDD,INDE
      REAL K1, K2, K3, K11, K12, K21
      EQUIVALENCE (K1, AKK(2)), (K2, AKK(3)), (K11, AKK(4)),
     1            (K3, AKK(5)), (K21, AKK(6)), (K12, AKK(7))
C
C
      IF(KINE .EQ. 0) GO TO 1
      IF(NORDER .LE. 1) GO TO 10
      T = AKK(1)*3.14159265/180.0
      IF(ABS(T) .LT. 1.0E-15) GO TO 2
      S = 1.0/SIN(T)
      C = COS(T)*S
      S  = S*S
   10 GO TO (20, 20, 40), NGROUP
C
C     NGROUP = 1 OR 2
C
   20 GO TO ( 1,21, 1, 1,22, 1,23,24, 1, 1, 1,25, 1,26, 1,27,28, 1, 1,
     1        1,29,30,31,32,33,34,35, 1, 1, 1,36, 1, 1, 1,37, 1, 1,38,
     2        1),  J
C
   21   TERM = A(I, 2) + K1*A(I, 3)
                 GO TO 70
   22   TERM = A(I, 5) + K1*A(I, 6)
                 GO TO 70
   23   TERM = A(I, 7) + K2*A(I, 3) + K1*A(I, 8) + K1*K1*A(I, 9)
                 GO TO 70
   24   TERM = A(I, 8) + K11*A(I, 3) + 2.0*K1*A(I, 9)
                 GO TO 70
   25   TERM = A(I,12) + 0.5*K1*C*A(I, 3)
                 GO TO 70
   26   TERM = A(I,14) + K1*A(I,15)
                 GO TO 70
   27   TERM = A(I,16) + K2*A(I, 6) + K1*A(I,17) + K1*K1*A(I,18)
                 GO TO 70
   28   TERM = A(I,17) + K11*A(I, 6) + 2.0*K1*A(I,18)
                 GO TO 70
   29   TERM = A(I,21) + 0.5*K1*C*A(I, 6)
                 GO TO 70
   30   TERM = A(I,22) + (K3 - K1*0.33333333)*A(I, 3) + K2*A(I, 8)
     1       + 2.0*K1*K2*A(I, 9) + K1*A(I,23) + K1*K1*A(I,24)
     2       + K1*K1*K1*A(I,28)
                 GO TO 70
   31   TERM = A(I,23) + K21*A(I, 3) + K11*A(I, 8)
     1       + 2.0*(K1*K11 + K2)*A(I, 9) + 2.0*K1*A(I,24)
     2       + 3.0*K1*K1*A(I,28)
                 GO TO 70
   32   TERM = A(I,24) + K12*A(I, 3) + 2.0*K11*A(I, 9) + 3.0*K1*A(I,28)
                 GO TO 70
   33   TERM = A(I,25) + K1*A(I,29)
                 GO TO 70
   34   TERM = A(I,26) + K1*A(I,30)
                 GO TO 70
   35   TERM = A(I,27) + (K2*C - 0.5*K1*S)*A(I, 3) + 0.5*K1*C*A(I, 8)
     1       + K1*K1*C*A(I, 9) + K1*A(I,31)
                 GO TO 70
   36   TERM = A(I,31) + 0.5*K11*C*A(I, 3) + K1*C*A(I, 9)
                 GO TO 70
   37   TERM = A(I,35) + K1*A(I,36)
                 GO TO 70
   38   TERM = A(I,38) + K1*A(I,39)
                 GO TO 70
C
C     NGROUP = 3
C
   40 GO TO ( 1,41, 1, 1, 1,42, 1, 1,43,44,45, 1, 1, 1, 1, 1,46, 1,47,
     1        1, 1,48,49,50, 1, 1, 1, 1, 1,51,52,53,54,55,56,57,58,59,
     2       60, 1, 1, 1, 1, 1,61, 1, 1, 1,62, 1, 1, 1,63, 1, 1, 1,64,
     3        1, 1),  J
C
   41   TERM = A(I, 2) + K1*A(I, 4)
                 GO TO 70
   42   TERM = A(I, 6) + K1*A(I, 8)
                 GO TO 70
   43   TERM = A(I, 9) + K2*A(I, 4) + K1*A(I, 11) + K1*K1*A(I, 14)
                 GO TO 70
   44   TERM = A(I,10) + K1*A(I,13)
                 GO TO 70
   45   TERM = A(I,11) + K11*A(I, 4) + 2.0*K1*A(I,14)
                 GO TO 70
   46   TERM = A(I,17) + 0.5*K1*C*A(I, 4)
                 GO TO 70
   47   TERM = A(I,19) + K1*A(I,21)
                 GO TO 70
   48   TERM = A(I,22) + K2*A(I, 8) + K1*A(I,24) + K1*K1*A(I,27)
                 GO TO 70
   49   TERM = A(I,23) + K1*A(I,26)
                 GO TO 70
   50   TERM = A(I,24) + K11*A(I, 8) + 2.0*K1*A(I,27)
                 GO TO 70
   51   TERM = A(I,30) + 0.5*K1*C*A(I, 8)
                 GO TO 70
   52   TERM = A(I,31) + (K3 - K1*0.33333333)*A(I, 4) + K2*A(I,11)
     1       + 2.0*K1*K2*A(I,14) + K1*A(I,33) + K1*K1*A(I,36)
     2       + K1*K1*K1*A(I,46)
                 GO TO 70
   53   TERM = A(I,32) + K2*A(I,13) + K1*A(I,35) + K1*K1*A(I,42)
                 GO TO 70
   54   TERM = A(I,33) + K21*A(I, 4) + K11*A(I,11)
     1       + 2.0*(K1*K11 + K2)*A(I,14) + 2.0*K1*A(I,36)
     2       + 3.0*K1*K1*A(I,46)
                 GO TO 70
   55   TERM = A(I,34) + K1*A(I,41)
                 GO TO 70
   56   TERM = A(I,35) + K11*A(I,13) + 2.0*K1*A(I,42)
                 GO TO 70
   57   TERM = A(I,36) + K12*A(I, 4) + 2.0*K11*A(I,14) + 3.0*K1*A(I,46)
                 GO TO 70
   58   TERM = A(I,37) + K1*A(I,47)
                 GO TO 70
   59   TERM = A(I,38) + K1*A(I,48)
                 GO TO 70
   60   TERM = A(I,39) + (K2*C - 0.5*K1*S)*A(I, 4) + 0.5*K1*C*A(I,11)
     1       + K1*K1*C*A(I,14) + K1*A(I,49)
                 GO TO 70
   61   TERM = A(I,45) + 0.5*K1*C*A(I,13)
                 GO TO 70
   62   TERM = A(I,49) + 0.5*K11*C*A(I, 4) + K1*C*A(I,14)
                 GO TO 70
   63   TERM = A(I,53) + K1*A(I,55)
                 GO TO 70
   64   TERM = A(I,57) + K1*A(I,59)
                 GO TO 70
C
    2 KINE = 0
    1 TERM = A(I, J)
   70 RETURN
       END
C
C
      SUBROUTINE DRIFT(DL)
C
C
C     MATRIX FOR A DRIFT SPACE.
C
C
      CHARACTER*4 ELEM
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK3/ NGROUP, NORDER
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
C
      IXS = 1
      IXE = IXEND(NGROUP, NORDER)
      IYS = IYSTR(NGROUP)
      IYE = IYEND(NGROUP, NORDER)
      DO 10 K=IXS,IXE
   10 A(1,K) = A(1,K) +DL*A(2,K)
      DO 11 L =IYS,IYE
   11 A(1,L) = A(1,L) +DL*A(2,L)
      RETURN
      END
C
C
      SUBROUTINE MAGNET(AM, WM, N1, N2, N3, EP1, EP2, RO1, RO2, T01,
     1                  T02, GAP, NM1, AIM1, AIM2, AIM3, AIM4)
C
C
C     MATRIX CALCULATION FOR A MAGNETIC DIPOLE FIELD WITH OR WITHOUT
C     FRINGING FIELD CORRECTION.
C
C       NM1 < 0         WITHOUT FRINGING FIELD CORRECTION
C       NM1 = 00 - 09   WITH CORRECTION AT BOTH ENTRANCE AND EXIT.
C       NM1 = 10 - 19   WITH CORRECTION AT ENTRANCE.
C       NM1 = 20 - 29   WITH CORRECTION AT EXIT.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      REAL IM(4), N1, N2, N3, NN1, NN2, NN3
      INTEGER OTFR
      DIMENSION  XIM1(9), XIM2(9), XIM3(9), XIM4(9)
      DATA       XIM1, XIM2, XIM3, XIM4
     1  /0.0,-.7828,-.5998,-.6991,-.6119,-.7073,-.6454,-.7309, -.9642,
     1   0.0, .9427, .5770, .8018, .6066, .8276, .6937, .9045, 1.532 ,
     3   0.0,-.1400,-.1215,-.2670,-.1494,-.3001,-.2395,-.4048,-1.2   ,
     4   0.0, .7931, .3515, .5179, .3676, .5324, .4165, .5768, 1.1   /
C
 9500 FORMAT(1H ,'N1 =',1PE12.4,',  N2 =',E12.4,',  N3 =',E12.4,
     1       '  IS NOT ALLOWED FOR A MAGNETIC SECTOR.')
 9501 FORMAT(1H ,'FRINGING FIELD INTEGRALS FOR A MAGNETIC SECTOR SHOULD
     1ADEQUATELY BE PREPARED.')
 9502 FORMAT(1H ,'FRINGING FIELD DESIGNATOR FOR A MAGNETIC SECTOR (NM1 =
     1',I5,') IS ILLEGAL.')
C
      INFR = 0
      OTFR = 0
      DO 700 I = 1, 2
        DANGL(I) = 0.0
  700   DSHFT(I) = 0.0
      IF(NM1 .LT. 0 ) GO TO 606
      IF(NM1 .GE. 30) GO TO 307
      MODN = MOD(NM1, 10)
      IF(MODN .LT. 0) GO TO 307
      MODN = MODN + 1
      NNM = NM1/10 + 1
      GO TO (601, 602, 603), NNM
  601   INFR = 1
        OTFR = 1
        GO TO 604
  602     INFR = 1
          GO TO 604
  603       OTFR = 1
  604  GR  = GAP/AM
       GR2 = GR*GR
       GR3 = GR2*GR
      IF(MODN .LE. 9) GO TO 605
C
C     EXTERNALLY GIVEN FRINGING FIELD INTEGRALS.
C
        IM(1) = AIM1*GR
        IM(2) = AIM2*GR2
        IM(3) = AIM3*GR3
        IM(4) = AIM4*GR3
        IF(ABS(IM(1)) .LT. 1.0E-10) GO TO 309
        GO TO 606
C
  605       IM(1) = XIM1(MODN)*GR
            IM(2) = XIM2(MODN)*GR2
            IM(3) = XIM3(MODN)*GR3
            IM(4) = XIM4(MODN)*GR3
C
C     FOR A FIELD DUE TO CONICALLY SHAPED POLES.
C
  606 IF(N2 .NE. 999.0) GO TO 609
      IF(N1 .GT. 1.0E-10 .OR. N1 .LE. -1.0) GO TO 308
          P   = -N1
          P2  = P*P
          P3  = P2*P
          P4  = P3*P
          DP  = (1. - P)*GR2/6.
        NN1 = P*(-1. + DP*(1. - (-21. + 2.*P + 36.*P2)*GR2/60.))
        NN2 = P*( P  + DP*(-1. - P + (-42. + 8.*P + 12.*P2 + 36.*P3)*GR2
     1           /60.))
        NN3 = P*(-P2 + DP*(1. + P + P2 - (-70. + 28.*P - 9.*P2 + 12.*P3
     1           + 36.*P4)*GR2/60.))
        GO TO 608
C
C     FOR A FIELD WITH EXPANSION COEFFICIENTS N1, N2 AND N3.
C
  609 IF(N1 .GT. 1.0E-10 .OR. N1 .LE. -1.0) GO TO 308
        NN1 = N1
        NN2 = N2
        NN3 = N3
  608 IF(INFR .EQ. 1) CALL FRINGM(AM, NN1, NN2, EP1, RO1, T01, IM, 0)
      IF(ABS(NN1) .LE. 1.0E-5 .AND. ABS(NN2) .LE. 1.0E-5 .AND.
     1   ABS(NN3) .LE. 1.0E-5) GO TO 611
C
         CALL MAGNRM(AM, WM, NN1, NN2, NN3)
         GO TO 610
C
C     FOR AN UNIFORM FIELD.
C
  611    CALL MAGZER(AM, WM)
C
  610 IF(OTFR .EQ. 1) CALL FRINGM(AM, NN1, NN2, EP2, RO2, T02, IM, 1)
      RETURN
C
  309 DO 9100 I = 1, 10
 9100 WRITE(6, 9501)
      STOP
  308   DO 9000 I = 1, 10
 9000   WRITE(6, 9500) N1, N2, N3
        STOP
  307     DO 9200 I = 1, 10
 9200     WRITE(6, 9502) NM1
          STOP
            END
C
C
      SUBROUTINE ELECT(AE, WE, N1, N2, N3, RO1, RO2, GAP, NE1,
     1                 AIE1, AIE2, AIE3, AIE4, AIE5, AIE6, AIE7, AIE8,
     2                 AIE9, AIE10)
C
C
C     MATRIX CALCULATION FOR AN ELECTRIC SECTOR WITH OR WITHOUT FRINGING
C     FIELD CORRECTION.
C
C       NE1 < 0          WITHOUT FRINGING FIELD CORRECTION
C       NE1 = 00 - 09    WITH CORRECTION AT BOTH ENTRANCE AND EXIT.
C       NE1 = 10 - 19    WITH CORRECTION AT ENTRANCE.
C       NE1 = 20 - 29    WITH CORRECTION AT EXIT.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      REAL IE(11), N1, N2, N3, NN1, NN2, NN3
      INTEGER OTFR
      DIMENSION XIE1(9), XIE2(9), XIE3(9), XIE4(9), XIE5(9),
     1          XIE6(9), XIE7(9), XIE8(9), XIE9(9), XIE10(9)
      DATA      XIE1, XIE2, XIE3, XIE4, XIE5, XIE6, XIE7, XIE8, XIE9,
     1          XIE10
     2  /0.0, .0895, .1320, .2790, .1120, .1526, .2954, .2157, .3483,
     3   0.0, .1176, .1624, .2912, .1328, .1744, .2982, .2135, .3231,
     4   0.0,-.2284,-.2849,-.4259,-.2601,-.3082,-.4372,-.3662,-.4706,
     5   0.0,-.3646,-.4474,-.6429,-.4039,-.4751,-.6554,-.5480,-.6943,
     6   0.0, .7756, .5866, .3702, .6451, .5267, .3596, .4440, .3403,
     7   0.0,-.0959,-.0717,-.0105,-.0465,-.0370, .0034, .0036, .0258,
     8   0.0, .0266, .0381, .0788, .0373, .0470, .0846, .0706, .1024,
     9   0.0, .0149, .0186, .0126, .0126, .0148, .0053,-.0016,-.0212,
     A   0.0, .0470, .0722, .1650, .0558, .0806, .1723, .1091, .1978,
     B   0.0, .0541, .0784, .1553, .0612, .0844, .1596, .1054, .1748/
C
 9501 FORMAT(1H ,'FRINGING FIELD DESIGNATOR FOR AN ELECTRIC SECTOR (NE1
     1=', I5, ') IS ILLEGAL.')
 9502 FORMAT(1H ,'N1 =',1PE12.4,',  N2 =',E12.4,',  N3 =',E12.4,
     1           '  IS NOT ALLOWED FOR AN ELECTRIC SECTOR.')
 9503 FORMAT(1H ,'FRINGING FIELD INTEGRALS FOR AN ELECTRIC SECTOR SHOULD
     1 ADEQUATELY BE PREPARED.')
 9504 FORMAT(1H ,'"GAP = 0.0" IS NOT ALLOWED FOR FRINGING FIELD CORRECTI
     1ON IN AN ELECTRIC SECTOR.')
C
      INFR = 0
      OTFR = 0
      DO 700 I = 1, 2
        DANGL(I) = 0.0
  700   DSHFT(I) = 0.0
      IF(NE1 .LT. 0) GO TO 606
      IF(NE1 .GE. 30) GO TO 307
      MODN = MOD(NE1, 10)
      IF(MODN .LT. 0) GO TO 307
      MODN = MODN + 1
      NNE = NE1/10 + 1
      GO TO (601, 602, 603), NNE
  601   INFR = 1
        OTFR = 1
        GO TO 604
  602     INFR = 1
          GO TO 604
  603       OTFR = 1
C
  604 IF(GAP .EQ. 0.0 .AND. MODN .NE. 1) GO TO 310
          GR = GAP/AE
          GR2 = GR*GR
          GR3 = GR2*GR
      IF(MODN .LE. 9) GO TO 605
C
C     EXTERNALLY GIVEN FRINGING FIELD INTEGRALS.
C
      IF(GAP .EQ. 0.0) GO TO 310
        IE(1)  =  AIE1*GR2
        IE(2)  =  AIE2*GR2
        IE(3)  =  AIE3*GR
        IE(4)  =  AIE4*GR
        IE(5)  =  AIE5/GR
        IE(6)  =  AIE6
        IE(7)  =  AIE7*GR
        IE(8)  = -AIE6
        IE(9)  =  AIE8*GR3
        IE(10) =  AIE9*GR3
        IE(11) =  AIE10*GR3
        IF( ABS(IE(1)) .LT. 1.0E-10) GO TO 309
        GO TO 606
C
  605 IF(MODN .EQ. 1) GR = 1.0
            IE(1)  =  XIE1(MODN)*GR2
            IE(2)  =  XIE2(MODN)*GR2
            IE(3)  =  XIE3(MODN)*GR
            IE(4)  =  XIE4(MODN)*GR
            IE(5)  =  XIE5(MODN)/GR
            IE(6)  =  XIE6(MODN)
            IE(7)  =  XIE7(MODN)*GR
            IE(8)  = -XIE6(MODN)
            IE(9)  =  XIE8(MODN)*GR3
            IE(10) =  XIE9(MODN)*GR3
            IE(11) =  XIE10(MODN)*GR3
C
C     CYLINDRICAL CONDENSER.
C
  606 IF(N2 .NE. 999.0) GO TO 607
      IF(ABS(N1 + 1.0) .GT. 1.0E-5) GO TO 608
        NN1 = -1.0
        NN2 =  1.0
        NN3 = -1.0
        GO TO 609
C
C     SPHERICAL CONDENSER.
C
  608 IF(ABS(N1 + 2.0) .GT. 1.0E-5) GO TO 308
        NN1 = -2.0
        NN2 =  3.0
        NN3 = -4.0
        GO TO 609
C
C     GENERAL CASE.
C
  607 IF(N1 + 1.0 .GT. 1.0E-10 .OR. N1 .LE. -3.0) GO TO 308
        NN1 = N1
        NN2 = N2
        NN3 = N3
C
  609 IF(INFR .EQ. 1) CALL FRINGE(AE, NN1, RO1, IE, 0)
      IF(ABS(NN1 + 1.0) .LE. 1.0E-5 .AND. ABS(NN2 - 1.0) .LE. 1.0E-5
     1   .AND. ABS(NN3 + 1.0) .LE. 1.0E-5) GO TO 610
C
         CALL ELNRM(AE, WE, NN1, NN2, NN3)
         GO TO 611
C
  610    CALL ELZER(AE, WE)
C
  611 IF(OTFR .EQ. 1) CALL FRINGE(AE, NN1, RO2, IE, 1)
      RETURN
C
  307 DO 9001 L = 1, 10
 9001 WRITE(6, 9501) NE1
      STOP
  308   DO 9002 L = 1, 10
 9002   WRITE(6, 9502) N1, N2, N3
        STOP
  309     DO 9003 L = 1, 10
 9003     WRITE(6, 9503)
          STOP
  310       DO 9004 L = 1, 10
 9004       WRITE(6, 9504)
            STOP
            END
C
C
      SUBROUTINE MPLM(L, KQ, KH, KO, R, NQ1, AQ1, AQ2, AQ3, AQ4)
C
C       ENTRIES;   MPLM,  MPLE
C
C     MATRIX CALCULATION FOR A MAGNTIC (ENTRY MPLM) OR ELECTRIC (ENTRY
C     MPLE) MULTIPOLE FIELD WITH OR WITHOUT FRINGING FIELD CORRECTION.
C     NOTE THAT THE FRINGING FIELD CORRECTION IS ONLY MADE FOR THE
C     QUADRUPOLE COMPONENT.
C
C       NQ1 < 0          WITHOUT CORRECTION
C       NQ1 = 00 - 01    WITH CORRECTION AT BOTH ENTRANCE AND EXIT.
C       NQ1 = 10 - 11    WITH CORRECTION AT ENTRANCE.
C       NQ1 = 20 - 21    WITH CORRECTION AT EXIT.
C
C
      CHARACTER*4 NAME
      REAL  L, KQ, KH, KO, IQ(4)
      INTEGER OTFR
      DIMENSION  Q1(3, 2), Q2(3, 2), Q3(3, 2), Q4(3, 2), NAME(2, 2)
      DATA  NAME/ 'MAGN', 'ETIC', 'ELEC', 'TRIC'/
      DATA  Q1, Q2, Q3, Q4/0.0,   0.2090,   0.0,  0.0,   0.2090 ,  0.0,
     1                     0.0,  -0.07678,  0.0,  0.0,  -0.07678,  0.0,
     2                     0.0,   0.05518,  0.0,  0.0,   0.05518,  0.0,
     3                     0.0,  -0.3306,   0.0,  0.0,  -0.3306,   0.0/
C
 3070 FORMAT(1H ,'FRINGING FIELD DESIGNATOR FOR ',2A4,' QUADRUPOLE/MULTI
     1POLE (NQ1 =',I5,') IS ILLEGAL.')
 3090 FORMAT(1H ,'FRINGING FIELD INTEGRALS FOR ',2A4,' QUADRUPOLE/MULTIP
     1OLE SHOULD ADEQUATELY BE PREPARED.')
C
        INDEX = 1
        GO TO 10
C
C
      ENTRY MPLE(L, KQ, KH, KO, R, NQ1, AQ1, AQ2, AQ3, AQ4)
C
C
        INDEX = 2
C
   10 INFR = 0
      OTFR = 0
      IF(NQ1 .LT. 0) GO TO 606
      IF(NQ1 .GE. 30) GO TO 307
      MODN = MOD(NQ1, 10)
      IF(MODN .LT. 0) GO TO 307
      MODN = MODN + 1
      NNQ = NQ1/10 + 1
      GO TO (601, 602, 603), NNQ
  601   INFR = 1
        OTFR = 1
        GO TO 604
  602     INFR = 1
          GO TO 604
  603       OTFR = 1
  604 R2 = R*R
      R3 = R2*R
      IF(MODN .LE. 2) GO TO 605
C
C     EXTERNALLY GIVEN FRINGING FIELD INTEGRALS.
C
       IQ(1) = AQ1*R2
       IQ(2) = AQ2*R3
       IQ(3) = AQ3*R3
       IQ(4) = AQ4*R
       IF(ABS(IQ(1)) .LT. 1.0E-10) GO TO 309
       GO TO 606
C
  605       IQ(1) = Q1(MODN, INDEX)*R2
            IQ(2) = Q2(MODN, INDEX)*R3
            IQ(3) = Q3(MODN, INDEX)*R3
            IQ(4) = Q4(MODN, INDEX)*R
  606 IF(INFR .EQ. 1) CALL FRQI(KQ, IQ, INDEX)
      CALL MPOLE(L, KQ, KH, KO, INDEX)
      IF(OTFR .EQ. 1) CALL FRQO(KQ, IQ, INDEX)
      RETURN
C
C
  307   DO 3071 K = 1, 10
 3071   WRITE(6, 3070) NAME(1, INDEX), NAME(2, INDEX), NQ1
        STOP
  309     DO 3091 K = 1, 10
 3091     WRITE(6, 3090) NAME(1, INDEX), NAME(2, INDEX)
          STOP
            END
C
C
      SUBROUTINE FRINGM( AM, N, N2, EP, R, T, IM, INDEX )
C
C
C     MATRIX FOR THE FRINGING FIELD OF A MAGNETIC SECTOR.
C
C      AM       MEAN ORBIT RADIUS
C      N        FIRST ORDER FIELD INDEX
C      N2       SECOND ORDER FIELD INDEX
C      EP       FIELD BOUNDARY ANGLE IN DEGREES
C      R        INVERSE RADIUS OF CURVATURE OF BOUNDARY (MEDIAN PLANE)
C      T        THIRD ORDER CURVATURE OF BOUNDARY
C      IM       FIELD INTEGRALS
C      INDEX    ENTRANCE(= 0)/EXIT(= 1) DESIGNATOR
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2,59)
      COMMON/BLOCK3/ NGROUP, NORDER
      REAL IM(4)
      REAL IM1, IM2, N, N2
      DATA PAI/3.14159265/
C
 1001 FORMAT(1H ,'ILLEGAL ENTRANCE/EXIT DESIGNATOR (INDEX =', I4,')',
     1' APPEARED IN ROUTINE FRINGM.')
C
C
        IM1 = IM(1)
        IM2 = IM(2)
          AM1 = 1.0/AM
          FF  = EP*PAI/180.0
          SS  = SIN(FF)
          CC  = COS(FF)
          TF  = SS/CC
          CF  = 1.0/CC
            AM2 = AM1*AM1
            AM3 = AM2*AM1
            SS2 = SS*SS
            CC2 = CC*CC
            TF2 = TF*TF
            TF3 = TF2*TF
            CF2 = CF*CF
            CF3 = CF2*CF
            CF4 = CF3*CF
            R2  = R*R
            ANGL = ( TF*(2.0*N - TF*R*CF)*IM2 + ( N*(2.0*TF2 + 2.0*SS2
     1                - CC2) - 3.0*SS2*(2.0*N2 + R2*CF4)
     2                + 6.0*TF3*(N*CC*R - T) )*CF*IM(3)
     3                - 0.5*CF3*(N - 3.0*TF*R*CF)*IM(4) )*180.0/PAI
            SHFT = ( CF2*IM2 - 3.0*TF*CF*(2.0*N - TF*R*CF)*IM(3)
     1                - 1.5*TF*CF3*IM(4) )*AM
C
      IF(INDEX .NE. 0) GO TO 10
        S  = 1.0
        F  = 0.0
        F1 = 1.0
        DANGL(1) = ANGL
        DSHFT(1) = SHFT
        GO TO 20
   10 IF(INDEX .NE. 1) GO TO 1000
        S  = -1.0
        F  =  1.0
        F1 =  0.0
        DANGL(2) = ANGL
        DSHFT(2) = SHFT
C
   20 CALL UNIT(B, 1)
C
C
C     FIRST ORDER ELEMENTS
C
      B(1,1) =  1.0 + S*CF2*( N - 2.0*TF*(R*CF - F*TF) )*IM2
      B(1,2) =  ( -2.0*TF*CF2*IM2 )*AM
      B(1,3) =  S*CF2*IM2*AM
      B(2,1) =  TF*( 1.0 + ( 6.0*TF*CF2*T + 2.0*N*N
     1          - R*CF*(2.0*TF*(2.0*N + CF2)
     2          - R*CF*(2.0 + 3.0*TF2)) )*IM2 )*AM1
      B(2,2) =  1.0 - ( F1*2.0*TF2 + S*(N - 2.0*R*CF*TF) )*CF2*IM2
      B(2,3) =  F1*TF*CF2*IM2
      B(2,32)= -( TF +(1.0 + 2.0*TF2)*CF*IM1 )*AM1
      IF(NORDER .EQ. 1) GO TO 3000
C
C     SECOND ORDER ELEMENTS
C
      B(1, 4) = -S*0.5*TF2*AM1
      B(1,10) =  S*0.5*CF*( CF + TF*(5.0 + 6.0*TF2)*IM1 )*AM1
      B(2, 4) =  ( -F*0.5*TF3 + N*TF + 0.5*R*CF3 )*AM2
      B(2, 5) =  S*TF2*AM1
      B(2, 6) = -TF*AM1
      B(2,10) =  ( 0.5*TF*( 1.0 + 2.0*TF2 - F*(1.0 + 3.0*TF2) - 2.0*N )
     1           - 0.5*R*CF3 + 0.5*CF*(-N*(1.0 + 2.0*TF2)
     2           + TF2*( 7.0 + 10.0*TF2 - F*(9.0 + 14.0*TF2) )
     3           - R*CF*TF*(5.0 + 6.0*TF2) )*IM1 )*AM2
      B(2,11) = -S*( TF2 + TF*CF*(1.0 + 2.0*TF2)*IM1 )*AM1
      B(1,34) =  S*TF2*AM1
      B(2,34) =  ( TF*(F*CF2 - 2.0*N) - R*CF3 )*AM2
      B(2,35) = -S*CF2*AM1
      B(2,36) =  TF*AM1
      B(2,37) = -S*TF2*AM1
      IF(NORDER .EQ. 2) GO TO 3000
C
C     THIRD ORDER ELEMENTS
C
      B(1,13) = -S*0.5*TF*( TF*(N - F*TF2) + R*CF3 )*AM2
      B(1,14) = -TF3*AM1
      B(1,15) =  S*0.5*TF2*AM1
      B(1,19) = -S*0.5*( TF2*( 1.0 + 2.0*TF2 + F*(1.0 - TF2) )
     1           - N*(1.0 + 3.0*TF2) - 3.0*TF*R*CF3 )*AM2
      B(1,20) =  TF*( 1.0 + 2.0*TF2 )*AM1
      B(1,25) =  TF*CF2*AM1
      B(1,29) = -S*0.5*CF2*AM1
      B(2,13) =  ( 0.5*TF3*( F1 + F*(CF2 - 2.0*N) ) + N2*TF + T*CF4
     1            + 0.5*R*CF3*(N - 2.0*F*TF2) + 0.5*TF*R2*CF4 )*AM3
      B(2,14) =  S*1.5*TF*( TF*(F1 - F*CF2 + N) + R*CF3 )*AM2
      B(2,15) = -( TF*(N - F*TF2) + 0.5*R*CF3 )*AM2
      B(2,16) =  TF*( 1.5 + TF2 )*AM1
      B(2,17) = -S*TF2*AM1
      B(2,18) =  TF*AM1
      B(2,19) =  ( 0.5*TF3*(F1 + F*3.0*CF2)
     1            + 0.5*N*TF*( 3.0 + 4.0*TF2 - F*(2.0 + 6.0*TF2) )
     2            - 3.0*N2*TF + 0.5*( F1*(1.0 + 6.0*TF2) - 3.0*N )*R*CF3
     3            - 3.0*(T + 0.5*TF*R2)*CF4 )*AM3
      B(2,20) =  S*TF*( TF*( 2.0*TF2 + F*(2.0 - TF2) - 3.0*N )
     1           - 3.0*R*CF3 )*AM2
      B(2,21) =  TF*( 0.5 - TF2 )*AM1
      B(2,25) =  S*( (3.0 - 4.5*F)*TF2*CF2 - N*(0.5 + 1.5*TF2)
     1           - 1.5*TF*R*CF3 )*AM2
      B(2,26) = -2.0*TF*CF2*AM1
      B(2,29) =  ( TF*( N - 1.0 - 2.0*TF2 + F*(1.0 + 3.0*TF2) )
     1            + 0.5*R*CF3 )*AM2
      B(2,30) =  S*TF2*AM1
C
 3000 CALL PRDCT(A, B, NGROUP, 1, NORDER)
      RETURN
C
 1000    DO 30 I = 1, 10
   30    WRITE(6, 1001) INDEX
         STOP
      END
C
C
      SUBROUTINE FRINGE( AE, N, R, IE, INDEX )
C
C
C     MATRIX FOR THE FRINGING FIELD AT THE ENTRANCE OF AN ELECTRIC
C     SECTOR.
C
C      AE      MEAN ORBIT RADIUS
C      N       FIRST ORDER FIELD INDEX
C      R       INVERSE RADIUS OF CURVATURE OF BOUNDARY(TRANSVERSE PLANE)
C      IE      FIELD INTEGRALS
C      INDEX   ENTRANCE(= 0)/EXIT(= 1) DESIGNATOR
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2,59)
      COMMON/BLOCK3/ NGROUP, NORDER
      REAL  N, IE(11)
      REAL  IE1A,IE1B,IE2,IE3A,IE3B,IE4A,IE4B,IE5,IE6,IE7,IE8
C
 1001 FORMAT(1H ,'ILLEGAL ENTRANCE/EXIT DESIGNATOR (INDEX =', I4,')',
     1' APPEARED IN ROUTINE FRINGE.')
C
          C1   = -1.0 - N
          IE1A = IE(1)
          IE1B = IE(2)
          IE4A = IE(3)
          IE4B = IE(4)
          IE5  = IE(5)
          IE6  = IE(6)
          IE7  = IE(7)
          IE8  = IE(8)
          IE2  = IE(9)
          IE3A = IE(10)
          IE3B = IE(11)
          ANGL = ( 2.0*IE1A*IE4A + (2.0 + C1)*IE2 + (1.0 - C1)*IE3A
     1           + 2.0*IE3B )*180.0/3.14159265
          SHFT = IE1A*AE
C
      IF(INDEX .NE. 0 ) GO TO 10
        S        = 1.0
        DANGL(1) = ANGL
        DSHFT(1) = SHFT
        GO TO 20
   10 IF(INDEX .NE. 1) GO TO 1000
        S        = -1.0
        DANGL(2) = ANGL
        DSHFT(2) = SHFT
C
   20 CALL UNIT(B, 2)
C
      AE1  = 1.0/AE
      AE2  = AE1*AE1
      AE3  = AE2*AE1
C
C     FIRST ORDER ELEMENTS
C
      B( 1, 1) =  1.0 + S*(C1*IE1A - 2.0*IE1B)
      B( 1, 3) =  S*IE1A*AE
      B( 2, 1) = -(2.0*IE4A + IE1A*R)*AE1
      B( 2, 2) =  1.0 - S*(C1*IE1A - 2.0*IE1B)
      IF ( NORDER .EQ. 1)  GO TO 3355
C
C     SECOND ORDER ELEMENTS
C
      B( 1, 4) =  S*0.5*AE1
      B( 2, 4) =  ( -0.5*R + (4.0*C1 + 2.5 - S*0.5)*IE4A - 6.0*IE4B
     1             -4.0*IE1A*IE5 + 4.0*IE7 )*AE2
      B( 2, 6) =  4.0*IE4A*AE1
      B( 2,10) =  (0.5*R - C1*IE4A)*AE2
      B( 2,34) =  R*AE2
      B( 2,37) =  S*AE1
      IF ( NORDER .EQ. 2)  GO TO 3355
C
C     THIRD ORDER ELEMENTS
C
      B( 1,13) =  ( 0.75 + S*(1.75 - C1 - 4.0*IE8) )/3.0*AE2
      B( 1,15) = -S*0.5*AE1
      B( 1,19) =  S*0.5*C1
      B( 2,13) =  ( 0.5*(C1 - 1.5 - S*0.5)*R - 4.0/3.0*IE5  )*AE3
      B( 2,14) =  S*( 0.5*(C1 - 1.0) - 11.0/3.0*IE6 )*AE2
      B( 2,15) =  0.5*R*AE2
      B( 2,19) =  ( 0.5*(2.0 - 3.0*C1)*R )*AE3
      B( 2,20) = -S*C1*AE2
      B( 2,29) = -0.5*R*AE2
C
 3355 CALL PRDCT(A, B, NGROUP, 2, NORDER)
      RETURN
C
 1000    DO 30 I = 1, 10
   30    WRITE(6, 1001) INDEX
         STOP
      END
C
C
      SUBROUTINE FRQI(KQ, IQ, INDEX)
C
C       ENTRIES;  FRQI,  FRQO
C
C     CORRECTION MATRIX FOR A FRINGING FIELD OF A MAGNETIC (INDEX = 1)
C     OR ELECTRIC (INDEX = 2) QUADRUPOLE.
C     THE ENTRIES FRQI AND FRQO SHOULD BE USED ACCORDING AS THE
C     CORRECTION IS REQUIRED AT THE ENTRANCE OR EXIT, RESPECTIVELY, OF
C     THE QUADRUPOLE.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2, 59)
      COMMON/BLOCK3/ NGROUP, NORDER
      REAL  IQ(4), KQ
      DIMENSION C113(2), C213(2), C219(2), C225(2)
      DATA  C113, C213, C219, C225 / 0.08333333,   0.1666667,
     1                               0.3333333,    1.166667,
     2                              -1.0,          0.5,
     3                               0.25,         0.5      /
C
 2000 FORMAT(1H ,'ILLEGAL VALUE FOR INDEX (=',I5,') APPEARED IN THE ROUT
     1INE FRQI/FRQO.')
C
          SGN = 1.0
          QK = KQ
          GO TO 10
C
C
      ENTRY FRQO(KQ, IQ, INDEX)
C
C
          SGN = -1.0
          QK  = -KQ
C
   10 IF(ABS(QK) .LT. 1.0E-15) RETURN
      CALL UNIT(B, INDEX)
      IF(INDEX .LE. 0 .OR. INDEX .GE. 3) GO TO 200
      QKI      =  QK*IQ(1)
      B(1, 1)  =  1.0 - QKI
      B(1, 2)  = -2.0*QK*IQ(2)*SGN
      B(2, 1)  = -QK*QK*IQ(3)
      B(2, 2)  =  1.0 + QKI
      B(1, 32) =  B(2, 2)
      B(1, 33) = -B(1, 2)
      B(2, 32) =  B(2, 1)
      B(2, 33) =  B(1, 1)
      IF(NORDER .EQ. 1) GO TO 100
C
          B(1, 6)  =  QKI
          B(2, 8)  = -QKI
          B(1, 36) = -QKI
          B(2, 39) =  QKI
          IF(NORDER .EQ. 2) GO TO 100
C
              QKK4     =  QK*QK*IQ(4)
              B(1, 13) =  C113(INDEX)*QK
              B(2, 13) = -C213(INDEX)*QKK4
              B(2, 19) =  C219(INDEX)*QKK4
              B(2, 25) = -C225(INDEX)*QK
              IF(INDEX .EQ. 2) GO TO 100
C
                 B(1, 19) =  0.25*QK
                 B(2, 14) = -0.25*QK
                 B(2, 20) =  0.50*QK
  100 CALL PRDCT(A, B, NGROUP, INDEX, NORDER)
        RETURN
C
  200 DO 201 I = 1, 10
  201 WRITE(6, 2000) INDEX
        STOP
          END
C
C
      SUBROUTINE MPOLE ( Z, Q, H, G, INDEX )
C
C
C     MATRIX FOR A MAGNETIC (INDEX = 1) OR ELECTRIC (INDEX = 2) MULTI-
C     POLE FIELD.
C
C      Z ;  EFFECTIVE LENGTH OF THE MULTIPOLE FIELD.
C      Q ;  QUADRUPOLE STRENGTH (GRADIENT) OF THE FIELD, DIVIDED BY
C           MAGNETIC OR ELECTRIC RIGIDITY.
C      H ;  SEXTUPOLE STRENGTH (SECOND DERIVATIVE) OF THE FIELD,
C           DIVIDED BY MAGNETIC OR ELECTRIC RIGIDITY.
C      G ;  OCTAPOLE STRENGTH (THIRD DERIVATIVE) OF THE FIELD, DIVIDED
C           BY MAGNETIC OR ELECTRIC RIGIDITY.
C
C       THE MAGNETIC AND ELECTRIC POTENTIALS ARE ASSUMED TO BE
C     EXPRESSED AS
C
C       M.P. = -K4*X*Y-K6*(X**2*Y-Y**3/3.)-K8*(X**3*Y-X*Y**3)
C
C     AND
C
C       E.P. =  K4/2.*(X**2-Y**2)+K6/3.*(X**3-3.*X*Y**2)
C              +K8/4.*(X**4-6.*X**2*Y**2+Y**4),
C
C     WHERE K4 = Q*R, K6 = H*R AND K8 = G*R, WITH THE MAGNETIC OR
C     ELECTRIC RIGIDITY BEING REPRESENTED BY R.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2, 59)
      COMMON/BLOCK3/ NGROUP, NORDER
      DATA A1,A2,A3,A6,A12,A30,A36,A100,A300/ 0.0625, 0.125, 0.1875,
     *     0.375, 0.75,0.03333333,0.02777777,0.01, 0.003333333/
      REAL K,KZ
C
C
      CALL UNIT(B, INDEX)
      QQQ = Q
      Q2  = Q*Q
      Q3  = Q*Q*Q
      IF(Q .EQ. 0.0) GO TO 300
      K   = SQRT(ABS(Q))
      KZ  = K*Z
      IF( KZ.LE.0.2 ) GO TO 300
      IF( Q .LT.0.0 ) GO TO 100
      C   = COS(KZ)
      S   = SIN(KZ)
      CH  = (EXP(KZ)+EXP(-KZ))/2.0
      SH  = (EXP(KZ)-EXP(-KZ))/2.0
      GO TO 101
  100 CONTINUE
      CH  = COS(KZ)
      SH  = SIN(KZ)
      C   = (EXP(KZ)+EXP(-KZ))/2.0
      S   = (EXP(KZ)-EXP(-KZ))/2.0
  101 CONTINUE
      S   = S/K
      SH  = SH/K
      B(1,1)  = C
      B(1,2)  = S
      B(2,1)  =-S*Q
      B(2,2)  = C
      B(1,32) = CH
      B(1,33) = SH
      B(2,32) = SH*Q
      B(2,33) = CH
      IF(NORDER .EQ. 1) GO TO 400
      ZS  = Z*S
      ZC  = Z*C
      SS  = S*S
      SC  = S*C
      ZZS = Z*Z*S
      ZZC = Z*Z*C
      ZSS = Z*S*S
      ZSC = Z*S*C
      SSS = S*S*S
      SSC = S*S*C
      SHSH = SH*SH
      SHCH = SH*CH
      ZSHSH = Z*SH*SH
      ZSHCH = Z*SH*CH
      SSHSH = S*SH*SH
      SSHCH = S*SH*CH
      CSHSH = C*SH*SH
      CSHCH = C*SH*CH
      B(1,4)  = H/3.*((C-1.)/Q-SS)
      B(1,5)  = H*2./3.*(SC-S)/Q
      B(1,6)  = Q*ZS/2.0
      B(1,7)  = H/3.*((C-1.)*2./Q+SS)/Q
      B(1,8)  = (S-ZC)/2.0
      B(1,10) = H*0.2*((1.-C)*3./Q+SHSH)
      B(1,11) = H*0.4*(SHCH-S)/Q
      B(1,12) = H*0.2*(SHSH+(C-1.)*2./Q)/Q
      B(2,4)  =-H/3.*(2.*SC+S)
      B(2,5)  = H*2./3.*((1.-C)/Q-2.*SS)
      B(2,6)  = Q/2.*(S+ZC)
      B(2,7)  = H*2./3.*(SC-S)/Q
      B(2,8)  = Q*ZS/2.0
      B(2,10) = H*0.2*(3.*S+2.*SHCH)
      B(2,11) = H*0.4*((1.-C)/Q+2.*SHSH)
      B(2,12) = H*0.4*(SHCH-S)/Q
      B(1,34) = H*0.4*(2.*S*SH+CH*(1.-C)/Q)
      B(1,35) = H*0.4*(SH*(3.-2.*C)-S*CH)/Q
      B(1,36) =-Q*Z*SH/2.0
      B(1,37) = H*0.4*(2.*S*CH-SH*(1.+C))/Q
      B(1,38) = H*0.4*(2.*CH*(1.-C)/Q-S*SH)/Q
      B(1,39) = (SH-Z*CH)/2.0
      B(2,34) = H*0.4*(SH*(1.+C)+3.*S*CH)
      B(2,35) = H*0.4*(3.*CH*(1.-C)/Q+S*SH)
      B(2,36) =-Q*(SH+Z*CH)/2.0
      B(2,37) = H*0.4*(3.*S*SH-CH*(1.-C)/Q)
      B(2,38) = H*0.4*(SH*(2.-3.*C)+S*CH)/Q
      B(2,39) =-Q*Z*SH/2.0
      IF(NORDER .EQ. 2) GO TO 400
      IF(Q .EQ. 0.0) GO TO 206
      IF(INDEX .GE. 2) GO TO 201
      B(1, 13) = A3*Q*Q*(SSC-ZS)
      B(1, 14) = A3*Q*(-S+ZC+3.*SSS*Q)
      B(1, 16) = A3*Q*(-3.*SSC-ZS)
      B(1, 19) = A1*Q*Q*(2.*ZS-3.*SSHCH+CSHSH)
      B(1, 20) = A2*Q*(CSHCH-S-3.*SSHSH*Q)
      B(1, 21) = A1*Q*(CSHSH-3.*SSHCH-2.*ZS)
      B(1, 22) = A3*(ZC-S-SSS*Q)
      B(1, 25) = A1*Q*(-S-2.*ZC+3.*CSHCH+SSHSH*Q)
      B(1, 26) = A2*Q*(SSHCH+3.*CSHSH)
      B(1, 27) = A1*(2.*ZC-5.*S+3.*CSHCH+SSHSH*Q)
      B(2, 13) = A3*Q*Q*(S-ZC-3.*SSS*Q)
      B(2, 14) = A3*Q*Q*(9.*SSC-ZS)
      B(2, 16) = A3*Q*(-7.*S-ZC+9.*SSS*Q)
      B(2, 19) = A1*Q*Q*(-S+2.*ZC-CSHCH-7.*SSHSH*Q)
      B(2, 20) = A2*Q*Q*(-CSHSH-7.*SSHCH)
      B(2, 21) = A1*Q*(-5.*S-2.*ZC-CSHCH-7.*SSHSH*Q)
      B(2, 22) = A3*Q*(-ZS-3.*SSC)
      B(2, 25) = A1*Q*Q*(2.*ZS-SSHCH+7.*CSHSH)
      B(2, 26) = Q/8.*(S+7.*CSHCH-SSHSH*Q)
      B(2, 27) = Q/16.*(7.*CSHSH-SSHCH-2.*ZS)
      GO TO 202
  201 B(1, 13) =-Q*Q*ZS/2.0
      B(1, 14) =-Q*(S-ZC)/2.0
      B(1, 16) =-Q*ZS/2.0
      B(1, 19) = Q*Q*ZS/2.0
      B(1, 21) =-Q*ZS/2.0
      B(1, 22) =-(S-ZC)/2.0
      B(1, 25) = Q*(S-ZC)/2.0
      B(1, 27) =-(S-ZC)/2.0
      B(2, 13) =-Q*Q*(S+ZC)/2.0
      B(2, 14) =-Q*Q*ZS/2.0
      B(2, 16) =-Q*(S+ZC)/2.0
      B(2, 19) = Q*Q*(S+ZC)/2.0
      B(2, 21) =-Q*(S+ZC)/2.0
      B(2, 22) =-Q*ZS/2.0
      B(2, 25) = Q*Q*ZS/2.0
      B(2, 27) =-Q*ZS/2.0
  202 CONTINUE
  206 B(1,13) = B(1,13)
     3         +H*H*A36*(-8.*SS-3.*SSC+15.*ZS+(C-1.)*8./Q)/Q
     3         +G*A2*(-SSC-3.*ZS)
      B(1,14) = B(1,14)
     4         +H*H*A36*(-9.*SSS+(23.*S-8.*SC-15.*ZC)/Q)/Q
     4         +G*A6*(-SSS+(ZC-S)/Q)
      B(1,15) = H*Z/6.*(S+2.*SC)
      B(1,16) = B(1,16)
     6         +H*H*A36*(15.*ZS-32.*SS+9.*SSC+(1.-C)*16./Q)/Q2
     6         +G*A6*(SSC-ZS)/Q
      B(1,17) = H/3.*((Z*(C-1.)-S+SC)/Q+2.*ZSS)
      B(1,18) = Q*A2*(-3.*ZS-ZZC)
      B(1,19) = B(1,19)
     9         +H*H*A100*(88.0/Q*(1.-C)+40.*SS-70.*ZS+16.*SHSH-35.*CSHSH
     9         +5.*SSHCH)/Q
     9         +G*A6*(CSHSH+SSHCH+2.*ZS)
      B(1,20) = B(1,20)
     *         +H*H*A30*(3.0*SSHSH+(29.*S-8.*SC-21.*CSHCH)/Q)/Q
     *         +G*A12*(SSHSH+(CSHCH-S)/Q)
      B(1,21) = B(1,21)
     1         +H*H*A300*((1.-C)*16.0/Q-80.*SS+210.*ZS-48.*SHSH
     1         -105.*CSHSH+15.*SSHCH)/Q2
     1         +G*A6*(CSHSH+SSHCH-2.*ZS)/Q
      B(1,22) = B(1,22)
     2         +H*H*A36*(3.*SSS-(15.*ZC+S-16.*SC)/Q)/Q2
     2         +G*A2*(SSS+(ZC-S)*3./Q)/Q
      B(1,23) = H/3.*(SS+ZS-ZSC+(C-1.)*2./Q)/Q
      B(1,24) = Q*A2*((-S+ZC)/Q-ZZS)
      B(1,25) = B(1,25)
     5         +H*H*A100*(-35.*SSHSH+(70.*ZC-73.*S-40.*SC+48.*SHCH
     5         -5.*CSHCH)/Q)/Q
     5         +G*A6*(SSHSH+(3.*S-2.*ZC-CSHCH)/Q)
      B(1,26) = B(1,26)
     6         +H*H*A30*((1.-C)*16.0/Q-8.*SS+24.*SHSH-3.*CSHSH
     6         -21.*SSHCH)/Q2
     6         +G*A12*(SSHCH-CSHSH)/Q
      B(1,27) = B(1,27)
     7         +H*H*A300*((49.*S+80.*SC-210.*ZC+96.*SHCH-15.*CSHCH)/Q
     7         -105.*SSHSH)/Q2
     7         +G*A6*(SSHSH+(2.*ZC-S-CSHCH)/Q)/Q
      B(1,29) = H*0.1*(-3.*ZS-2.*ZSHCH)
      B(1,30) = H*0.2*(-2.*ZSHSH+(SHCH-S+ZC-Z)/Q)
      B(1,31) = H*0.2*((C-1.)*2.0/Q+ZS+SHSH-ZSHCH)/Q
      B(2,13) = B(2,13)
     3         +H*H*A36*((S-16.*SC+15.*ZC)/Q+9.*SSS)
     3         +G*A2*(-5.*S-3.*ZC+3.*SSS*Q)
      B(2,14) = B(2,14)
     4         +H*H*A36*((C-1.)*8.0/Q+16.*SS-27.*SSC+15.*ZS)/Q
     4         +G*A6*(-3.*SSC-ZS)
      B(2,15) = H/6.*(S+2.*SC+2.*Z+ZC-4.*ZSS*Q)
      B(2,16) = B(2,16)
     6         +H*H*A36*((49.*S+15.*ZC-64.*SC)/Q-27.*SSS)/Q
     6         +G*A6*((S-ZC)/Q-3.*SSS)
      B(2,17) = H/3.*(4.*ZSC-ZS)
      B(2,18) = Q*A2*(-3.*S-5.*ZC+ZZS*Q)
      B(2,19) = B(2,19)
     9         +H*H*A100*(45.*SSHSH+(23.*S-70.*ZC+80.*SC+32.*SHCH
     9         -65.*CSHCH)/Q)
     9         +G*A6*(3.*S+2.*ZC+3.*CSHCH+SSHSH*Q)
      B(2,20) = B(2,20)
     *         +H*H*A30*((C-1.)*8.0/Q+16.*SS+27.*SSHCH-39.*CSHSH)/Q
     *         +G*A12*(3.*CSHSH+SSHCH)
      B(2,21) = B(2,21)
     1         +H*H*A300*(135.*SSHSH+(241.*S+210.*ZC-160.*SC-96.*SHCH
     1         -195.*CSHCH)/Q)/Q
     1         +G*A6*(SSHSH+(-S-2.*ZC+3.*CSHCH)/Q)
      B(2,22) = B(2,22)
     2         +H*H*A36*((1.-C)*16.0/Q-32.*SS+9.*SSC+15.*ZS)/Q2
     2         +G*A6*(SSC-ZS)/Q
      B(2,23) = H/3.*((-S+SC+ZC-Z)/Q+2.*ZSS)
      B(2,24) = Q*A2*(-3.*ZS-ZZC)
      B(2,25) = B(2,25)
     5         +H*H*A100*((1.-C)*8.0/Q-70.*ZS+80.*SS+96.*SHSH
     5         -65.*SSHCH-45.*CSHSH)/Q
     5         +G*A6*(2.*ZS+3.*SSHCH-CSHSH)
      B(2,26) = B(2,26)
     6         +H*H/30.*((-5.*S-16.*SC+48.*SHCH-27.*CSHCH)/Q
     6         -39.*SSHSH)/Q
     6         +G*3./4.*((S-CSHCH)/Q+3.*SSHSH)
      B(2,27) = B(2,27)
     7         +H*H/300.*((1.-C)*176.0/Q-160.*SS+210.*ZS+192.*SHSH
     7         -195.*SSHCH-135.*CSHSH)/Q2
     7         +G*3./8.*(3.*SSHCH-CSHSH-2.*ZS)/Q
      B(2,29) = H/10.*(-3.*S-2.*SHCH-2.*Z-3.*ZC-4.*ZSHSH*Q)
      B(2,30) = H*Z/5.*(-S-4.*SHCH)
      B(2,31) = H/5.*((-S+SHCH-Z*(1.-C))/Q-2.*ZSHSH)
      GO TO 400
C
C
C     ASYMPTOTIC FORM FOR SMALL Q VALUES.
C
C
  300 CONTINUE
      H2   = H*H
      Z2   = Z*Z
      Z3   = Z2*Z
      Z4   = Z3*Z
      Z5   = Z4*Z
      Z6   = Z5*Z
      Z7   = Z6*Z
      QZ2  = Q*Z2
      QZ4  = QZ2*QZ2
      B(1,1)  = 1.0-QZ2/2.0+QZ4/24.0
      B(1,2)  = Z*(1.-QZ2/6.+QZ4/120.)
      B(2,1)  =-Q*B(1,2)
      B(2,2)  = B(1,1)
      B(1,32) = 1.+QZ2/2.+QZ4/24.0
      B(1,33) = Z*(1.+QZ2/6.+QZ4/120.)
      B(2,32) = Q*B(1,33)
      B(2,33) = B(1,32)
      IF(NORDER.EQ.1) GO TO 400
      B(1,4)  =-H*Z2/2.*(1.-QZ2/4.+11./360.*QZ4)
      B(1,5)  =-H*Z3/3.*(1.-QZ2/4.+1./40.*QZ4)
      B(1,6)  = QZ2/2.0*(1.-QZ2/6.+1./120.*QZ4)
      B(1,7)  =-H*Z4/12.*(1.-QZ2/6.+1./80.*QZ4)
      B(1,8)  = Q*Z3/6.0*(1.-QZ2/10.+1./280.*QZ4)
      B(1,10) = H*Z2/2.*(1.+QZ2/12.+7./360.*QZ4)
      B(1,11) = H*Z3/3.*(1.+QZ2*3./20.+13./840.*QZ4)
      B(1,12) = H*Z4/12.*(1.+QZ2/10.+13./1680.*QZ4)
      B(2,4)  =-H*Z*(1.-QZ2/2.+QZ4*11./120.)
      B(2,5)  =-H*Z2*(1.-QZ2*5./12.+QZ4*7./120.)
      B(2,6)  = Q*Z*(1.-QZ2/3.+QZ4/40.)
      B(2,7)  =-H*Z3/3.*(1.-QZ2/4.+QZ4/40.)
      B(2,8)  = Q*Z2/2.0*(1.-QZ2/6.+QZ4/120.)
      B(2,10) = H*Z*(1.+QZ2/6.+QZ4*7./120.)
      B(2,11) = H*Z2*(1.+QZ2/4.+QZ4*13./360.)
      B(2,12) = H*Z3/3.*(1.+QZ2*3./20.+QZ4*13./840.)
      B(1,34) = H*Z2*(1.+QZ2/12.)
      B(1,35) = H*Z3/3.*(1.+QZ2*3./20.)
      B(1,36) =-QZ2/2.0*(1.+QZ2/6.)
      B(1,37) = H*Z3/3.*(1.-QZ2/20.)
      B(1,38) = H*Z4/6.*(1.+QZ2/30.)
      B(1,39) =-Z*QZ2/6.0*(1.+QZ2/10.)
      B(2,34) = H*Z*2.*(1.+QZ2/6.-QZ4/40.)
      B(2,35) = H*Z2*(1.+QZ2/4.)
      B(2,36) =-Q*Z*(1.+QZ2/3.)
      B(2,37) = H*Z2*(1.-QZ2/12.)
      B(2,38) = H*Z3*2./3.*(1.+QZ2/20.)
      B(2,39) =-QZ2/2.0*(1.+QZ2/6.)
      IF(NORDER.EQ.2) GO TO 400
      IF(Q .EQ. 0.0) GO TO 307
      IF(INDEX .GE. 2) GO TO 303
      B(1, 13) =-Q3*Z4/8.0*(1.-11./30.*QZ2+17./280.*QZ4)
      B(1, 14) = Q2*Z3/2.0*(1.-QZ2*11./20.+17./140.*QZ4)
      B(1, 16) =-QZ2*3./4.0*(1.-2./3.*QZ2)
      B(1, 19) =-Q3*Z4/8.0
      B(1, 20) =-Q2*Z3/3.0
      B(1, 21) =-Q*Z2/4.0*(1.+QZ2/3.)
      B(1, 22) =-Q*Z3/4.0*(1.-0.4*QZ2)
      B(1, 25) = Q2*Z3/6.0*(1.-0.15*QZ2)
      B(1, 26) = Q*Z2/2.0
      B(1, 27) = Q*Z3/12.0*(1.-0.2*QZ2)
      B(2, 13) =-Q3*Z3/2.0*(1.-QZ2*11./20.+17./140.*QZ4)
      B(2, 14) = Q2*Z2*3./2.0*(1.-QZ2*11./12.+17./60.*QZ4)
      B(2, 16) =-Q*Z*3./2.0*(1.-QZ2*4./3.+23./40.*QZ4)
      B(2, 19) =-Q3*Z3/2.0
      B(2, 20) =-Q2*Z2*(1.+QZ2*5./12.)
      B(2, 21) =-Q*Z/2.0*(1.+QZ2*2./3.+17./120.*QZ4)
      B(2, 22) =-Q*Z2*3./4.0*(1.-QZ2*2./3.)
      B(2, 25) = Q2*Z2/2.0*(1.-QZ2/4.-13./180.*QZ4)
      B(2, 26) = Q*Z
      B(2, 27) = Q*Z2/4.0*(1.-QZ2/3.)
      GO TO 304
  303 B(1, 13) =-Q2*Z2/2.0*(1.-QZ2/6.+QZ4/120.)
      B(1, 14) =-Q2*Z3/6.0*(1.-QZ2*3./40.+QZ4/280.)
      B(1, 16) =-Q*Z2/2.0*(1.-QZ2/6.+QZ4/120.)
      B(1, 19) =-B(1, 13)
      B(1, 21) = B(1, 16)
      B(1, 22) =-Q*Z3/6.0*(1.-QZ2*3./40.+QZ4/280.)
      B(1, 25) =-B(1, 14)
      B(1, 27) = B(1, 22)
      B(2, 13) =-Q2*Z*(1.-QZ2/3.+QZ4/40.)
      B(2, 14) = B(1, 13)
      B(2, 16) =-Q*Z*(1.-QZ2/3.+QZ4/40.)
      B(2, 19) =-B(2, 13)
      B(2, 21) = B(2, 16)
      B(2, 22) =-Q*Z2/2.0*(1.-QZ2/6.+QZ4/120.)
      B(2, 25) =-B(2, 14)
      B(2, 27) = B(2, 22)
  304 CONTINUE
  307 B(1,13) = B(1,13)
     3         +H2*Z4/12.*(1.-QZ2/3.+27./560.*QZ4)
     3         -0.5*G*Z2*(1.-1./3.*QZ2+5./72.*QZ4)
      B(1,14) = B(1,14)
     4         +H2*Z5/12.*(1.-QZ2*2./7.+13./336.*QZ4)
     4         -0.5*G*Z3*(1.-2./5.*QZ2+23./280.*QZ4)
      B(1,15) = H*Z2/2.*(1.-QZ2/2.+11./120.*QZ4)
      B(1,16) = B(1,16)
     6         +H2*Z6/36.*(1.-QZ2*135./504.)-G*Z4/4.*(1.-QZ2*11./30.)
      B(1,17) = H*Z3/3.*(1.-QZ2/2.+3./40.*QZ4)
      B(1,18) =-Q*Z2/2.0*(1.-QZ2/4.+QZ4/60.)
      B(1,19) = B(1,19)
     9         +H2*Z4/12.*(1.+QZ2*3./5.)+G*Z2*1.5*(1.-QZ4/120.)
      B(1,20) = B(1,20)
     *         +H2*Z5/10.*(1.+QZ2*2./9.)+G*Z3*(1.-QZ4*19./840.)
      B(1,21) = B(1,21)
     1         +H2*Z6/60.*(1.+QZ2*23./168.)+G*Z4/4.*(1.-QZ2/10.)
      B(1,22) = B(1,22)
     2         +H2*Z7/252.*(1.-QZ2*5./24.)-G*Z5/20.*(1.-QZ2*11./42.)
      B(1,23) = H*Z4/12.*(1.-QZ2/3.)
      B(1,24) =-Q*Z3/6.0*(1.-0.15*QZ2)
      B(1,25) = B(1,25)
     5         -H2*Z5/60.*(1.-QZ2*16./21.)+G*Z3/2.*(1.+QZ2/5.)
      B(1,26) = B(1,26)
     6         +H2*Z6/90.*(1.+QZ2*5./8.)+G*Z4/2.*(1.+QZ2/6.)
      B(1,27) = B(1,27)
     7         +H2*Z7/252.*(1.+QZ2*31./120.)+G*Z5*0.15*(1.+QZ2/18.)
      B(1,29) =-H*Z2/2.*(1.+QZ2/6.+7./120.*QZ4)
      B(1,30) =-H*Z3/3.*(1.+QZ2*0.3+13./280.*QZ4)
      B(1,31) =-H*Z4/12.*(1.+QZ2/5.+13./560.*QZ4)
      B(2,13) = B(2,13)
     3         +1./3.*H2*Z3*(1.-1./2.*QZ2+27./280.*QZ4)
     3         -G*Z*(1.-2./3.*QZ2+5./24.*QZ4)
      B(2,14) = B(2,14)
     4         +5./12.*H2*Z4*(1.-2./5.*QZ2+39./560.*QZ4)
     4         -3./2.*G*Z2*(1.-2./3.*QZ2+23./120.*QZ4)
      B(2,15) = H*Z*(1.-QZ2+11./40.*QZ4)
      B(2,16) = B(2,16)
     6         +1./6.*H2*Z5*(1.-135./378.*QZ2+3./56.*QZ4)
     6         -G*Z3*(1.-11./20.*QZ2+17./140.*QZ4)
      B(2,17) = H*Z2*(1.-QZ2*5./6.+7./40.*QZ4)
      B(2,18) =-Q*Z*(1.-QZ2/2.)
      B(2,19) = B(2,19)
     9         +H2*Z3/3.*(1.+QZ2*9./10.)+G*Z*3.*(1.-QZ4/40.)
      B(2,20) = B(2,20)
     *         +H2*Z4/2.*(1.+QZ2*14./45.)+G*Z2*3.*(1.-QZ4*19./360.)
      B(2,21) = B(2,21)
     1         +0.1*H2*Z5*(1.+23./126.*QZ2-31./4536.*QZ4)
     1         +G*Z3*(1.-3./20.*QZ2-13./420.*QZ4)
      B(2,22) = B(2,22)
     2         +H2*Z6/36.*(1.-QZ2*45./168.)-G*Z4*(1.-QZ2*11./30.)/4.0
      B(2,23) = H*Z3/3.*(1.-QZ2/2.)
      B(2,24) =-Q*Z2/2.*(1.-QZ2/4.)
      B(2,25) = B(2,25)
     5         -1./12.*H2*Z4*(1.-16./15.*QZ2-127./1680.*QZ4)
     5         +3./2.*G*Z2*(1.+1./3.*QZ2+17./360.*QZ4)
      B(2,26) = B(2,26)
     6         +H2*Z5/15.*(1.+QZ2*5./6.) + G*Z3*(1.+QZ2/4.)*2.0
      B(2,27) = B(2,27)
     7         +H2*Z6/36.*(1.+QZ2*93./280.)+G*Z4*3./4.*(1.+QZ2*7./90.)
      B(2,29) =-H*Z*(1.+QZ2/3.+7./40.*QZ4)
      B(2,30) =-H*Z2*(1.+QZ2/2.+QZ4*13./120.)
      B(2,31) =-H*Z3/3.*(1.+QZ2*0.3+QZ4*13./280.)
  400 CONTINUE
      CALL PRDCT(A, B, NGROUP, INDEX, NORDER)
      RETURN
      END
C
C
      SUBROUTINE ELZER (AE,WE)
C
C
C     MATRIX FOR A CYLINDRICAL ELECTRIC FIELD.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2,59)
      COMMON/BLOCK3/ NGROUP, NORDER
C
      CALL UNIT(B, 2)
      U = SQRT(2.0)
      AE2=AE*AE
      W=WE*3.14159265/180.0
      SR= SIN(U*W)
      CR= COS(U*W)
      CCR= CR*CR-SR*SR
      SR2=SR*SR
      SRCR=SR*CR
      B(1,1)=CR
      B(1,2)=SR/U*AE
      B(1,3)=(1.0-CR)*AE*0.5
      B(2,1)=-U*SR/AE
      B(2,2)=CR
      B(2,3)=U*SR*0.5
      B(1,33)= W*AE
      IF(NORDER.EQ.1) GO TO 3355
      B(1,4)=(-3.0/4.0+CR/6.0+7.0/12.0* CCR)/AE
      B(1,5)=-4.0/3.0/U*SR +7.0/3.0/U*SRCR
      B(1,6)=-AE*B(1,4)
      B(1,7)=(-0.375   +2.0/3.0*CR-7.0/24.0*CCR)*AE
      B(1,8)=(7.0/6.0/U*SR -7.0/6.0/U*SRCR )*AE
      B(1,9)=((1.-CR)/12.-7./24.*SR2 ) *AE
      B(1,12)=-B(1,3)
      B(2,4)=(-U/6.0*SR -4.0/3.0*U*SRCR  )/AE2
      B(2,5)=-4.0/3.0*(CR -CCR)/AE
      B(2,6)=2.0/3.0*U*(SR +2.0*SRCR )/AE
      B(2,7)=2.0/3.0*U*SR*(CR-1.0)
      B(2,8)=2.0/3.0*(CR - CCR)
      B(2,9)=-B(2,6)*0.25*AE
      B(2,12)=-B(2,3)
      B(1,37)= U*SR -W
      B(1,38)= (1.0-CR)*AE
      B(1,39)= (W-0.5*U*SR)*AE
      B(2,37)= (CR-1.0)/AE
      B(2,38)= 0.5*U*SR
      B(2,39)= 0.5*(1.0-CR)
      IF ( NORDER .EQ. 2)  GO TO 3355
      AE3=AE2*AE
      SR3=SR2*SR
      SRW=SR*W
      CRW=CR*W
      SR2CR=SR2*CR
      B(1,13)=( -(1.-CR)/18. -U/12.*SRW -7./18.*SR2 -17./12.*SR2CR)/AE2
      B(1,14)=( 95.*U/72.*SR+CRW/12.-49.*U/36.*SRCR-17.*U/8.*SR3 )/AE
      B(1,15)=( (1.-CR)/6.+U/8.*SRW+7./6.*SR2+17./8.*SR2CR )/AE
      B(1,16)= 14./9.*(1.-CR)-U/24.*SRW-28./9.*SR2+17./8.*SR2CR
      B(1,17)= -95.*U/72.*SR-CRW/12.+49.*U/36.*SRCR+17./8.*U*SR3
      B(1,18)= -(1.-CR)/12.-U/16.*SRW-7./12.*SR2-17./16.*SR2CR
      B(1,21)= 5./6.*(1.-CR)-7./6.*SR2
      B(1,22)=( -115.*U/144.*SR+CRW/24.+7.*U/9.*SRCR+17.*U/48.*SR3)*AE
      B(1,23)=(-10./9.*(1.-CR)+U/48.*SRW+133./72.*SR2-17./16.*SR2CR)*AE
      B(1,24)=(137.*U/288.*SR+CRW/48.-35.*U/72.*SRCR-17.*U/32.*SR3)*AE
      B(1,27)=(-7.*U/12.*SR +7.*U/12.*SRCR)*AE
      B(1,28)=((1.-CR)/36.+U/96.*SRW+7./144.*SR2+17./96.*SR2CR)*AE
      B(1,31)=(-2./3.*(1.-CR)+7./12.*SR2)*AE
      B(2,13)=( -65./36.*U*SR -CRW/6. -4./9.*U*SRCR +7./4.*U*SR3)/AE3
      B(2,14)=( -14./9.*(1.-CR) -U/12.*SRW +28./9.*SR2-21./4.*SR2CR)/AE2
      B(2,15)=(  23./8.*U*SR +CRW/4.+2.*U*SRCR -21./8.*U*SR3) /AE2
      B(2,16)=(187./72.*U*SR-CRW/12. -32./9.*U*SRCR -21./8.*U*SR3)/AE
      B(2, 17)=( 8./9.*(1.-CR) +U*SRW/12. -16./9.*SR2 +21./4.*SR2CR)/AE
      B(2,18)=(-77./48.*U*SR-CRW/8.-4./3.*U*SRCR +21./16.*U*SR3) /AE
      B(2,21)=( U/3.*SR -4./3.*U*SRCR)/AE
      B(2,22)=8./9.*(1.-CR)-U/24.*SRW -16./9.*SR2 +7./8.*SR2CR
      B(2,23)= -187./144.*U*SR +CRW/24.  +16./9.*U*SRCR +21./16.*U*SR3
      B(2,24)= -2./9.*(1.-CR) -U/48.*SRW +4./9.*SR2 -21./16.*SR2CR
      B(2,27)= 2./3.*(1.-CR) -4./3.*SR2
      B(2,28)= 77./288.*U*SR +CRW/48. +2./9.*U*SRCR -7./32.*U*SR3
      B(2,31)= -U/6.*SR +2./3.*U*SRCR
 3355 CALL PRDCT(A, B, NGROUP, 2, NORDER)
      RETURN
      END
C
C
      SUBROUTINE ELNRM(AE, WE, C1, C2, C3)
C
C
C     MARTIX FOR AN ELECTRIC FIELD.
C     EX IN THE MEDIAN PLANE IS ASSUMED TO BE EXPANDED IN X AS
C
C        EX(X, 0) = E0*(1.0 + C1*X + C2*X**2 + C3*X**3 + ....).
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2,59)
      COMMON/BLOCK3/ NGROUP, NORDER
      DIMENSION   H(31,22) , G(31,22) , HA(31,22) , HY(8,8) , HB(8,8) ,
     1 GY(8,8) , F(22) , FY(8) ,HJ(31,22),HN(8,8)
      REAL  KX,KX2,KX3,KX4,KX5,KX6,KX7,KX8,  KY,KY2,KY3,KY4
C
      CC1 = -1.0 - C1
      AC1 = ABS(CC1)
      IF(AC1 .LT. 1.0E-6) CC1 = 1.0E-5
      CALL UNIT(B, 2)
      R = AE
      KX = SQRT(2.0 - CC1)
      KY = SQRT(CC1)
      W = WE*3.14159265/180.0
      SX = SIN(KX*W)
      CX = COS(KX*W)
      SY = SIN(KY*W)
      CY = COS(KY*W)
      KX2 = KX*KX
      B(1,1) = CX
      B(1,2) = R*SX/KX
      B(1,3) = R*(1.-CX)/KX2
      B(2,1) = -KX*SX/R
      B(2,2) = CX
      B(2,3) = SX/KX
      B(1,32) = CY
      B(1,33) = R*SY/KY
      IF( AC1 .LT. 1.0E-10 )  B(1,33) = R*W
      B(2,32) = -KY*SY/R
      B(2,33) = CY
      IF( NORDER .EQ. 1) GO TO 3355
      Q1 = -6.0 - 4.0*C1 - C2
      Q2 = -4.0 - 6.0*C1 - 4.0*C2 - C3
      Q3 = -1.0 + C1 + 5.0*C2 + 3.0*C3
      Q4 =  0.5*(-1.0 + C1 + 2.0*C2)
      Q5 = KX*KX -KY*KY
      Q6 = Q5 -KY*KY
      Q7 = Q6 -2.*KY*KY
      IF(ABS(Q5).LT.1.0E-5) Q5=1.0E-5
      IF(ABS(Q6).LT.1.0E-5) Q6=1.0E-5
      IF(ABS(Q7).LT.1.0E-5) Q7=1.0E-5
      KX3 = KX2*KX
      KX4 = KX3*KX
      KX5 = KX4 * KX
      KX6 = KX5 * KX
      KX7 = KX6 * KX
      KX8 = KX7 * KX
      KY2 = KY*KY
      KY3 = KY2*KY
      KY4 = KY3*KY
      Q12 = Q1*Q1
      Q42 = Q4*Q4
      Q72 = Q7 * Q7
      R2 = R*R
      R3 = R2*R
      II=31
      JJ=22
      IV=8
      IF (NORDER.EQ.2) II=12
      IF (NORDER.EQ.2) JJ=12
      DO  401  J=1,JJ
      DO  401  I=1,II
      G(I,J) = 0.0
      H(I,J) = 0.0
      HA(I,J) = 0.0
      HJ(I,J) = 0.0
  401 CONTINUE
      G( 4, 1) = 1./R *(-KX2 + Q1)
      G( 4, 9) = 1./R *(2.*KX2 -Q1)
      G( 5,10) = -2.*R/KX *G( 4, 9)
      G( 6, 1) =-2.*R/KX2 *G( 4, 1)
      G( 6, 4) =(KX2 +1. +2.*Q1/KX2)
      G( 6, 9) = -2.*R/KX2 *G( 4, 9)
      G( 7, 1) = R
      G( 7, 9) = -R2/KX2 *G( 4, 9)
      G( 8, 3) = R/KX *G( 6, 4)
      G( 8,10) = 2.*R2/KX3 *G( 4, 9)
      G( 9, 1) =    R *(1./KX2 +2.*Q1/KX4)
      G( 9, 4) = -R/KX2 * G( 6, 4)
      G( 9, 9) = R2/KX4 * G( 4, 9)
      G(10, 1) = 1./R * (-KY2 + Q4)
      G(10,11) = - Q4 / R
      G(11,12) = 2.*Q4 /KY
      G(12, 1) = -R
      G(12,11) = R * Q4 /KY2
      IF (NORDER.EQ.2)  GO  TO  963
      G(13, 1) = 2./3./R2 *(KX2 -Q12/KX2)
      G(13, 4) = -1./R2 *(KX4 + KX2 -2.*Q1/3. - 2.*Q12/3./KX2 -Q2)
      G(13, 9) = 2./3./R2 *(-2.*KX2 -Q1 + Q12/KX2)
      G(13,18) = 1./R2 *(10.*KX2/3. -4.*Q1 + 2.*Q12/3./KX2 -Q2)
      G(14, 3) = 1./R *(-KX3-23.*KX/3. +26.*Q1/3./KX -2.*Q12/3./KX3 +
     13.*Q2/KX)
      G(14,10) = 2./3./R *(4.*KX -4.*Q1/KX + Q12/ KX3)
      G(14,17) = 3.*R/KX * G(13,18)
      G(15, 1) = 1./R * (4.*KX2/3. + 1./3. -2.*Q1/3. + 3.*Q1/KX2 +
     18.*Q12/3./KX4 + 3.*Q2/KX2)
      G(15, 4) = 1./R *(4.*KX2 +3. -Q1) - G(15, 1)
      G(15, 9) = 1./R *(-8.*KX2/3. -2./3. + 4.*Q1/3. -3.*Q1/KX2 -
     14.*Q12/3./KX4 -3.*Q2/KX2 )
      G(15,14) = 1./R *( -2.*KX3 -2.*KX +KX*Q1 -3.*Q1/KX +2.*Q12/KX3)
      G(15,18) = -3.*R/KX2 * G(13,18)
      G(16, 1) = 2./3.*(-2. + 5.*Q1/KX2 -2.*Q12/KX4 )
      G(16, 4) = -KX2 + 1. -G(16, 1)
      G(16, 9) = -2.* G(16, 1)
      G(16,18) = -3.*R2/KX2 *G(13,18)
      G(17, 2) = -R/KX * G(15,14)
      G(17, 3) = (5.*KX/3. +15./KX + 2.*Q1/3./KX -52.*Q1/3./KX3 +
     18.*Q12/3./KX5 - 6.*Q2/KX3)
      G(17,10) = (10.*KX/3. -2./KX -5.*Q1/3./KX +43.*Q1/3./KX3 - 2.*
     1Q12/3./KX5 + 6.*Q2/KX3)
      G(17,13) = 2.*R/KX * G(15,14)
      G(17,17) = -6.*R2/KX3 *G(13,18)
      G(18, 1) = (-8./3. +4./3./KX2 +4.*Q1/3./KX2 - 8.*Q1/KX4 -16.*Q12/
     13./KX6 -6.*Q2/KX4)
      G(18, 4) =(-KX2-5.)     - G(18, 1)
      G(18,5)=(KX3/2.+KX+0.5/KX+2.*Q1/KX+2.*Q1/KX3+2.*Q12/KX5)
      G(18, 9) =(16./3.-8./3./KX2 -8.*Q1/3./KX2 +8.*Q1/KX4 +8.*Q12/3./
     1KX6 +6.*Q2/KX4)
      G(18,14) = -2.*R/KX2 * G(15,14)
      G(18,18) = 3.*R2/KX4 * G(13,18)
      G(19, 1) = 1./R2 *( -5.*KX2 +4. -2.*Q1*Q5/KX2 -2.*Q1*Q4*Q6/KX2/
     1Q7 + 4.*Q42/Q7 )
      G(19, 4) = 1./R2 *( -(1.+KX2)*KY2 -2.*KY2*Q1/KX2 + 2.*Q1*Q4*Q6/
     1KX2/Q7 - 4.*Q42/Q7 +Q3)
      G(19,9) = 1./R2 *( 4.*KY2 - 2.*KY2*Q1/KX2 -4.*Q4*Q6/Q7 + 2.*Q1*
     1Q4*Q6/KX2/Q7 )
      G(19,11) = -4.*Q42/R2/Q7
      G(19,20) = 8.*KY/R2/Q7 *(2.*KX*Q4 + Q1*Q4/KX)
      G(19,21) = 1./R2 *(-2.*Q1*Q4/Q7 + 4.*Q42/Q7 -Q3 )
      G(20, 3) = -R/KY *G(19,20)
      G(20,10) = 4./R *(2.*KX*Q4/Q7 - Q1*Q4/KX/Q7 )
      G(20,12) = -2.*Q4/R/KY
      G(20,19) = 2.*R/KY *G(19,20)
      G(20,22) = -2.*R/KY *G(19,21)
      G(21, 1) = ( 2.*Q1/KX2 + 4.*Q1*Q4/KX2/Q7 )
      G(21, 4) = -KX2 -1. -G(21, 1)
      G(21, 9) = (4. - 2.*Q1/KX2 + 8.*Q4/Q7 - 4.*Q1*Q4/KX2/Q7 )
      G(21,11) = (4.*KX2*Q4/KY2/Q7 + 4.*Q1*Q4/KY2/Q7 )
      G(21,20) = -R2/KY2 * G(19,20)
      G(21,21) = -R2/KY2 * G(19,21)
      G(22, 3) =  R/KX * G(16, 4)
      G(22,10) =  R/KX * G(16, 1)
      G(22,17) = -R3/KX3 *G(13,18)
      G(23, 1) =  R*(-1./3.+ 2./KX2 + 2.*Q1/3./KX2 -10.*Q1/3./KX4 +
     18.*Q12/3./KX6 )
      G(23, 4) =R  - G(23, 1)
      G(23, 9) = R*(2./3. -4./KX2 -Q1/3./KX2 +32.*Q1/3./KX4 -4.*Q12 /
     13./KX6 +3.*Q2/KX4 )
      G(23,14) = -R2/KX2 * G(15,14)
      G(23,18) = 3.*R3/KX4 * G(13,18)
      G(24, 2) = R2/KX3 *G(15,14)
      G(24, 3) = R*(-KX/2. +4./3./KX - 29./6./KX3 -2.*Q1/3./KX3 +50.*
     1Q1/3./KX5 + 2.*Q12/KX7 + 6.*Q2/KX5 )
      G(24, 6) = -R/KX * G(18, 5)
      G(24,10) = R*(-10./3./KX + 22./3./KX3 + 5.*Q1/3./KX3 -35.*Q1/3./
     1KX5 - 2.*Q12/KX7 - 6.*Q2/KX5 )
      G(24,13) = -2.*R2/KX3 * G(15,14)
      G(24,17) = 3. *R3/KX5 * G(13,18)
      G(25, 3) = R/KX * G(19, 4)
      G(25,10) = -R/KX* G(19, 9)
      G(25,12) = 1./R *( 8.*KY*Q4/Q7 + 8.*KY*Q1*Q4/KX2/Q7 + 4.*Q42/KY/
     1Q7 )
      G(25,19) = R/KX * G(19,21)
      G(25,22) = -R/KX * G(19,20)
      G(26, 1) = -R2/KX/KY *G(19,20)
      G(26, 4) =  R2/KX/KY *G(19,20)
      G(26, 9) = R/KX * G(20,10)
      G(26,11) = -6.*Q4/KY2 - 4.*Q1*Q4/KX2/KY2
      G(26,20) = -2.*R2/KX/KY * G(19,21)
      G(26,21) = -2.*R2/KX/KY * G(19,20)
      G(27, 3) = -R*( KX +1./KX + 2.*Q1/KX3 +4.*Q1*Q4/KX3/Q7)
      G(27,10) = -R/KX * G(21, 9)
      G(27,12) = -2.*KY*R/KX2 * G(21,11)
      G(27,19) = -R3/KX/KY2 * G(19,21)
      G(27,22) =  R3/KX/KY2 * G(19,20)
      G(28, 1) = R *(4./3./KX2 +7./3./KX4 -2.*Q1/3./KX4 +32.*Q1/3./KX6+
     116.*Q12/3./KX8 + 4.*Q2/KX6 )
      G(28,4)=R     -G(28, 1)
      G(28, 5) =  -R/KX2 *G(18, 5)
      G(28, 9) = R* (-8./3./KX2 +14./3./KX4 +4.*Q1/3./KX4 -13.*Q1/3./
     1KX6 -2.*Q12/KX8 -3.*Q2/KX6 )
      G(28,14) = R2/KX4 *G(15,14)
      G(28,18) = -R3/KX6 *G(13,18)
      G(29, 1) = 1./R *(-2.*KY2/KX2 -4.*KY2*Q1/KX4 +(2.*KY2/Q7 +(7.*KX2-
     110.*KY2)/KX2/Q7 )*Q4 + 8.*Q1*Q4*Q5/KX4/Q7 +Q3/KX2 )
      G(29, 4) = 2.*KY2/R  -G(29, 1) -Q4/R
      G(29, 9) = -R/KX2 * G(19, 9)
      G(29,11) = 1./R *(-7.*Q4/Q7 + 4.*KY4*Q4/KX2/Q7 -6.*Q1*Q4/KX2/Q7 -
     1Q3/KX2 )
      G(29,16) = 1./R *(-Q4/KY - KX2*Q4/KY -2.*Q1*Q4/KX2/KY)
      G(29,20) = -R/KX2 * G(19,20)
      G(29,21) = -R/KX2 * G(19,21)
      G(30, 2) = -R/KY * G(29,16)
      G(30, 3) = (2.*(7.-KX2)*Q4/KX/Q7 + 4.*Q1*Q4/KX3/Q7 )
      G(30,10) = -R/KX2 * G(20,10)
      G(30,12) =((4./KX2/KY +(2.+2.*KX2)/KY/Q7 -(3.+KY2)/KY3)*Q4 +
     12.*(-KX2 +6.*KY2)*Q1*Q4/KX2/KY3/Q7 + 2.*Q3/KX2/KY)
      G(30,15) = 2.*R/KY * G(29,16)
      G(30,19) = -2.*R2/KX2/KY * G(19,20)
      G(30,22) =2.*R2/KX2/KY * G(19,21)
      G(31, 1) = -R*(1.+2./KX2 +4.*Q1/KX4 +2.*(1.+KX2)*Q4/KX2/Q7 +
     18.*Q1*Q4/KX4/Q7 )
      G(31, 4) =R  - G(31, 1)
      G(31, 9) = -1./KX2 * G(21, 9)*R
      G(31,11) =  R* (((1.+KX2)/KY2/Q7 -(2.*KX2+8.*KY2)/KX2/KY2/Q7 -
     1(1.+KX2)/KY4 -1./KY2)*Q4 -2.*(KX2-3.*KY2)*Q1*Q4/KX2/KY4/Q7 +
     2Q3/KX2/KY2 )
      G(31,16) = - R2/KY2 * G(29,16)
      G(31,20) = R3/KX2/KY2 * G(19,20)
      G(31,21) = R3/KX2/KY2 * G(19,21)
  963 CONTINUE
      HA(4,10) = KX/R2
      HA(5, 1) = -1./R
      HA(5, 9) = 2./R
      HA(6, 3) = 1./KX/R
      HA(6,10) = -2./KX/R
      HA(7,10) = -1./KX
      HA(8, 1) = 1./KX2
      HA(8, 4) = -1./KX2
      HA(8, 9) = -2./KX2
      HA(9, 3) = -1./KX3
      HA(9,10) = 1./KX3
      IF (NORDER.EQ.2)  GO TO  852
      HA(13, 3) =-1./3./R3 *(Q1-2.*KX2)/KX
      HA(13,10) =-2./3./R3/KX*(Q1+KX2)
      HA(13,17) = 1./R3 *(-KX + Q1/KX )
      HA(14, 1) = R/KX * HA(13, 3)
      HA(14, 4) = -HA(14, 1)
      HA(14, 9) = -2.*HA(14, 1)
      HA(14,18) = -3.*R/KX * HA(13,17)
      HA(15, 2) = -0.5/R2 *(KX2 +1. + 2.*Q1/KX2 )
      HA(15, 3) = 1./3./KX3/R2*(2.*Q1-7.*KX2)
      HA(15,10) = 1./6./KX3/R2*(-3.*KX4+5.*KX2+2.*Q1)
      HA(15,13) = -2.*HA(15, 2)
      HA(15,17) = 1./KX * HA(14,18)
      HA(16, 3) = 1./3./KX/R *(-7. + 8.*Q1/KX2)
      HA(16,10) = 4./3./KX/R *( 1. - 2.*Q1/KX2)
      HA(16,17) = R*HA(15,17)
      HA(17, 1) = 1./3./KX4/R*(4.*Q1-5.*KX2)
      HA(17, 4) = -HA(17, 1)
      HA(17, 9) = -2.*HA(17, 1)
      HA(17,14) = 4.*R/KX *HA(15, 2)
      HA(17,18) = 6.*R2/KX3 *HA(13,17)
      HA(18, 2) = -2.*R/KX2 *HA(15, 2)
      HA(18, 3) = 1./R*(-0.5/KX+19./6./KX3-Q1/3./KX5)
      HA(18, 6) = R/KX2 *HA(15, 2)
      HA(18,10) = 1./3./KX5/R*(3.*KX4 -11.*KX2-2.*Q1)
      HA(18,13) = -2.* HA(18,2)
      HA(18,17) = 3.*R2/KX4 *HA(13,17)
      HA(19, 3) = 1./R3 *(-KY2/KX +Q4*Q6/KX/Q7)
      HA(19,10) = -2.*HA(19, 3)
      HA(19,19) = -KX *Q4/R3/Q7
      HA(19,22) = -2.*KY/KX * HA(19,19)
      HA(20, 1) = 2.*Q4/R2/Q7
      HA(20, 4) = -HA(20, 1)
      HA(20, 9) = -2.*HA(20, 1)
      HA(20,20) = KX/KY * HA(20, 1)
      HA(20,21) = 2. * HA(20, 1)
      HA(21, 3) =-1./R *( 1./KX + 2.*Q4/KX/Q7)
      HA(21,10) = -2.* HA(21, 3)
      HA(21,19) = 0.5*R/KY * HA(20,20)
      HA(21,22) = -R/KX * HA(20,20)
      HA(22, 1) = -0.25 *R/KX * HA(16,10)
      HA(22, 4) = -HA(22, 1)
      HA(22, 9) = -2.*HA(22, 1)
      HA(22,18) = R3/KX3 * HA(13,17)
      HA(23, 2) = -R2/KX2 * HA(15, 2)
      HA(23, 3) = 1./3./KX5*(-10.*Q1 +8.*KX2)
      HA(23,10) =(-0.5/KX -19./6./KX3 + 7.*Q1/3./KX5 )
      HA(23,13) = -2.* HA(23, 2)
      HA(23,17) = 3./KX * HA(22,18)
      HA(24, 1) = 3./KX4
      HA(24, 4) = -HA(24, 1)
      HA(24, 5) = -1./KX * HA(23, 2)
      HA(24, 9) = -2. * HA(24, 1)
      HA(24,14) = -4. * HA(24, 5)
      HA(24,18) = -1./KX * HA(23,17)
      HA(25, 1) = R/KX * HA(19, 3)
      HA(25, 4) = -HA(25, 1)
      HA(25, 9) = -2.* HA(25, 1)
      HA(25,20) = R/KX * HA(19,22)
      HA(25,21) = 0.5 * HA(20, 1)
      HA(26, 3) = -R/KY *HA(25,20)
      HA(26,10) = -2. * HA(26, 3)
      HA(26,19) = HA(26,10)
      HA(26,22) = -2.*R/KY *HA(25,21)
      HA(27, 1) = R/KX * HA(21, 3)
      HA(27, 4) = -HA(27, 1)
      HA(27, 9) = 2./KX2 +4.*Q4/KX2/Q7
      HA(27,20) = R/KX * HA(21,22)
      HA(27,21) =-R2/KY2 * HA(25,21)
      HA(28, 2) = 1./KX * HA(24, 5)
      HA(28, 3) = 0.5/KX7*(KX4 -7.*KX2 -2.*Q1)
      HA(28, 6) = -HA(28, 2)
      HA(28,10) = -HA(28, 3)
      HA(28,13) = 2.*HA(28, 6)
      HA(28,17) = 1./3./KX * HA(24,18)
      HA(29, 3) =  1./KX * HA(25, 9)
      HA(29,10) =  -HA(29, 3)
      HA(29,12) = 1./KX * HA(25,20)
      HA(29,19) = 1./KX * HA(25,21)
      HA(29,22) = -HA(29,12)
      HA(30, 1) =  -4.*R/KX * HA(29,19)
      HA(30, 4) = -HA(30, 1)
      HA(30, 9) =  HA(30, 4)
      HA(30,11) =  HA(30, 4)
      HA(30,20) = 1./R * HA(27,20)
      HA(30,21) = -HA(30, 9)
      HA(31, 3) = R/KX2 * HA(21,10)
      HA(31,10) = -HA(31, 3)
      HA(31,19) = 0.5 * HA(27,20) /KY
      HA(31,12) = R/KX * HA(30,20)
      HA(31,22) = - HA(31,12)
  852 CONTINUE
      DO  521  I=1,II
      DO  521  J=1,JJ
      HJ(I,J)=HA(I,J)
      HA(I,J) = 0.0
  521 CONTINUE
      DO 161   N2= 4,12
      XDEL5 =0.
      IF (N2.EQ.5)  XDEL5=1.
      H(N2,1) =  1./KX2*G(N2,1) + 2./3./KX2 *G(N2,9) - 2.*KY2/KX2/Q7 *
     1G(N2,11)
      H(N2,3) = 1./2./KX2*G(N2,3) + 1./3./KX2*G(N2,10)-KY/KX/Q7*G(N2,
     112) + 1./KX * XDEL5
      H(N2,4) = -H(N2,1)
      H(N2,5) = 0.5/KX * G(N2,4)
      H(N2,6) = -0.5/KX* G(N2,3)
      H(N2,9) = -1./3./KX2 *G(N2,9)
      H(N2,10)= -1./3./KX2 *G(N2,10)
      H(N2,11)= 1./Q7 * G(N2,11)
      H(N2,12)= 1./Q7 * G(N2,12)
      HA(N2,1) = KX*H(N2,10)/R +KY *H(N2,12)/R
      HA(N2,3) = -KX*H(N2, 4)/R +H(N2,5)/R
      HA(N2,4) = KX*H(N2,3)/R +H(N2,6)/R
      HA(N2,5) = -KX * H(N2,6)/R
      HA(N2,6) = KX*H(N2,5)/R
      HA(N2,9) = -2.*KX *H(N2,10)/R
      HA(N2,10)= 2.*KX *H(N2,9)/R
      HA(N2,11)= -2.*KY *H(N2,12)/R
      HA(N2,12)= 2.*KY *H(N2,11)/R
  161 CONTINUE
      IF (NORDER.EQ.2)  GO TO 245
      DO 163   N3=13,31
      H(N3, 1) = 1./KX2 *G(N3, 1) +2./3./KX2 * G(N3, 9) - 2.*KY2/KX2/
     1Q7 * G(N3,11) -2./9./KX3 *G(N3,14) -2.*KY/Q72 * G(N3,16)
      H(N3, 2) = 1./KX2 * G(N3, 2) + 2./3./KX2 *G(N3,13) -2.*KY2/KX2/
     1Q7 *G(N3,15)
      H(N3, 3) = -1./KX3 *G(N3, 2) + 0.5/KX2 *G(N3,3) -0.25/KX3 *G(N3,6)
     1 +1./3./KX2 * G(N3,10) -KY/KX/Q7 * G(N3,12) -2./9./KX3 * G(N3,13)+
     22.*KY2*(2.*KX2+Q7)/KX3/Q72 *G(N3,15) +3./8./KX2 *G(N3,17) -KY2/
     34./KX2/Q5 *G(N3,19) -KY/4./KX/Q5 *G(N3,22)
      H(N3, 4) = -H(N3, 1)
      H(N3, 5) = 0.5/KX *G(N3, 4) +0.25/KX2 *G(N3, 5) + 0.125/KX *G(N3,
     118) +0.25/KX *G(N3,21)
      H(N3, 6) = -0.5/KX * G(N3, 3) +0.25/KX2 *G(N3, 6) -3./8./KX *G(N3,
     117) - 0.25/KX * G(N3,19)
      H(N3, 9) = -1./3./KX2 * G(N3, 9) +4./9./KX3 * G(N3,14)
      H(N3,10) = -1./3./KX2 * G(N3,10) - 4./9./KX3 *G(N3,13)
      H(N3,11) = 1./Q7 * G(N3,11) + 4.*KY/Q72 * G(N3,16)
      H(N3,12) = 1./Q7 * G(N3,12) - 4.*KY/Q72 * G(N3,15)
      H(N3, 7) = 0.25/KX * G(N3, 6)
      H(N3, 8) = -0.25/KX* G(N3, 5)
      H(N3,13) = -1./3./KX2 *G(N3,13)
      H(N3,14) = -1./3./KX2 * G(N3,14)
      H(N3,15) = 1./Q7 * G(N3,15)
      H(N3,16) = 1./Q7 * G(N3,16)
      H(N3,17) = -1./8./KX2 *G(N3,17)
      H(N3,18) = -1./8./KX2 *G(N3,18)
      H(N3,19) = 0.25/Q5 *G(N3,19) + 0.25 *KX/KY/Q5 *G(N3,22)
      H(N3,20) = 0.25/Q5 *G(N3,20)  - 0.25*KX/KY/Q5 *G(N3,21)
      H(N3,21) = -0.25*KX/KY/Q5 *G(N3,20) +0.25/Q5 *G(N3,21)
      H(N3,22) = 0.25*KX/KY/Q5 *G(N3,19) +0.25/Q5 * G(N3,22)
      HA(N3, 1) = ( H(N3, 2) +KX* H(N3,10) +KY* H(N3,12) )/R
      HA(N3, 2) = ( KX* H(N3,14) + KY*H(N3,16) )/R
      HA(N3, 3) = ( -KX* H(N3, 4) +H(N3, 5) +2.*KX* H(N3,18) + KY*H(N3,
     120) )/R
      HA(N3, 4) = ( KX* H(N3, 3) + H(N3, 6) +KY * H(N3,22) )/R
      HA(N3, 5) = ( -KX * H(N3, 6) +2. * H(N3, 7) )/R
      HA(N3, 6) = ( KX * H(N3, 5) +2.*H(N3, 8) )/R
      HA(N3, 9) = ( -2.*KX *H(N3,10) +H(N3,13) )/R
      HA(N3,10) = ( 2.*KX *H(N3, 9) +H(N3,14))/R
      HA(N3,11) = (-2.*KY *H(N3,12) +H(N3,15))/R
      HA(N3,12) = ( 2.*KY*H(N3,11) + H(N3,16) )/R
      HA(N3, 7) = -KX * H(N3, 8) /R
      HA(N3, 8) = KX * H(N3, 7)/R
      HA(N3,13) = -2.*KX * H(N3,14)/R
      HA(N3,14) = 2.*KX * H(N3,13)/R
      HA(N3,15) = -2.*KY * H(N3,16)/R
      HA(N3,16) = 2. *KY * H(N3,15)/R
      HA(N3,17) = -3.*KX * H(N3,18)/R
      HA(N3,18) = 3.*KX *H(N3,17)/R
      HA(N3,19) = (-2.*KY*H(N3,20)-KX*H(N3,21))/R
      HA(N3,20) = ( 2.*KY*H(N3,19) -KX*H(N3,22) )/R
      HA(N3,21) = ( KX* H(N3,19) -2.* KY*H(N3,22))/R
      HA(N3,22) = ( KX* H(N3,20) + 2.*KY *H(N3,21))/R
  163 CONTINUE
  245 CONTINUE
      DO  404  I=1,8
      DO  404  J=1,8
      GY(I,J) = 0.0
      HY(I,J) = 0.0
      HB(I,J) = 0.0
      HN(I,J) = 0.0
  404 CONTINUE
      GY( 3, 5) = 2. *KX*KY/R
      GY( 3, 8) = -(3.*KX2 + 2.*Q1) /R
      GY( 4, 6) = R * GY( 3, 8)/KX
      GY( 4, 7) = -2. *KY
      GY( 5, 2) = -(KX2 +1. +2.*Q1/KX2)
      GY( 5, 5) = -2. *KY/KX
      GY( 5, 8) = -GY(3, 8) /KX2*R
      GY( 6, 6) = -2. * KX
      GY( 6, 7) = GY( 3, 8) /KY *R
      GY( 7, 5) = R *GY( 3, 8) /KX/KY*R
      GY(7, 8) = 2. * R
      GY(8, 1) = R *GY( 5, 2) /KY
      GY(8, 6) = 2. *R /KX
      GY(8, 7) = -R*R*GY( 3, 8) / (KX2*KY)
      HB(3,7) = KY/R2
      HB(4,5) = KY/R/KX
      HB(5,1) = KY/R/KX2
      HB(5,7) = -KY/R/KX2
      HB(6,8) = -1./R
      HB(7,6) = -1./KX
      HB(8,2) = -1./KX2
      HB(8,8) = 1./KX2
      DO  405  I=1,8
      DO  405  J=1,8
      HN(I,J) = HB(I,J)
  405 CONTINUE
      DO  406  I=1,8
      DO  406  J=1,8
      HB(I,J) = 0.0
  406 CONTINUE
      DO 162   NY=3,8
      YDEL6=0.
      IF (NY.EQ.6) YDEL6=1.
      HY(NY,1)= 0.5/KY2 *GY(NY,1) + Q6/KX/KY/Q7*GY(NY,6) -1./Q7*GY(NY,
     17)+ 1./KY * YDEL6
      HY(NY,2) = 2.*KY/KX/Q7*GY(NY,5) +1./Q7*GY(NY,8)
      HY(NY,3) = 0.5/KY *GY(NY,2)
      HY(NY,4) = -0.5/KY *GY(NY,1)
      HY(NY,5) = -1./Q7 *GY(NY,5)-2.*KY/KX/Q7 *GY(NY,8)
      HY(NY,6) = -1./Q7 *GY(NY,6) + 2.*KY/KX/Q7 *GY(NY,7)
      HY(NY,7) = 2.*KY/KX/Q7 *GY(NY,6) -1./Q7 *GY(NY,7)
      HY(NY,8) = -HY(NY,2)
      HB(NY,1) = -KY * HY(NY,2)/R + HY(NY,3)/R
      HB(NY,2) = KY * HY(NY,1)/R + HY(NY,4)/R
      HB(NY,3) = -KY* HY(NY,4)/R
      HB(NY,4) = KY *HY(NY,3)/R
      HB(NY,6) = KY*HY(NY,5)/R -KX*HY(NY,8)/R
      HB(NY,7) = KX *HY(NY,5)/R -KY*HY(NY,8)/R
      HB(NY,8) = KX*HY(NY,6)/R + KY*HY(NY,7)/R
      HB(NY,5) = -KY *HY(NY,6)/R - KX *HY(NY,7)/R
  162 CONTINUE
      DO  407  I=1,8
      DO  407  J=1,8
      HB(I,J) = HB(I,J) + HN(I,J)
  407 CONTINUE
      FY(1) = SY
      FY(2) = CY
      FY(3) = SY*W
      FY(4) = CY*W
      FY(5) = SX*SY
      FY(6) = SX*CY
      FY(7) = CX*SY
      FY(8) = CX*CY
      DO 198 I= 3,8
      DO 198 J=1,8
      B(1,I+31) = B(1,I+31) +HY(I,J)*FY(J)
      B(2,I+31) = B(2,I+31) +HB(I,J)*FY(J)
  198 CONTINUE
      DO  403  I=4,II
      DO  403  J=1,JJ
      HA(I,J) = HA(I,J) + HJ(I,J)
  403 CONTINUE
      F(1) = 1.
      F(2) = W
      F(3) = SX
      F(4) = CX
      F(5) = SX*W
      F(6) = CX*W
      F(7) = SX *W *W
      F(8) = CX *W *W
      F(9) = SX *SX
      F(10)= SX *CX
      F(11)= SY *SY
      F(12)= SY *CY
      F(13)= SX *SX*W
      F(14)= SX *CX*W
      F(15)= SY *SY*W
      F(16)= SY *CY*W
      F(17)= SX*SX*SX
      F(18)= SX*SX*CX
      F(19)= SX*SY*SY
      F(20)= SX*SY*CY
      F(21)= CX*SY*SY
      F(22)= CX*SY*CY
      DO  188  I=4,II
      DO  188  J=1,JJ
      B(1,I) = B(1,I) + H(I,J)*F(J)
      B(2,I) = B(2,I) +HA(I,J)*F(J)
  188 CONTINUE
 3355 CALL PRDCT(A, B, NGROUP, 2, NORDER)
      RETURN
      END
C
C
      SUBROUTINE MAGZER(AM,WM)
C
C
C     MATRIX FOR A MAGNETIC SECTOR WITH UNIFORM FIELD DISTRIBUTION.
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2,59)
      COMMON/BLOCK3/ NGROUP, NORDER
C
      AM2 = AM*AM
      W = WM*3.14159625/180.0
      SR = SIN(W)
      CR = COS(W)
      SR2 = SR*SR
      CR2 = CR*CR
      SRCR = SR*CR
      CALL UNIT(B, 1)
      B(1,1) =  CR
      B(1,2) = (SR)*AM
      B(1,3) = (1.-CR)*AM
      B(2,1) = (-SR)/AM
      B(2,2) = CR
      B(2,3) =  SR
      B(1,33) = W*AM
      IF ( NORDER .EQ. 1)  GO TO 3355
      B(1,4) = (-SR2  )/AM*0.5
      B(1,5) =  SRCR
      B(1,6) = SR2
      B(1,7) = (0.5*CR -0.5*CR2  )*AM
      B(1,8) = (SR -SRCR )*AM
      B(1,9) = (-0.5*SR2  )*AM
      B(1,12) =(-0.5*(1.-CR))*AM
      B(2,6) = SR/AM
      B(2,7) = -0.5*SR
      B(2,9) =  -SR
      B(2,12) =  -0.5*SR
      B(1,37) =  SR
      B(1,38) = (1.-CR)*AM
      B(1,39) =  (W -SR)*AM
      IF ( NORDER .EQ. 2) GO TO 3355
      AM3 = AM2*AM
      SR3 = SR2*SR
      B(1,15) = (0.5*SR2  )/AM
      B(1,16) =  -0.5*SR2
      B(1,18) =  -SR2
      B(1,21) =  -0.5*SR2
      B(1,22) = 0.5*(-SR +SRCR )*AM
      B(1,23) = (0.5*CR -0.5*CR2   +0.5*SR2  )*AM
      B(1,27) = (-0.5*SR +0.5*SRCR )*AM
      B(1,28) = (0.5*SR2  )*AM
      B(1,31) = (0.5*CR -0.5*CR2 )*AM
      B(2,13) = (-0.5*SR3  )/AM3
      B(2,14) = (1.5*SR2  *CR)/AM2
      B(2,15) = (1.5*SR3  )/AM2
      B(2,16) = -1.5*SR*CR2  /AM
      B(2,17) =(-3.*SR2  *CR)/AM
      B(2,18) = (-1.5*SR3   -SR)/AM
      B(2,21) = (-0.5*SR )/AM
      B(2,22) = -0.5*SR*SRCR
      B(2,23) =  1.5*SR*CR2
      B(2,24) =  1.5*SR2  *CR
      B(2,28) =  SR +0.5*SR3
      B(2,31) =  0.5*SR
 3355 CALL PRDCT(A, B, NGROUP, 1, NORDER)
      RETURN
      END
C
C
      SUBROUTINE MAGNRM(AM, WM, N1, N2, N3)
C
C
C     MATRIX FOR MAGNETIC SECTOR WITH INHOMOGENEOUS FIELD DISTRIBUTION.
C     BY IN THE MEDIAN PLANE IS ASSUMED TO BE EXPANDED IN X AS
C
C        BY(X, 0) = B0*(1.0 + N1*X + N2*X**2 + N3*X**3 + ...).
C
C
      COMMON/BLOCK1/ A(2,59), DANGL(2), DSHFT(2)
      COMMON/BLOCK2/ B(2,59)
      COMMON/BLOCK3/ NGROUP, NORDER
      REAL N1, N2, N3, K, L, M, K2, N22
C
      P = SQRT(1.+N1)
      IF (ABS(N1) .LE.0.00000001)  N1=-0.00000001
      Q = SQRT(-N1)
      K = -0.5*(1.+3.*N1+2.*N2)
      L = 0.5+1./3.*N1 +0.5*N1*N1 -5./3.*N2 -N3
      M = -0.5*N1*(1.+N1) +2.*N2 +3.*N3
      F = 1. + 2.*N1
      G = 1. + 3.*N1
      H = 1. + 5.*N1
      IF(ABS(F).LT.1.0E-5) F=1.0E-5
      IF(ABS(G).LT.1.0E-5) G=1.0E-5
      IF(ABS(H).LT.1.0E-5) H=1.0E-5
      W = WM*3.14159265/180.0
      SR =SIN(P*W)
      CR =COS(P*W)
      SZ =SIN(Q*W)
      CZ =COS(Q*W)
      P2 = P*P
      P3 = P2*P
      P4 = P3*P
      P5 = P4*P
      P6 = P5*P
      P7 = P6*P
      P8 = P7*P
      P9 = P8*P
      P10= P9*P
      K2=K*K
      Q2 = Q*Q
      Q3 = Q2*Q
      Q4 = Q3*Q
      AM2 =AM*AM
      AM3 =AM2*AM
      SR2 =SR*SR
      SR3 =SR2*SR
      SZ2 =SZ*SZ
      N22=N2*N2
      H2 =H*H
      CALL UNIT(B, 1)
      B(1,1) = CR
      B(1,2) = SR/P *AM
      B(1,3) = (1.-CR)/P2 *AM
      B(2,1) = -P*SR /AM
      B(2,2) = CR
      B(2,3) = SR/P
      B(1,32)= CZ
      B(1,33)= SZ/Q *AM
      B(2,32)= -Q*SZ /AM
      B(2,33)= CZ
      IF (ABS(N1).LT.0.00000001)   B(1,33)=W*AM
      IF ( NORDER .EQ. 1)  GO TO 3355
      B(1,4) =((1./6.+K/3./P2)*(1.-CR) + (-1./3. + K/3./P2)*SR2)/AM
      B(1,5) = (1./3./P + 2.*K/3./P3)*SR +(2./3./P -2.*K/3./P3)*SR*CR
      B(1,6) = (-1./3./P2 -2.*K/3./P4)*(1.-CR) +(0.5*P +K/P3)*SR*W +
     1(2./3./P2 -2.*K/3./P4)*SR2
      B(1,7) =((-1./6./P2 +2.*K/3./P4)*(1.-CR) + (1./3./P2 -K/3./P4)*
     1SR2) *AM
      B(1,8) =((0.5/P + 2./3./P3 +K/3./P5)*SR + (-0.5-K/P4)*CR*W +
     1(-2./3./P3 +2.*K/3./P5)*SR*CR )*AM
      B(1,9) =((2./3./P4 + 4.*K/3./P6)*(1.-CR)+ (-0.5/P-K/P5)*SR*W +
     1(-1./3./P4 + K/3./P6) * SR2 )*AM
      B(1,10) =((-Q2/2./P2 + G*N2/H/P2)*(1.-CR) + (-N2/H)*SZ2 )/AM
      B(1,11) = (-2.*N2/H/P)*SR + 2.*N2/H/Q*SZ*CZ
      B(1,12) =((-0.5/P2 -2.*N2/H/P2)*(1.-CR) + N2/H/Q2 *SZ2 )*AM
      B(2,4) = ((P/6. +K/3./P)*(SR + 2.*SR*CR))/AM2
      B(2,5) =  (-1./3.-2.*K/3./P2)*(1.-CR-2.*SR2) /AM
      B(2,6) = ((0.5*P +2./3./P +K/3./P3)*SR +(0.5*P2+K/P2)*CR*W +
     1(-2./3./P -4.*K/3./P3)*SR*CR )/AM
      B(2,7) =  (-1./6./P +2.*K/3./P3)*SR + (-1./3./P -2.*K/3./P3)*SR*
     1CR
      B(2,8) =  (1./3./P2 +2.*K/3./P4)*(1.-CR-2.*SR2) +(0.5*P+K/P3)*
     1SR*W
      B(2,9) =  (-0.5/P-1./3./P3+K/3./P5)*SR +(-0.5-K/P4)*CR*W +(1./3./
     1P3+2.*K/3./P5)*SR*CR
      B(2,10) = ((-0.5*Q2/P + G*N2/H/P)*SR   -2.*Q*N2/H*SZ*CZ )/AM2
      B(2,11) =  2.*N2/H*(1.-CR -2.*SZ2) /AM
      B(2,12) =  (-0.5/P -2.*N2/H/P)*SR +2.*N2/H/Q*SZ*CZ
      B(1,34)= (2.*N2/H*CZ*(1.-CR)+(-Q/P -4.*Q*N2/H/P)*SR*SZ )/AM
      B(1,35)=  (-Q/P2+2.*G*N2/H/P2/Q)*SZ  -2.*N2/H/P *SR*CZ +(Q/P2+
     14.*Q*N2/H/P2)*CR*SZ
      B(1,36)=  -2.*N2/H/P2 *CZ*(1.-CR) +(Q/2.-Q/P2+N2/P2/Q)*SZ*W +
     1(Q/P3+4.*Q*N2/H/P3)*SR*SZ
      B(1,37)=  -2.*N2/H/Q *SZ*(1.+CR) + (1./P+4.*N2/H/P)*SR*CZ
      B(1,38)= ((1./P2 +4.*N2/H/P2)*CZ*(1.-CR)   -2.*N2/H/P/Q*SR*SZ)*AM
      B(1,39)= ((0.5/Q +G*N2/H/P2/Q3)*SZ +(-0.5+1./P2-N2/P2/Q2)*CZ*W
     1-(1./P3 +4.*N2/H/P3)*SR*CZ + 2.*N2/H/P2/Q *  CR*SZ )*AM
      B(2,34)= (-2.*Q*N2/H *SZ*(1.+CR) +(-Q2/P+2.*G*N2/H/P)*SR*CZ )/AM2
      B(2,35)=((-Q2/P2+2.*G*N2/H/P2)*CZ*(1.-CR)  -2.*Q*N2/H/P*SR*SZ)/AM
      B(2,36)= ((0.5*Q+G*N2/H/P2/Q)*SZ +(0.5*Q2-Q2/P2+N2/P2)*CZ*W +
     1(Q2/P3-2.*G*N2/H/P3)*SR*CZ +2.*Q*N2/H/P2* CR*SZ )/AM
      B(2,37)= (-2.*N2/H*CZ*(1.-CR)+(-Q/P+2.*G*N2/H/P/Q)*SR*SZ)/AM
      B(2,38)=  (-Q/P2-4.*Q*N2/H/P2)*SZ + 2.*N2/H/P*SR*CZ +(Q/P2-2.*G*
     1N2/H/P2/Q) *CR*SZ
      B(2,39)=  2.*N2/H/P2*CZ*(  1.-CR)+(0.5*Q-Q/P2+N2/P2/Q)*SZ*W +
     1(Q/P3-2.*G*N2/H/P3/Q)*SR*SZ
      IF ( NORDER .EQ. 2)  GO TO 3355
      B(1,13) = ((-2./9.+Q2/3./P2-N2/3./P2-5.*K/9./P2-2.*K2/9./P4)*
     1(1.-CR) +(-3.*P3/8.+P/24.-K/12./P+5.*K2/12./P3+3.*L/8./P)*SR*W+
     2(1./9.+K/9./P2-2.*K2/9./P4)*SR2 + (P2/8.-1./24.+K/4./P2-K2/12./
     3P4+L/8./P2)*SR2*CR )/AM2
      B(1,14) = ((-3.*P/8.-5./72./P-7.*K/36./P3+23.*K2/36./P5+3.*L/8./
     1P3)*SR + (3.*P2/8.-1./24.+K/12./P2-5.*K2/12./P4-3.*L/8./P2)*CR*
     2W + (1./9./P+K/9./P3-2.*K2/9./P5)*SR*CR + (3.*P/8.-1./8./P+3.*K/
     34./P3-K2/4./P5 +3.*L/8./P3)*SR3 )/AM
      B(1,15) = ((-1./3./P2+N2/3./P2+K/3./P2+2.*K/3./P4+4.*K2/3./P6+L/
     1P4)*(1.-CR) + (25.*P/24.-1./8./P-K/6./P+K/12./P3-19.*K2/12./P5-
     29.*L/8./P3)*SR*W + (-1./3./P2+N2/3./P2+K/3./P2-K/3./P4+4.*K2/3./
     3P6+L/P4)*SR2 +(P/3.-K/3./P+2.*K/3./P3-2.*K2/3./P5)*SR*CR*W  +(-3.
     4/8.+1./8./P2-3.*K/4./P4+K2/4./P6-3. *L/8./P4)*SR2*CR )/AM
      B(1,16) =  (-1./18./P2+K/9./P4+4.*K2/9./P6)*(1.-CR) + (-3.*P/8.+
     11./24./P-K/12./P3+5.*K2/12./P5+3.*L/8./P3)*SR*W + (1./9./P2+7.*
     2K/9./P4-8.*K2/9./P6)*SR2 + (-3./8.+1./8./P2-3.*K/4./P4+K2/4./P6-
     33.*L/8./P4)*SR2*CR
      B(1,17) =  (-1./3.+K/3./P2-2.*K/3./P4+2.*K2/3./P6)*W*(1.-2. *SR2)
     1+ (11./12./P-19./36./P3+2.*N2/3./P3+K/P3+25.*K/18./P5+13.*K2/18./
     2P7+5.*L/4./P5)*SR + (-11./12.+1./12./P2-K/3./P2-K/2./P4+K2/6./P6+
     33.*L/4./P4)*CR*W + (1./3./P+4./9./P3-2.*N2/3./P3-K/P3-2.*K/9./P5-
     414.*K2/9./P7-2.*L/P5)*SR*CR +(-3./4./P +1./4./P3-3.*K/2./P5+K2/
     52./P7 -3.*L/4./P5)*SR3
      B(1,18) =  (2./3./P4-2.*N2/3./P4-2.*K/3./P4-4.*K/3./P6-8.*K2/3./
     1P8-2.*L/P6)*(1.-CR) + (-3.*P/8.-5./24./P-7./8./P3+N2/P3+5.*K/6./
     2P3+7.*K/12./P5+41.*K2/12./P7+21.*L/8./P5)*SR*W + (2./3./P4-2.*N2
     3/3./P4-2.*K/3./P4+2.*K/3./P6-8.*K2/3./P8-2.*L/P6)*SR2 + (-2./3./
     4P+2.*K/3./P3-4.*K/3./P5+4.*K2/3./P7)*SR*CR*W + (-P2/8.-K/2./P2-
     5K2/2./P6)*CR*W*W + (3./8./P2-1./8./P4+3.*K/4./P6-K2/4./P8+3.*L/
     68./P6)*SR2*CR
      B(1,19) = ((Q2/6./P2+N2/P2*(1.-4.*G/3./H)+Q2*K/3./P4 +4.*G*N22/
     1H2/P2-2.*G*N2*K/3./H/P4)*(1.-CR) + (-P*Q2/4.-N22/H/P+N2*K/2./P3-
     2Q2*K/2./P3+M*0.25/P)*SR*W + (-Q2/3./P2+2.*G*N2/3./H/P2+Q2*K/3./
     3P4-2.*G*N2*K/3./H/P4)*SR2 +(-4.*N22/H2)*SZ2 + (-P*Q3/4./F+Q*(1.+
     43.*Q2)/2./F/H/P*N2-(1.+Q2)/F/H/P/Q*N22+P*N2*K/2./F/H/Q+P*M/4./F/
     5Q)*SR*SZ*CZ + (P2*Q2/4./F-(1.+3.*Q2)*0.5/F/H*N2+3.*N22/F/H-N2*K*
     60.5/F/H-M/4./F)*CR*SZ2 ) /AM2
      B(1,20) = ((P*Q2*0.5/F+(1.-17.*Q2)/3./F/H/P*N2+6.*N22/F/H/P-N2*
     1K/F/H/P-4.*N2*K/3./H/P3-M/2./F/P)*SR + (-4.*N2/3./H/P+4.*N2*K/
     23./H/P3)*SR*CR + (-P*Q2*0.5/F+(1.+3.*Q2)/F/H/P*N2-2.*(1. +Q2)/
     3F/H/P/Q2*N22+P*N2*K/F/H/Q2+P*M*0.5/F/Q2)*SR*SZ2 + (-P2*Q*0.5/F+
     4(1.+3.*Q2)/F/H/Q*N2-6.*N22/F/H/Q+N2*K/F/H/Q+M/2./F/Q)*CR*SZ*CZ)/AM
      B(1,21) =  (1./6./P2+8.*N2/3./H/P2+8.*N22/H2/P2+K/3./P4+4.*N2*K/
     13./H/P4)*(1.-CR) + (-P/4.-N22/H/P/Q2-K*0.5/P3+N2*K*0.5/P3/Q2+M/
     24./P/Q2)*SR*W + (-1./3./P2-4.*N2/3./H/P2+K/3./P4+4.*N2*K/3./H/P4)
     3*SR2 -4.*N22/H2/Q2*SZ2 + (P*Q/4./F -(1.+3.*Q2)*0.5/F/H/P/Q*N2 +
     4(1.+Q2)/F/H/P/Q3*N22-P*N2*K*0.5/F/H/Q3-P*M/4./F/Q3)*SR*SZ*CZ +
     5(-P2/4./F+(1.+3.*Q2)*0.5/F/H/Q2*N2-3.*N22/F/H/Q2+N2*K*0.5/F/H/Q2
     6+M/4./F/Q2)*CR*SZ2
      B(1,22) = ((-3./8./P-5./72./P3+17.*K/36./P5-K2/36./P7+3.*L/8./P5)
     1*SR + (3./8.-1./24./P2+K/12./P4-5.*K2/12./P6-3.*L/8./P4)*CR*W +
     2(1./9./P3-5.*K/9./P5+4.*K2/9./P7)*SR*CR + (-1./8./P+1./24./P3-K/
     34./P5+K2/12./P7-L/8./P5)*SR3 )*AM
      B(1,23) = ((-1./6./P2-7./9./P4+2.*N2/3./P4+4.*K/3./P4+8.*K/9./P6
     1+20.*K2/9./P8+2.*L/P6)*(1.-CR) + (11./24./P-1./24./P3-K/3./P3+K/
     24./P5-13.*K2/12./P7-3.*L/8./P5)*SR*W + (1./3./P2+5./9./P4-N2/3./
     3P4-2.*K/3./P4-7.*K/9./P6-4.*K2/9./P8-L/P6)*SR2 + (-1./3./P+K/3./
     4P3-2.*K/3./P5+2.*K2/3./P7)*SR*CR*W + (3./8./P2-1./8./P4+3.*K/4./
     5P6-K2/4./P8+3.*L/8./P6)*SR2*CR ) *AM
      B(1,24) = ((1./3./P2-K/3./P4+2.*K/3./P6-2.*K2/3./P8)*W*(1.-2.*SR
     12) + (-1./8./P+17./24./P3-5./72./P5+N2/3./P5+K/2./P5+23.*K/36./
     2P7+17.*K2/36./P9-L/8./P7) *SR + (1./8.-17./24./P2+23./24./P4-N2/
     3P4-7.*K/6./P4-13.*K/12./P6-9.*K2/4./P8-15.*L/8./P6)*CR*W + (-P/8.
     4-K*0.5/P3-0.5*K2/P7)*SR*W*W + (-1./3./P3-8./9./P5+2.*N2/3./P5+K/
     5P5-2.*K/9./P7+22.*K2/9./P9+2.*L/P7)*SR*CR + (3./8./P3-1./8./P5+
     63.*K/4./P7-K2/4./P9+3.*L/8./P7)*SR3  )*AM
      B(1,25) = ((-P*Q2/4./F-Q2/3./P3+Q2*N2/F/H/P-Q2*N2*0.5/F/P3+2.*N2/
     13./H/P3-Q2*K/6./P5-(1.+P2)/F/H/P3*N22-4.*G*N22/H2/P3+N2*K*0.5/F/
     2H/P-(1.+3.*Q2)/6./H/P5*N2*K+M/4./F/P+M/4./P3)*SR + (Q2/4.+N22/H/
     3P2+Q2*K*0.5/P4-0.5*N2*K/P4-M/4./P2)*CR*W + (Q2/3./P3-2.*G*N2/3./
     4H/P3-Q2*K/3./P5+2.*G*N2*K/3./H/P5)*SR*CR +(-2.*Q*N2/H/P2+4.*G*N22
     5/H2/P2/Q)*SZ*CZ + (P*Q2/4./F-(1.+3.*Q2)*0.5/F/H/P*N2+3.*N22/F/H/
     6P-N2*K*0.5/F/H/P-M/4./F/P)*SR*SZ2 + (Q3/4./F-Q*(1.+3.*Q2)*0.5/F/
     7H/P2*N2+(1.+Q2)/F/H/P2/Q*N22-N2*K*0.5/F/H/Q-M/4./F/Q)*CR*SZ*CZ)/AM
      B(1,26) =  (2.*N2/3./H/P2-8.*N2*K/3./H/P4)*(1.-CR) + (-4.*N2/3./
     1H/P2+4.*N2*K/3./H/P4)*SR2 + (-4.*N2/H/P2+4.*N22/H/P2/Q2)*SZ2 +
     2(-0.5*P*Q/F+(1.+3.*Q2)/F/H/P/Q*N2-6.*N22/F/H/P/Q+N2*K/F/H/P/Q+
     3M*0.5/F/P/Q)*SR*SZ*CZ + (0.5*Q2/F-(1.+3.*Q2)/F/H/P2*N2 +2.*(1.+
     4Q2)/F/H/P2/Q2*N22-N2*K/F/H/Q2-M*0.5/F/Q2)*CR*SZ2
      B(1,27) = ((-G/4./F/P-1./3./P3-N2/H/P*(4./3./P2+2.5/F)-(4.+P2)/
     1F/H2/P3*N22 -K/6./P5+(-7.*P2+4.*Q2)/6./F/H/P5*N2*K-M/4./F/P3)*SR
     2+(0.25+N22/H/P2/Q2+0.5*K/P4-0.5*N2*K/P4/Q2-M/4./P2/Q2)*CR*W +
     3(1./3./P3+4.*N2/3./H/P3-K/3./P5-4.*N2*K/3./H/P5)*SR*CR + (2.*N2/
     4H/P2/Q+8.*N22/H2/P2/Q)*SZ*CZ + (-P/4./F+(1.+3.*Q2)*0.5/F/H/P/Q2*
     5N2-3.*N22/F/H/P/Q2+N2*K*0.5/F/H/P/Q2+M/4./F/P/Q2)*SR*SZ2 + (-Q/
     64./F+(1.+3.*Q2)*0.5/F/H/P2/Q*N2-(1.+Q2)/F/H/P2/Q3*N22+0.5*N2*K/
     7F/H/Q3+M/4./F/Q3)*CR*SZ*CZ )*AM
      B(1,28) = ((1./P4-10./9./P6+4.*N2/3./P6+4.*K/3./P6+20.*K/9./P8+
     132.*K2/9./P10+2.*L/P8)*(1.-CR) +(3./8./P-17./24./P3+23./24./P5-
     2N2/P5-7.*K/6./P5-13.*K/12./P7-13.*K2/4./P9-15.*L/8./P7)*SR*W +
     3(1./8.+K*0.5/P4+K2*0.5/P8)*CR*W*W + (-4./9./P6+N2/3./P6+K/3./P6-
     44.*K/9./P8+14.*K2/9./P10+L/P8)*SR2 + (1./3./P3-K/3./P5+2.*K/3./
     5P7-2.*K2/3./P9)*SR*CR*W + (-1./8./P4+1./24./P6-K/4./P8+K2/12./
     6P10-L/8./P8)*SR2*CR )*AM
      B(1,29) = ((-2.*Q2/3./P4-G*Q2*0.5/H/P2+4.*Q2*N2/H2/P2+4.*G*N2/
     13./H/P4-8.*F*N22/H2/P4-4.*Q2*K/3./P6+4.*N2*K/3./H2/P6*(H2+F*P2)+
     2G*M/H/P4)*(1.-CR) + (Q2*0.5/P-0.5*G*N2/H/P+N22/H/P3+Q2*K/P5-N2*K
     3/P5*(0.5+G/H)-M/4./P3)*SR*W + (Q2/3./P4-2.*G*N2/3./H/P4-Q2*K/3./
     4P6+2.*G*N2*K/3./H/P6)*SR2 + (0.5*Q2/H-8.*Q2*N2/H2/P2+12.*N22/H2/
     5P2-2.*N2*K/H2/P2-M/H/P2)*SZ2 + (Q*(P2-2.)/H/P2*N2+2.*N22/H/P2/Q)
     6*SZ*CZ*W  + (Q3/4./F/P-Q*(1.+3.*Q2)*0.5/F/H/P3*N2+(1.+Q2)/F/H/P3/
     7Q*N22-N2*K*0.5/F/H/P/Q-M/4./F/P/Q)*SR*SZ*CZ + (-Q2/4./F+(1.+3.*
     8Q2)*0.5/F/H/P2*N2 -3.*N22/F/H/P2 +N2*K*0.5/F/H/P2 +M/4./F/P2)*
     9CR*SZ2 )/AM
      B(1,30) =  ( (1.+Q2)/H/P2*N2 -2.*N22/H/P2/Q2)*W*(1.-2.*SZ2) +
     1( Q2/H/P-0.5*Q2/F/P +2.*Q2*(2.+P2)/F/H/P3*N2 -2.*(4.+P2)/3./H2/
     2P3*N2 +2.*(4.+P2)/F/H2/P3*N22 - 3.*N2*K/F/H2/P -2.*N2*K/3./H/P5
     3-3.*M/2./F/H/P )*SR + (N2/H +2.*N2*K/H/P4)*CR*W + (4.*N2/3./H/P3
     4-4.*N2*K/3./H/P5)*SR*CR + (-Q/H +N2/H/Q +16.*Q*N2/H2/P2 + 2.*
     5( P2-12.*Q2)/H2/P2/Q3*N22 + 4.*N2*K/H2/P2/Q +2.*M/H/P2/Q )*SZ*CZ
     6 +( Q2*0.5/F/P -(1.+3.*Q2)/F/H/P3*N2 + 2.*(1.+Q2)/F/H/P3/Q2*N22
     7 -N2*K/F/H/P/Q2 -M*0.5/F/P/Q2 )*SR*SZ2 + ( Q*0.5/F -(1.+3.*Q2)/
     8 F/H/P2/Q*N2 + 6.*N22/F/H/P2/Q -N2*K/F/H/P2/Q - M*0.5/F/P2/Q )*
     9 CR*SZ*CZ
      B(1,31) = (( -0.5/P2-2./3./P4+Q2/H/P2 -2.*N2/H/P2*(1.+2./H+4./3.
     1 /P2)+8.*N22/H2/P4 -4.*K/3./P6 -4.*(4.*H+3.*P2)/3./H2/P6*N2*K -
     2 2.*M/H/P4)*(1.-CR) + (0.5/P+N2/H/P +N22/H/P3/Q2 +K/P5 -(2.*H -
     3 P2)*0.5/H/P5/Q2*N2*K -M/4./P3/Q2)*SR*W + (1./3./P4 +4.*N2/3./H/
     4 P4 -K/3./P6 -4.*N2*K/3./H/P6 )*SR2 + (-0.5/H +N2/H/Q2 +8.*N2/H2
     5 /P2 +2.*(P2-6.*Q2)/H2/P2/Q4*N22 +2.*N2*K/H2/P2/Q2 +M/H/P2/Q2 )*
     6 SZ2 + (-N2/H/Q +2.*N2/H/P2/Q -2.*N22/H/P2/Q3)*SZ*CZ*W + (-Q/4./
     7 F/P + (1.+3.*Q2)*0.5/F/H/P3/Q*N2 -(1.+Q2)/F/H/P3/Q3*N22 + N2*K*
     8 0.5/H/P/Q3/F+M/4./F/P/Q3 )*SR*SZ*CZ )*AM
      B(1,31) = B(1,31) +((1./4./F-(1.+3.*Q2)*0.5/F/H/P2/Q2*N2 +3.*N22
     1 /F/H/P2/Q2 - N2*K*0.5/F/H/P2/Q2 -M/4./F/P2/Q2)*CR*SZ2 )*AM
      B(2,13) = ((-P3/8. -31.*P/72. +Q2/3./P -N2/3./P -17.*K/36./P +K2
     1 /36./P3 +5.*L/8./P)*SR + (-3.*P4/8. +P2/24.-K/12.+5.*K2/12./P2+
     2 3.*L/8.)*CR*W + (-P/9.-4.*K/9./P -4.*K2/9./P3)*SR*CR + (-3.*P3/
     3 8. +P/8. +K/4./P +K2/4./P3 -3.*L/8./P )*SR3 )/AM3
      B(2,14) = ((-1./18.-2.*K/9./P2 -2.*K2/9./P4)*(1.-CR-2.*SR2) +
     1 (-3.*P3/8. +P/24.-K/12./P +5.*K2/12./P3 +3.*L/8./P)*SR*W  +
     2 (9.*P2/8.-3./8.-3.*K/4./P2 -3.*K2/4./P4 +9.*L/8./P2)*SR2*CR)/AM2
      B(2,15) = ((-P2/6.-K/3.-K/3./P2-2.*K2/3./P4)*W*(1.-2.*SR2) +
     1 (7.*P/24. +1./8./P +N2/3./P +K/6./P -K/12./P3 +K2/4./P5 -7.*L/
     2 8./P3)*SR + (25.*P2/24.-1./8.-K/6. +K/12./P2 -19.*K2/12./P4 -9.
     3 *L/8./P2)*CR*W + (-P/6.-1./P +2.*N2/3./P +K/3./P +K/3./P3 +2.*
     4 K2/P5 +2.*L/P3)*SR*CR + (9.*P/8.-3./8./P -3.*K/4./P3 -3.*K2/4./
     5 P5 +9.*L/8./P3 )* SR3 )/AM2
      B(2,16) = ((-9.*P/8. +5./72./P +43.*K/36./P3 +49.*K2/36./P5 -3.*
     1 L/8./P3) *SR + (-3.*P2/8. +1./24.-K/12./P2 +5.*K2/12./P4 +3.*L/
     2 8./P2 )*CR*W + (-1./9./P -10.*K/9./P3 -16.*K2/9./P5)*SR*CR +
     3 (9.*P/8.-3./8./P -3.*K/4./P3 -3.*K2/4./P5 +9.*L/8./P3)* SR3 )/AM
      B(2,17) = ((10./9./P2 -2.*N2/3./P2 -2.*K/3./P2 +4.*K/9./P4 -8.*K2
     1 /9./P6 -2.*L/P4 )*(1.-CR-2.*SR2) + (11.*P/12. -1./12./P +K/3./P
     2 +K/2./P3 -K2/6./P5 -3.*L/4./P3 )*SR*W  + (-2.*P/3.-4.*K/3./P-4.
     3 *K/3./P3 - 8.*K2/3./P5 )* SR*CR*W + (-9./4. +3./4./P2 +3.*K/2./
     4 P4 +3.*K2/2./P6 -9.*L/4./P4 )*SR2*CR )/AM
      B(2,18) = ((1./3.+2.*K/3./P2 +2.*K/3./P4 +4.*K2/3./P6)*W*(1.-2.*
     1 SR2) + (-3.*P/8.+1./24./P -9./8./P3 +N2/3./P3 +K/6./P3 +5.*K/12.
     2 /P5 + K2/4./P7 +11.*L/8./P5 )* SR + (-5.*P2/8.-17./24.-7./8./P2
     3 +N2/P2 -K/6./P2 -5.*K/12./P4 + 29.*K2/12./P6 +21.*L/8./P4)*CR*W
     4 +( P3/8.+K*0.5/P +K2*0.5/P5)*SR*W*W + (1./3./P+2./P3-4.*N2/3./
     5 P3-2.*K/3./P3 -2.*K/3./P5 -4.*K2/P7 -4.*L/P5 )*SR*CR + (-9./8./
     6 P +3./8./P3 +3.*K/4./P5 +3.*K2 /4./P7 -9.*L/8./P5 )*SR3 )/AM
      B(2,19) = ((-P3*Q2/4./F -Q2/3./P +N2/P -G*N2/3./H/P + Q2*N2/F*
     1 (P/H-0.5/P) -N22/H/P*(1.+(1.+Q2)/F -4.*G/H) - Q2*K/6./P3 +(1.+
     2 Q2)/6./F/H/P*N2*K +N2*K/6./P3 + P*M/4./F +M/4./P )*SR + (-P2*Q2
     3 /4.-N22/H -Q2*K*0.5/P2 +N2*K*0.5/P2 +M/4.)*CR*W + (Q2/3./P -2.*
     4 G*N2/3./H/P +2.*Q2*K/3./P3 -4.*G*N2*K/3./H/P3 )*SR*CR -8.*Q*N22
     5 /H2*SZ*CZ + (-G*P*Q2/4./F -P*Q2*N2/F/H -G*N2*0.5/F/P -N22/F/P -
     6 P*N2*K*0.5/F/H -P*M/4./F )*SR*SZ2 + (P2*Q3/4./F + Q*(P2+2.*H) *
     7 0.5/F/H*N2 -N22/F/Q +G*N2*K*0.5/F/H/Q +G*M/4./F/Q )*CR*SZ*CZ)/AM3
      B(2,20) = ((2.*N2/3./H +4.*N2*K/3./H/P2)* (1.-CR-2.*SR2) + (G*P*
     1 Q*0.5/F +2.*P*Q*N2/F/H +G*N2/F/P/Q +2.*N22/F/P/Q +P*N2*K/F/Q/H+
     2 P*M*0.5/F/Q )*SR*SZ*CZ + ( P2*Q2*0.5/F +(P2+2.*H)/F/H*N2 -2.*N22
     3 /F/Q2 +G*N2*K/F/H/Q2 +G*M/2./F/Q2 )*CR*SZ2 )/AM2
      B(2,21) = ((-1./3./P -G*P/4./F -P*N2*0.5/F/H +2.*N2/3./F/P +N22/
     1 H/P*(8./H +3./F) -K/6./P3 - (H+6.*P2)/6./F/H/P3*N2*K -M/4./F/P)
     2 *SR +( -P2/4.-N22/H/Q2 -K/2./P2 +N2*K*0.5/P2/Q2 +M/4./Q2)*CR*W+
     3 ( 1./3./P +4.*N2/3./H/P +2.*K/3./P3 +8.*N2*K/3./H/P3)*SR*CR -8.
     4 *N22/H2/Q *SZ*CZ + ( G*P/4./F +P*N2/F/H +G*N2*0.5/F/P/Q2 +N22/
     5 F/P/Q2 +P*N2*K*0.5/F/H/Q2 +P*M/4./F/Q2 )*SR*SZ2 + ( -P2*Q/4./F-
     6 ( P2+2.*H)*0.5/F/H/Q*N2 +N22/F/Q3 - G*N2*K*0.5/F/H/Q3 -G*M/4./F
     7 /Q3 )*CR*SZ*CZ )/AM
      B(2,22) =  ( -1./18./P2 +K/9./P4 +4.*K2/9./P6 )*( 1.-CR-2.*SR2)+
     1 ( -3.*P/8. +1./24./P -K/12./P3 +5.*K2/12./P5 +3.*L/8./P3)*SR*W
     2 +( -3./8. +1./8./P2 +K/4./P4 +K2/4./P6 -3.*L/8./P4 )*SR2*CR
      B(2,23) =  ( 1./6. +K/3./P2 +K/3./P4 +2.*K2/3./P6)*W*(1.-2.*SR2)
     1 + ( 25./24./P -53./72./P3 +2.*N2/3./P3 +K/P3 -25.*K/36./P5 +23.
     2 *K2/36./P7 +19.*L/8./P5 )*SR + ( 11./24. -1./24./P2 -K/3./P2 +
     3 K/4./P4 -13.*K2/12./P6 -3.*L/8./P4 )*CR*W + ( -1./6./P + 7./9./
     4 P3 -2.*N2/3./P3 -K/P3 + K/9./P5 -2.*K2/9./P7 -2.*L/P5 )*SR*CR +
     5 ( -9./8./P + 3./8./P3 + 3.*K/4./P5 + 3.*K2/4./P7 -9.*L/8./P5)*SR3
      B(2,24) =  ( -8./9./P4 +2.*N2/3./P4 +2.*K/3./P4 + 4.*K/9./P6 +16.
     1 *K2/9./P8 +2.*L/P6 )*(1.-CR-2.*SR2) + ( -3.*P/8. +5./24./P -23.
     2 /24./P3 +N2/P3 +K/6./P3 +K/12./P5 +5.*K2/4./P7 +15.*L/8./P5 )*SR
     3 *W + ( -P2/8. -K*0.5/P2 -0.5*K2/P6 )*CR*W*W + ( 2./3./P +4.*K/
     4 3./P3 + 4.*K/3./P5 + 8.*K2/3./P7 )*SR*CR*W + ( 9./8./P2 -3./8./
     5 P4 -3.*K/4./P6 -3.*K2/4./P8 + 9.*L/8./P6 )* SR2*CR
      B(2,25) = (( -Q2/6./P2 +(2.*H-P2)/3./H/P2*N2 + 4.*G*N22/H2/P2 -
     1 Q2*K/3./P4 + 2.*G*N2*K/3./H/P4 )*(1.-CR) + ( -P*Q2/4.-N22/H/P -
     2 Q2*K*0.5/P3 +N2*K/2./P3 +M/4./P )* SR*W + ( Q2/3./P2 -2.*G*N2/
     3 3./H/P2 +2.*Q2*K/3./P4 -4.*G*N2*K/3./H/P4 )*SR2 + ( 4.*Q2*N2/H/
     4 P2 -8.*G*N22/H2/P2 )*SZ2 + ( P*Q3/4./F + Q*N2/F*( P*0.5/H +1./P)
     5 -N22/F/P/Q + G*N2*K*0.5/F/H/P/Q + G*M/4./F/P/Q )*SR*SZ*CZ +
     6 ( G*Q2/4./F +N2/F*(Q2/H +G*0.5/P2) +N22/F/P2 +N2*K*0.5/F/H +M/
     7 4./F )*CR*SZ2 )/AM2
      B(2,26) = (( -0.5*P*Q2/F +N2/F*(P/H -4./3./P) -6.*N22/F/H/P -N2*
     1 K/F/P *(2./3./P2 +1./H) +M*0.5/F/P )*SR + (4.*N2/3./H/P+8.*N2*K
     2 /3./H/P3 )*SR*CR + ( -8.*Q*N2/H/P2 + 8.*N22/H/P2/Q )*SZ*CZ +
     3 ( P*Q2*0.5/F +N2/F*(P/H +2./P) -2.*N22/F/P/Q2 +G*N2*K/F/H/P/Q2+
     4 G*M*0.5/F/P/Q2 )*SR*SZ2 + ( -0.5*G*Q/F -N2/F*(2.*Q/H +G/P2/Q) -
     5 2.*N22/F/P2/Q -N2*K/F/H/Q -M/F/Q*0.5 )*CR*SZ*CZ )/AM
      B(2,27) =  ( -1./6./P2 +4.*N2/3./H/P2 +8.*N22/H2/P2 -K/3./P4 -4.
     1 *N2*K/3./H/P4 )*( 1.-CR) + (-P/4.-N22/H/P/Q2 -K*0.5/P3 + N2*K *
     2 0.5/P3/Q2 +M/4./P/Q2 )*SR*W + ( 1./3./P2 +4.*N2/3./H/P2 +2.*K/
     3 3./P4 +8.*N2*K/3./H/P4 )*SR2 + (-4.*N2/H/P2 -16.*N22/H2/P2)*SZ2
     4 +( -P*Q/4./F-N2/F/Q *(P/2./H+1./P) +N22/F/P/Q3 -0.5*G*N2*K/F/H/
     5 P/Q3 -G*M/4./F/P/Q3 )*SR*SZ*CZ + ( -G/4./F -N2/F/H -0.5*G*N2/F/
     6 P2/Q2 -N22/F/P2/Q2 -0.5*N2*K/F/H/Q2 -M/4./F/Q2 )*CR*SZ2
      B(2,28) =  ( -1./6./P2-K/3./P4-K/3./P6 -2.*K2/3./P8 )*W*(1.-2.*
     1 SR2) + (3./8./P +13./24./P3 -5./72./P5 +N2/3./P5 +K/6./P5 -13.*
     2 K/36./P7 +17.*K2/36./P9 -L/8./P7 )*SR + ( 5./8.-5./24./P2 +23./
     3 24./P4 -N2/P4 -K/6./P4 -K/12./P6 -9.*K2/4./P8 -15.*L/8./P6)*CR*
     4 W +(-P/8.-0.5*K/P3 -0.5*K2/P7 )*SR*W*W + (-1./6./P3 -8./9./P5 +
     5 2.*N2/3./P5 +K/3./P5 +7.*K/9./P7 +22.*K2/9./P9 +2.*L/P7 )*SR*CR
     6 +( 3./8./P3 -1./8./P5 -K/4./P7 -K2/4./P9 +3.*L/8./P7 )*SR3
      B(2,29) = (( Q2*(P2-2.)/H/P2*N2 +2.*N22/H/P2 )*W*(1.-2.*SZ2) +
     1 ( Q2/3./P3 -3.*P*Q4/4./F/H +3.*P*Q2*N2/F/H2 -G*N2*0.5/H/P -2.*G
     2 *N2/3./H/P3 +Q2*N2*0.5/F/P3 -8.*F*N22/H2/P3 + (1.+P2)/F/H/P3*N22
     3 -Q2*K/3./P5 +2.*N2*K/3./H2/P -Q2*N2*K*0.5/F/H/P3 +16.*Q4*N2*K/
     4 3./H2/P5 -M/4./F/P -M/4./P3 + G*M/H/P3 )*SR + ( 0.5*Q2 -0.5*G*
     5 N2/H +N22/H/P2 +Q2*K/P4 -(2.*H+P2)*0.5/H/P4*N2*K -M/4./P2 )*CR
     6 *W +(-Q2/3./P3 +2.*G*N2/3./H/P3 -2.*Q2*K/3./P5 +4.*G*N2*K/3./H/
     7 P5 )*SR*CR +( Q3/H +Q*N2/H -16.*Q3*N2/H2/P2+2.*(1.+7.*Q2)/H2/P2/Q
     8 *N22 -4.*Q*N2*K/H2/P2 -2.*Q*M/H/P2 )*SZ*CZ +(G*Q2/4./F/P +N2/F/
     9 P*(Q2/H+G*0.5/P2)+N22/F/P3+0.5*N2*K/F/H/P +M/4./F/P)*SR*SZ2)/AM2
      B(2,29) = B(2,29) + ((-Q3/4./F-0.5*Q*(2.*H+P2)/F/H/P2*N2 +N22/F/
     1 P2/Q -0.5*G*N2*K/F/H/P2/Q -G*M/4./F/P2/Q )*CR*SZ*CZ ) /AM2
      B(2,30) = ((-Q2/H -2.*(P2-28.*Q2)/3./H2/P2*N2 -16.*N22/H2/P2 +8.
     1 *(1.+Q2)/3./H2/P4*N2*K +2.*M/H/P2) *(1.-CR) + (-P*N2/H -2.*N2*K
     2 /H/P3)*SR*W + (4.*N2/3./H/P2 +8.*N2*K/3./H/P4)*SR2 + ( 2.*Q2/H-
     3 32.*Q2*N2/H2/P2 +32.*N22/H2/P2 -8.*N2*K/H2/P2 -4.*M/H/P2 )*SZ2+
     4 (4.*Q*(P2-2.)/H/P2*N2 +8.*N22/H/P2/Q)*SZ*CZ*W + (-0.5*G*Q/F/P -
     5 2.*Q*N2/F/H/P -G*N2/F/P3/Q -2.*N22/F/P3/Q -N2*K/F/H/P/Q -0.5*M/
     6 F/P/Q )*SR*SZ*CZ + ( -0.5*Q2/F -(2.*H+P2)/F/H/P2*N2 +2.*N22/F/
     7 P2/Q2 -G*N2*K/F/H/P2/Q2 -0.5*G*M/F/P2/Q2 )*CR*SZ2 )/AM
      B(2,31) =  ( N2*(2.-P2)/H/P2 -2.*N22/H/P2/Q2) *W*(1.-2.*SZ2) +
     1 (1./3./P3 +3.*P*Q2/4./F/H -5.*P*N2/H2 +(4.+7.*P2)/6./F/H/P3*N2
     2 +(4.+P2)/F/H2/P3*N22 -K/3./P5 +N2*K*0.5/F/H/P3 -16.*F*N2*K/3./
     3 H2/P5 +M/P3*(1./4./F -2./H))*SR + (0.5 +N2/H + N22/H/P2/Q2 +K/
     4 P4 -(2.*H-P2)*0.5/H/P4/Q2*N2*K -M/4./P2/Q2)*CR*W + (-1./3./P3 -
     5 4.*N2/3./H/P3 -2.*K/3./P5 -8.*N2*K/3./H/P5 )*SR*CR + ( -Q/H +N2
     6 /H/Q +16.*Q*N2/H2/P2 +(2.*H-8.*Q2)/H2/P2/Q3*N22 +4.*N2*K/H2/P2/
     7 Q +2.*M/H/P2/Q )*SZ*CZ + ( -G/4./F/P -N2/F/H/P -G*N2*0.5/F/P3/
     8 Q2 -N22/F/P3/Q2 -0.5*N2*K/F/H/P/Q2 -M/4./F/P/Q2 )*SR*SZ2
      B(2,31) = B(2,31) +  (Q/4./F +(2.*H+P2)*0.5/F/H/P2/Q*N2 -N22/F/
     1 P2/Q3 +G*N2*K*0.5/F/H/P2/Q3 +G*M/4./F/P2/Q3 )*CR*SZ*CZ
 3355 CALL PRDCT(A, B, NGROUP, 1, NORDER)
      RETURN
      END
C
C
      SUBROUTINE PRDCT(A, B, NGRA, NGRB, NORDER)
C
C
C     MULTIPLY MATRIX B TO A AFTER ADJUSTING DISPERSION BASE OF B TO
C     MATCH THAT OF A.  THE DISPERSION BASIS OF A AND B ARE DENOTED BY
C     NGRA AND NGRB, RESPECTIVELY.  THE PRODUCT IS STORED IN A.
C
C
      DIMENSION A(2, 59), B(2, 59)
C
 1000 FORMAT(1H ,'****  MISMATCH OF DISPERSION BASE WAS ENCOUNTERED IN R
     1OUTINE PRDCT.  ****'/)
C
      IF(NGRA .EQ. NGRB) GO TO 10
      IF(NGRA .NE. 3)    GO TO 100
      CALL TRANS(B, NGRB, NORDER)
   10 CALL MULT(A, B, NGRA, NORDER)
      RETURN
C
  100 DO 20 I = 1, 5
   20 WRITE(6, 1000)
      STOP
      END
C
C
      SUBROUTINE TRANS(B, NGR, NORDER)
C
C
C     CONVERT REPRESENTATION OF THE B-MATRIX FOR NGROUP = NGR TO THAT
C     FOR NGROUP = 3.
C
C
      DIMENSION B(2, 59)
      COMMON/MWORK/ Q(2,59), R(2, 59)
C
      DO 10 I=1,2
      DO 10 K=1,39
   10 Q(I,K) = B(I,K)
      CALL UNIT(B, 3)
      GO TO (100, 200), NGR
C
C
C     NGR = 2
C
C
  200 DO 20 L = 1, 2
      B( L, 1) = Q( L, 1)
      B( L, 2) = Q( L, 2)
      B( L, 3) = 0.0
      B( L, 4) = Q( L, 3)
      B(L,50) = Q(L,32)
      B(L,51) = Q(L,33)
      IF( NORDER .EQ. 1 ) GO TO 20
      B( L, 5) = Q( L, 4)
      B( L, 6) = Q( L, 5)
      B( L, 7) = 0.0
      B( L, 8) = Q( L, 6)
      B( L, 9) = Q( L, 7)
      B( L,10) = 0.0
      B( L,11) = Q( L, 8)
      B( L,12) = 0.0
      B( L,13) = 0.0
      B( L,14) = Q( L, 9)
      B( L,15) = Q( L,10)
      B( L,16) = Q( L,11)
      B( L,17) = Q( L,12)
      B(L,52) = Q(L,34)
      B(L,53) = Q(L,35)
      B(L,54) = 0.0
      B(L,55) = Q(L,36)
      B(L,56) = Q(L,37)
      B(L,57) = Q(L,38)
      B(L,58) = 0.0
      B(L,59) = Q(L,39)
      IF( NORDER .EQ. 2 ) GO TO 20
      B( L,18) = Q( L,13)
      B( L,19) = Q( L,14)
      B( L,20) = 0.0
      B( L,21) = Q( L,15)
      B( L,22) = Q( L,16)
      B( L,23) = 0.0
      B( L,24) = Q( L,17)
      B( L,25) = 0.0
      B( L,26) = 0.0
      B( L,27) = Q( L,18)
      B( L,28) = Q( L,19)
      B( L,29) = Q( L,20)
      B( L,30) = Q( L,21)
      B( L,31) = Q( L,22)
      B( L,32) = 0.0
      B( L,33) = Q( L,23)
      B( L,34) = 0.0
      B( L,35) = 0.0
      B( L,36) = Q( L,24)
      B( L,37) = Q( L,25)
      B( L,38) = Q( L,26)
      B( L,39) = Q( L,27)
      B( L,40) = 0.0
      B( L,41) = 0.0
      B( L,42) = 0.0
      B( L,43) = 0.0
      B( L,44) = 0.0
      B( L,45) = 0.0
      B( L,46) = Q( L,28)
      B( L,47) = Q( L,29)
      B( L,48) = Q( L,30)
      B( L,49) = Q( L,31)
   20 CONTINUE
      RETURN
C
C
C     NGR = 1
C
C
  100 DO 30 L = 1, 2
      B(L, 1) = Q(L, 1)
      B(L, 2) = Q(L, 2)
      B(L, 3) = Q(L, 3) *0.5
      B(L, 4) = B(L, 3)
      B(L,50) = Q(L,32)
      B(L,51) = Q(L,33)
      IF(NORDER .EQ. 1) GO TO 30
      B(L, 5) = Q(L, 4)
      B(L, 6) = Q(L, 5)
      B(L, 7) = Q(L, 6) *0.5
      B(L, 8) = B(L, 7)
      B(L, 9) = Q(L, 7)
      B(L,10) = Q(L, 8) *0.5
      B(L,11) = B(L,10)
      B(L,12) = Q(L, 9) *0.25 -Q(L ,3)*0.125
      B(L,13) = Q(L, 9) *0.5  +Q(L, 3)*0.25
      B(L,14) = B(L,12)
      B(L,15) = Q(L,10)
      B(L,16) = Q(L,11)
      B(L,17) = Q(L,12)
      B(L,52) = Q(L,34)
      B(L,53) = Q(L,35)
      B(L,54) = Q(L,36) *0.5
      B(L,55) = B(L,54)
      B(L,56) = Q(L,37)
      B(L,57) = Q(L,38)
      B(L,58) = Q(L,39) *0.5
      B(L,59) = B(L,58)
      IF(NORDER .EQ. 2) GO TO 30
      B(L,18) = Q(L,13)
      B(L,19) = Q(L,14)
      B(L,20) = Q(L,15) *0.5
      B(L,21) = B(L,20)
      B(L,22) = Q(L,16)
      B(L,23) = Q(L,17) *0.5
      B(L,24) = B(L,23)
      B(L,25) = Q(L,18) *0.25 -Q(L, 6)*0.125
      B(L,26) = Q(L,18) *0.5  +Q(L, 6)*0.25
      B(L,27) = B(L,25)
      B(L,28) = Q(L,19)
      B(L,29) = Q(L,20)
      B(L,30) = Q(L,21)
      B(L,31) = Q(L,22)
      B(L,32) = Q(L,23) *0.5
      B(L,33) = B(L,32)
      B(L,34) = Q(L,24) *0.25 -Q(L, 8)*0.125
      B(L,35) = Q(L,24) *0.5  +Q(L, 8)*0.25
      B(L,36) = B(L,34)
      B(L,37) = Q(L,25)
      B(L,38) = Q(L,26)
      B(L,39) = Q(L,27)
      B(L,40) = Q(L,28)*0.125 -Q(L, 9)*0.125 +Q(L, 3)/16.0
      B(L,41) = Q(L,28)*0.375 +Q(L, 9)*0.125 -Q(L, 3)/16.0
      B(L,42) = B(L,41)
      B(L,43) = Q(L,29)*0.5
      B(L,44) = Q(L,30)*0.5
      B(L,45) = Q(L,31)*0.5
      B(L,46) = B(L,40)
      B(L,47) = B(L,43)
      B(L,48) = B(L,44)
      B(L,49) = B(L,45)
   30 CONTINUE
      RETURN
      END
C
C
      SUBROUTINE MULT(A, B, NGROUP, NORDER)
C
C
C     MULTIPLY MATRIX B TO A.  BOTH A AND B ARE ASSUMED TO BE GIVEN IN
C     A SAME DISPERSION BASE.  THE PRODUCT IS STORED IN A.
C
C
      DIMENSION A(2,59), B(2, 59)
C
      GO TO (20, 20, 30), NGROUP
C
C
C     NGROUP = 1 OR 2.
C
C
   20 CONTINUE
      A11  = A(1,1)
      A12  = A(1,2)
      A13  = A(1,3)
      A21  = A(2,1)
      A22  = A(2,2)
      A23  = A(2,3)
      E11  = A(1,32)
      E12  = A(1,33)
      E21  = A(2,32)
      E22  = A(2,33)
      IF(NORDER .LE. 1 ) GO TO 10
      A14  = A(1,4)
      A15  = A(1,5)
      A16  = A(1,6)
      A17  = A(1,7)
      A18  = A(1,8)
      A19  = A(1,9)
      A110 = A(1,10)
      A111 = A(1,11)
      A112 = A(1,12)
      A24  = A(2,4)
      A25  = A(2,5)
      A26  = A(2,6)
      A27  = A(2,7)
      A28  = A(2,8)
      A29  = A(2,9)
      A210 = A(2,10)
      A211 = A(2,11)
      A212 = A(2,12)
      E13  = A(1,34)
      E14  = A(1,35)
      E15  = A(1,36)
      E16  = A(1,37)
      E17  = A(1,38)
      E18  = A(1,39)
      E23  = A(2,34)
      E24  = A(2,35)
      E25  = A(2,36)
      E26  = A(2,37)
      E27  = A(2,38)
      E28  = A(2,39)
      A1111 = A11*A11
      A1112 = A11*A12
      A1113 = A11*A13
      A1121 = A11*A21
      A1122 = A11*A22
      A1123 = A11*A23
      A1212 = A12*A12
      A1213 = A12*A13
      A1221 = A12*A21
      A1222 = A12*A22
      A1223 = A12*A23
      A2113 = A21*A13
      A2121 = A21*A21
      A2122 = A21*A22
      A2123 = A21*A23
      A2213 = A22*A13
      A2222 = A22*A22
      A2223 = A22*A23
      A1313 = A13*A13
      A1323 = A13*A23
      A2323 = A23*A23
      E1111 = E11*E11
      E1112 = E11*E12
      E1121 = E11*E21
      E1122 = E11*E22
      E1212 = E12*E12
      E1221 = E12*E21
      E1222 = E12*E22
      E2121 = E21*E21
      E2122 = E21*E22
      E2222 = E22*E22
      IF(NORDER .LE. 2 ) GO TO 10
      A113 = A(1,13)
      A114 = A(1,14)
      A115 = A(1,15)
      A116 = A(1,16)
      A117 = A(1,17)
      A118 = A(1,18)
      A119 = A(1,19)
      A120 = A(1,20)
      A121 = A(1,21)
      A122 = A(1,22)
      A123 = A(1,23)
      A124 = A(1,24)
      A125 = A(1,25)
      A126 = A(1,26)
      A127 = A(1,27)
      A128 = A(1,28)
      A129 = A(1,29)
      A130 = A(1,30)
      A131 = A(1,31)
      A213 = A(2,13)
      A214 = A(2,14)
      A215 = A(2,15)
      A216 = A(2,16)
      A217 = A(2,17)
      A218 = A(2,18)
      A219 = A(2,19)
      A220 = A(2,20)
      A221 = A(2,21)
      A222 = A(2,22)
      A223 = A(2,23)
      A224 = A(2,24)
      A225 = A(2,25)
      A226 = A(2,26)
      A227 = A(2,27)
      A228 = A(2,28)
      A229 = A(2,29)
      A230 = A(2,30)
      A231 = A(2,31)
 10   CONTINUE
      DO 1 L=1,2
      B1  = B(L,1)
      B2  = B(L,2)
      B3  = B(L,3)
      F1  = B(L,32)
      F2  = B(L,33)
      A(L,1) = B1*A11 +B2*A21
      A(L,2) = B1*A12 +B2*A22
      A(L,3) = B1*A13 +B2*A23 +B3*1.
      A(L,32) = F1*E11 +F2*E21
      A(L,33) = F1*E12 +F2*E22
      IF( NORDER .LE. 1 ) GO TO 1
      B4  = B(L,4)
      B5  = B(L,5)
      B6  = B(L,6)
      B7  = B(L,7)
      B8  = B(L,8)
      B9  = B(L,9)
      B10 = B(L,10)
      B11 = B(L,11)
      B12 = B(L,12)
      F3  = B(L,34)
      F4  = B(L,35)
      F5  = B(L,36)
      F6  = B(L,37)
      F7  = B(L,38)
      F8  = B(L,39)
      A(L,4) =  B1*A14 +B2*A24 +B4*A1111 +B5*A1121 +B7*A2121
      A(L,5) = B1*A15 +B2*A25 +B4*2.*A1112 +B5*(A1122 +A1221) +B7*2.*
     1          A2122
      A(L,6) =  B1*A16 +B2*A26 +B4*2.*A1113 +B5*(A1123 +A2113) +B6*A11
     1         +B7*2.*A2123 +B8*A21
      A(L,7) =  B1*A17 +B2*A27 +B4*A1212 +B5*A1222 +B7*A2222
      A(L,8) =  B1*A18 +B2*A28 +B4*2.*A1213 +B5*(A1223 +A2213) +B6*A12
     1         +B7*2.*A2223 +B8*A22
      A(L,9) =  B1*A19 +B2*A29 +B4*A1313 +B5*A1323 +B6*A13 +B7*A2323 +B8
     1         *A23 +B9*1.
      A(L,10) = B1*A110 +B2*A210 +B10*E11*E11 +B11*E11*E21 +B12*E21*E21
      A(L,11) = B1*A111 +B2*A211 +B10*2.*E11*E12 +B11*(E11*E22 +E12*E21)
     1         +B12*2.*E21*E22
      A(L,12) = B1*A112 +B2*A212 +B10*E12*E12 +B11*E12*E22 +B12*E22*E22
      A(L,34) = F1*E13 +F2*E23 +F3*E11*A11 +F4*E11*A21 +F6*E21*A11
     1         +F7*E21*A21
      A(L,35) = F1*E14 +F2*E24 +F3*E11*A12 +F4*E11*A22 +F6*E21*A12
     1         +F7*E21*A22
      A(L,36) = F1*E15 +F2*E25 +F3*E11*A13 +F4*E11*A23 +F5*E11
     1         +F6*E21*A13 +F7*E21*A23 +F8*E21
      A(L,37) = F1*E16 +F2*E26 +F3*E12*A11 +F4*E12*A21 +F6*E22*A11
     1         +F7*E22*A21
      A(L,38) = F1*E17 +F2*E27 +F3*E12*A12 +F4*E12*A22 +F6*E22*A12
     1         +F7*E22*A22
      A(L,39) = F1*E18 +F2*E28 +F3*E12*A13 +F4*E12*A23 +F5*E12
     1         +F6*E22*A13 +F7*E22*A23 +F8*E22
      IF( NORDER .LE. 2 ) GO TO 1
      B13 = B(L,13)
      B14 = B(L,14)
      B15 = B(L,15)
      B16 = B(L,16)
      B17 = B(L,17)
      B18 = B(L,18)
      B19 = B(L,19)
      B20 = B(L,20)
      B21 = B(L,21)
      B22 = B(L,22)
      B23 = B(L,23)
      B24 = B(L,24)
      B25 = B(L,25)
      B26 = B(L,26)
      B27 = B(L,27)
      B28 = B(L,28)
      B29 = B(L,29)
      B30 = B(L,30)
      B31 = B(L,31)
      A(L,13) = B1*A113 +B2*A213 +B4*2.*A11*A14 +B5*(A11*A24 +A14*A21)
     1         +B7*2.*A21*A24 +B13*A1111*A11 +B14*A1111*A21 +B16*A1121*
     2          A21 +B22*A2121*A21
      A(L,14) = B1*A114 +B2*A214 +B4*2.*(A11*A15 +   A12*A14) +B5*(A11*
     1          A25 +A12*A24 +A15*A21 +A14*A22) +B7*2.*(A21*A25 +A22*A24
     2          ) +B13*3.*A1111*A12 +B14*(2.*A1112*A21+A1111*A22) +B16*
     3          (2.*A1121*A22 +A1221*A21) +B22*3.*A2121*A22
      A(L,15) = B1*A115 +B2*A215 +B4*2.*(A11*A16 +   A13*A14) +B5*(A11*
     1          A26 +A13*A24 +A14*A23 +A16*A21) +B6*A14 +B7*2.*(A21*A26+
     2          A23*A24) +B8*A24 +B13*3.*A1111*A13 +B14*(2.*A1113*A21 +
     3          A1111*A23) +B15*A1111 +B16*(2.*A1121*A23 +A2113*A21)
     4         +B17*A1121 +B22*3.*A2121*A23 +B23*A2121
      A(L,16) = B1*A116 +B2*A216 +B4*(2.*A11*A17 +2.*A12*A15) +B5*(A11*
     1          A27 +A12*A25 +A17*A21 +A15*A22) +B7*2.*(A21*A27+A22*A25)
     2         +B14*(A1212*A21 +2.*A1112*A22) +B16*(A1122*A22 +2.*A1221*
     3          A22) +B22*3.*A21*A2222 +B13*A11*A1212*3.
      A(L,17) = B1*A117 +B2*A217 +B4*2.*(A11*A18 +A12*A16 +A13*A15) +B5*
     1          (A11*A28 +A12*A26 +A13*A25 +A18*A21 +A16*A22 +A15*A23)
     2         +B6*A15 +B7*2.*(A21*A28 +A22*A26 +A23*A25) +B8*A25 +B13*
     3          6.*A1112*A13 +B14*2.*(A1221*A13 +A1122*A13 +A1112*A23)
     4         +B15*2.*A1112 +B16*2.*(A1122*A23 +A1221*A23 +A2122*A13)
     5         +B17*(A1122 +A1221) +B22*6.*A2122*A23 +B23*2.*A2122
      A(L,18) = B1*A118 +B2*A218 +B4*2.*(A11*A19 +A13*A16) +B5*(A11*
     1          A29 +A13*A26 +A19*A21 +A16*A23) +B6*A16 +B7*2.*(A21*A29
     2         +A23*A26) +B8*A26 +B13*3.*A1113*A13   +B14*(A13*A2113
     3         +2.*A1113*A23  ) +B15*2.*A1113 +B16*(A1123*A23 +2.*A2113
     4         *A23) +B17*(A1123 +A2113) +B18*A11 +B22*3.*A2123*A23
     5         +B23*2.*A2123 +B24*A21
      A(L,19) = B1*A119 +B2*A219 +B4*2.*A11*A110 +B5*(A11*A210+A110*A21)
     1         +B7*2.*A21*A210 +B10*2.*E11*E13 +B11*(E11*E23 +E13*E21)
     2         +B12*2.*E21*E23 +B19*A11*E1111 +B20*A11*E1121 +B21*A11*
     3          E2121 +B25*A21*E1111 +B26*A21*E1121 +B27*A21*E2121
      A(L,20) = B1*A120 +B2*A220 +B4*2.*A11*A111 +B5*(A11*A211+A111*A21)
     1         +B7*2.*A21*A211 +B10*2.*(E11*E16 +E12*E13) +B11*(E11*E26
     2         +E12*E23 +E16*E21 +E13*E22) +B12*2.*(E21*E26 +E22*E23)
     3         +B19*2.*A11*E1112 +B20*A11*(E1122 +E1221) +B21*2.*A11*
     4          E2122 +B25*2.*A21*E1112 +B26*A21*(E1122 +E1221) +B27*
     5          2.*A21*E2122
      A(L,21) = B1*A121 +B2*A221 +B4*2.*A11*A112 +B5*(A11*A212+A21*A112)
     1         + B7*2.*A21*A212 +B10*2.*E12*E16 +B11*(E12*E26 +E16*E22)
     2         +B12*2.*E22*E26 +B19*A11*E1212 +B20*A11*E1222 +B21*A11*
     3          E2222 +B25*A21*E1212 +B26*A21*E1222 +B27*A21*E2222
      A(L,22) = B1*A122 +B2*A222 +B4*2.*A12*A17  +B5*(A12*A27 +A17*A22)
     1         +B7*2.*A22*A27 +B13*A12*A1212 +B14*A1212*A22 +B16*A12*
     2          A2222 +B22*A22*A2222
      A(L,23) = B1*A123 +B2*A223 +B4*2.*(A12*A18 +A13*A17) +B5*(A12*A28
     1         +A13*A27 +A18*A22 +A17*A23) +B6*A17 +B7*2.*(A22*A28 +A23
     2         *A27) +B8*A27 +B13*3.*A1212*A13 +B14*(2.*A1222*A13 +A23
     3         *A1212) +B15*A1212 +B16*(2.*A1222*A23 +A2222*A13) +B17*
     4          A1222 +B22*3.*A2222*A23 +B23*A2222
      A(L,24) = B1*A124 +B2*A224 +B4*2.*(A12*A19 +A13*A18) +B5*(A12*A29
     1         +A13*A28 +A19*A22 +A18*A23) +B6*A18 +B7*2.*(A22*A29 +A23
     2         *A28) +B8*A28 +B13*3.*A1213*A13 +B14*(A13*A2213 +A23*2.*
     3          A1213) +B15*2.*A1213 +B16*(A1223*A23 +2.*A13*A2223)
     4         +B17*(A1223 +A2213) +B18*A12 +B22*3.*A22*A2323
     5         +B23*2.*A2223 +B24*A22
      A(L,25) = B1*A125 +B2*A225 +B4*2.*A12*A110 +B5*(A12*A210+A110*A22)
     1         +B7*2.*A22*A210 +B10*2.*E11*E14 +B11*(E11*E24 +E14*E21)
     2         +B12*2.*E21*E24 +B19*A12*E1111 +B20*A12*E1121 +B21*A12*
     3          E2121 +B25*A22*E1111 +B26*A22*E1121 +B27*A22*E2121
      A(L,26) = B1*A126 +B2*A226 +B4*2.*A12*A111 +B5*(A12*A211+A111*A22)
     1         +B7*2.*A22*A211 +B10*2.*(E12*E14 +E11*E17) +B11*(E11*E27
     2         +E12*E24 +E17*E21 +E14*E22) +B12*2.*(E21*E27 +E22*E24)
     3         +B19*2.*A12*E1112 +B20*A12*(E1122+E1221) +B21*2.*A12
     4         *E2122 +B25*2.*A22*E1112 +B26*A22*(E1122+E1221) +B27*2.
     5         *A22*E2122
      A(L,27) = B1*A127 +B2*A227 +B4*2.*A12*A112 +B5*(A12*A212+A112*A22)
     1         +B7*2.*A22*A212 +B10*2.*E12*E17 +B11*(E12*E27 +E17*E22)
     2         +B12*2.*E22*E27 +B19*A12*E1212 +B20*A12*E1222 +B21*A12
     3         *E2222 +B25*A22*E1212 +B26*A22*E1222 +B27*A22*E2222
      A(L,28) = B1*A128 +B2*A228 +B4*2.*A13*A19 +B5*(A13*A29 +A19*A23)
     1         +B6*A19 +B7*2.*A23*A29 +B8*A29 +B13*A1313*A13 +B14*A23
     2         *A1313 +B15*A1313 +B16*A13*A2323 +B17*A1323 +B18*A13
     3         +B22*A23*A2323 +B23*A2323 +B24*A23 +B28
      A(L,29) = B1*A129 +B2*A229 +B4*2.*A13*A110 +B5*(A13*A210+A110*A23)
     1         +B6*A110 +B7*2.*A23*A210 +B8*A210 +B10*2.*E11*E15 +B11*
     2          (E11*E25+E15*E21)+B12*2.*E21*E25+B19*A13*E1111 +B20*A13
     3         *E1121 +B21*A13*E2121 +B25*A23*E1111 +B26*A23*E1121 +B27
     4         *A23*E2121 +B29*E1111 +B30*E1121 +B31*E2121
      A(L,30) = B1*A130 +B2*A230 +B4*2.*A13*A111 +B5*(A13*A211+A111*A23)
     1         +B6*A111 +B7*2.*A23*A211 +B8*A211 +B10*2.*(E11*E18+E12
     2         *E15) +B11*(E11*E28 +E12*E25 +E18*E21 +E15*E22) +B12*2.
     3         *(E21*E28 +E22*E25) +B19*2.*A13*E1112 +B20*A13*(E1122
     4         +E1221)+B21*2.*A13*E2122+B25*2.*A23*E1112 +B26*A23*(E1122
     5         +E1221) +B27*2.*A23*E2122 +B29*2.*E1112 +B30*(E1122
     6         +E1221) +B31*2.*E2122
      A(L,31) = B1*A131 +B2*A231 +B4*2.*A13*A112 +B5*(A13*A212+A112*A23)
     1         +B6*A112 +B7*2.*A23*A212 +B8*A212 +B10*2.*E12*E18 +B11
     2         *(E12*E28 +E18*E22) +B12*2.*E22*E28 +B19*A13*E1212 +B20
     3         *A13*E1222 +B21*A13*E2222 +B25*A23*E1212 +B26*A23*E1222
     4         +B27*A23*E2222 +B29*E1212 +B30*E1222 +B31*E2222
 1    CONTINUE
      RETURN
C
C
C     NGROUP = 3
C
C
   30 CONTINUE
      A11 = A(1,1)
      A12 = A(1,2)
      A13 = A(1,3)
      A14 = A(1,4)
      A21 = A(2,1)
      A22 = A(2,2)
      A23 = A(2,3)
      A24 = A(2,4)
      E11 = A(1,50)
      E12 = A(1,51)
      E21 = A(2,50)
      E22 = A(2,51)
      IF(NORDER .EQ. 1) GO TO 40
      A15 = A(1,5)
      A16 = A(1,6)
      A17 = A(1,7)
      A18 = A(1,8)
      A19 = A(1,9)
      A110 = A(1,10)
      A111 = A(1,11)
      A112 = A(1,12)
      A113 = A(1,13)
      A114 = A(1,14)
      A115 = A(1,15)
      A116 = A(1,16)
      A117 = A(1,17)
      A25 = A(2,5)
      A26 = A(2,6)
      A27 = A(2,7)
      A28 = A(2,8)
      A29 = A(2,9)
      A210 = A(2,10)
      A211 = A(2,11)
      A212 = A(2,12)
      A213 = A(2,13)
      A214 = A(2,14)
      A215 = A(2,15)
      A216 = A(2,16)
      A217 = A(2,17)
      E13 = A(1,52)
      E14 = A(1,53)
      E15 = A(1,54)
      E16 = A(1,55)
      E17 = A(1,56)
      E18 = A(1,57)
      E19 = A(1,58)
      E110 = A(1,59)
      E23 = A(2,52)
      E24 = A(2,53)
      E25 = A(2,54)
      E26 = A(2,55)
      E27 = A(2,56)
      E28 = A(2,57)
      E29 = A(2,58)
      E210 = A(2,59)
      A1111=A11*A11
      A1112=A11*A12
      A1121=A11*A21
      A1122=A11*A22
      A1212=A12*A12
      A1221=A12*A21
      A1222=A12*A22
      A2121=A21*A21
      A2122=A21*A22
      A2222=A22*A22
      E1111=E11*E11
      E1112=E11*E12
      E1121=E11*E21
      E1122=E11*E22
      E1212=E12*E12
      E1221=E12*E21
      E1222=E12*E22
      E2121=E21*E21
      E2222=E22*E22
      E2122=E21*E22
      IF(NORDER .EQ. 2) GO TO 40
      A118 = A(1,18)
      A119 = A(1,19)
      A120 = A(1,20)
      A121 = A(1,21)
      A122 = A(1,22)
      A123 = A(1,23)
      A124 = A(1,24)
      A125 = A(1,25)
      A126 = A(1,26)
      A127 = A(1,27)
      A128 = A(1,28)
      A129 = A(1,29)
      A130 = A(1,30)
      A131 = A(1,31)
      A132 = A(1,32)
      A133 = A(1,33)
      A134 = A(1,34)
      A135 = A(1,35)
      A136 = A(1,36)
      A137 = A(1,37)
      A138 = A(1,38)
      A139 = A(1,39)
      A140 = A(1,40)
      A141 = A(1,41)
      A142 = A(1,42)
      A143 = A(1,43)
      A144 = A(1,44)
      A145 = A(1,45)
      A146 = A(1,46)
      A147 = A(1,47)
      A148 = A(1,48)
      A149 = A(1,49)
      A218 = A(2,18)
      A219 = A(2,19)
      A220 = A(2,20)
      A221 = A(2,21)
      A222 = A(2,22)
      A223 = A(2,23)
      A224 = A(2,24)
      A225 = A(2,25)
      A226 = A(2,26)
      A227 = A(2,27)
      A228 = A(2,28)
      A229 = A(2,29)
      A230 = A(2,30)
      A231 = A(2,31)
      A232 = A(2,32)
      A233 = A(2,33)
      A234 = A(2,34)
      A235 = A(2,35)
      A236 = A(2,36)
      A237 = A(2,37)
      A238 = A(2,38)
      A239 = A(2,39)
      A240 = A(2,40)
      A241 = A(2,41)
      A242 = A(2,42)
      A243 = A(2,43)
      A244 = A(2,44)
      A245 = A(2,45)
      A246 = A(2,46)
      A247 = A(2,47)
      A248 = A(2,48)
      A249 = A(2,49)
   40 CONTINUE
      DO 50 L = 1, 2
      B1 = B(L,1)
      B2 = B(L,2)
      B3 = B(L,3)
      B4 = B(L,4)
      F1 = B(L,50)
      F2 = B(L,51)
      A(L,1) = B1*A11 +B2*A21
      A(L,2) = B1*A12+B2*A22
      A(L,3)= B1*A13+B2*A23+B3
      A(L,4) = B1*A14+B2*A24+B4
      A(L,50)=F1*E11+F2*E21
      A(L,51)=F1*E12+F2*E22
      IF(NORDER .LE. 1) GO TO 50
      B5 = B(L,5)
      B6 = B(L,6)
      B7 = B(L,7)
      B8 = B(L,8)
      B9 = B(L,9)
      B10 = B(L,10)
      B11 = B(L,11)
      B12 = B(L,12)
      B13 = B(L,13)
      B14 = B(L,14)
      B15 = B(L,15)
      B16 = B(L,16)
      B17 = B(L,17)
      F3 = B(L,52)
      F4 = B(L,53)
      F5 = B(L,54)
      F6 = B(L,55)
      F7 = B(L,56)
      F8 = B(L,57)
      F9 = B(L,58)
      F10 = B(L,59)
      A(L,5)=B1*A15+B2*A25+B5*A11*A11+B6*A11*A21+B9*A21*A21
      A(L,6)=B1*A16+B2*A26+B5*2.*A11*A12+B6*(A11*A22+A12*A21)
     1 +B9*2.*A21*A22
      A(L,7)=B1*A17+B2*A27+B5*2.*A11*A13+B6*(A11*A23+A13*A21)
     1 +B7*A11+B9*2.*A21*A23+B10*A21
      A(L,8)=B1*A18+B2*A28+B5*2.*A11*A14+B6*(A11*A24+A14*A21)
     1 +B8*A11+B9*2.*A21*A24+B11*A21
      A(L,9)=B1*A19+B2*A29+B5*A12*A12+B6*A12*A22+B9*A22*A22
      A(L,10)=B1*A110+B2*A210+B5*2.*A12*A13+B6*(A12*A23+A13*A22)
     1 +B7*A12+B9*2.*A22*A23+B10*A22
      A(L,11)=B1*A111+B2*A211+B5*2.*A12*A14+B6*(A12*A24+A14*A22)
     1 +B8*A12+B9*2.*A22*A24+B11*A22
      A(L,12)=B1*A112+B2*A212+B5*A13*A13+B6*A13*A23+B7*A13
     1 +B9*A23*A23+B10*A23 +B12
      A(L,13)=B1*A113+B2*A213+B5*2.*A13*A14+B6*(A13*A24+A14*A23)+B7*A14
     1 +B8*A13+B9*2.*A23*A24+B10*A24+B11*A23 +B13
      A(L,14)=B1*A114+B2*A214+B5*A14*A14+B6*A14*A24+B8*A14
     1 +B9*A24*A24+B11*A24 +B14
      A(L,15)=B1*A115+B2*A215+B15*E11*E11+B16*E11*E21+B17*E21*E21
      A(L,16)=B1*A116+B2*A216+B15*2.*E11*E12+B16*(E11*E22+E12*E21)
     1 +B17*2.*E21*E22
      A(L,17)=B1*A117+B2*A217+B15*E12*E12+B16*E12*E22+B17*E22*E22
      A(L,52)=F1*E13+F2*E23+F3*E11*A11+F4*E11*A21+F7*E21*A11+F8*E21*A21
      A(L,53)=F1*E14+F2*E24+F3*E11*A12+F4*E11*A22+F7*E21*A12+F8*E21*A22
      A(L,54)=F1*E15+F2*E25+F3*E11*A13+F4*E11*A23+F5*E11+F7*E21*A13
     1 +F8*E21*A23+F9*E21
      A(L,55)=F1*E16+F2*E26+F3*E11*A14+F4*E11*A24+F6*E11+F7*E21*A14
     1 +F8*E21*A24 +F10*E21
      A(L,56)=F1*E17+F2*E27+F3*E12*A11+F4*E12*A21+F7*E22*A11+F8*E22*A21
      A(L,57)=F1*E18+F2*E28+F3*E12*A12+F4*E12*A22+F7*E22*A12+F8*E22*A22
      A(L,58)=F1*E19+F2*E29+F3*E12*A13+F4*E12*A23+F5*E12+F7*E22*A13
     1 +F8*E22*A23+F9*E22
      A(L,59)=F1*E110+F2*E210+F3*E12*A14+F4*E12*A24+F6*E12+F7*E22*A14
     1 +F8*E22*A24+F10*E22
      IF(NORDER .LE. 2) GO TO 50
      B18 = B(L,18)
      B19 = B(L,19)
      B20 = B(L,20)
      B21 = B(L,21)
      B22 = B(L,22)
      B23 = B(L,23)
      B24 = B(L,24)
      B25 = B(L,25)
      B26 = B(L,26)
      B27 = B(L,27)
      B28 = B(L,28)
      B29 = B(L,29)
      B30 = B(L,30)
      B31 = B(L,31)
      B32 = B(L,32)
      B33 = B(L,33)
      B34 = B(L,34)
      B35 = B(L,35)
      B36 = B(L,36)
      B37 = B(L,37)
      B38 = B(L,38)
      B39 = B(L,39)
      B40 = B(L,40)
      B41 = B(L,41)
      B42 = B(L,42)
      B43 = B(L,43)
      B44 = B(L,44)
      B45 = B(L,45)
      B46 = B(L,46)
      B47 = B(L,47)
      B48 = B(L,48)
      B49 = B(L,49)
      A(L,18)= B1*A118+B2 *A218 +B5 *2. *A11 *A15 +B6 *(A11*A25 +A15 *
     1 A21 ) +B9 *2. *A21 *A25 +B18 *A1111 *A11 +B19 *A1111 *A21
     2 +B22 *A2121 *A11 +B31 *A2121 *A21
      A(L,19)= B1 *A119 +B2 *A219 +B5 *2. *(A11 *A16 +A12 *A15 )
     1 +B6 *(A11 *A26 +A12 *A25 +A16 *A21 +A15 *A22 ) +B9 *2. *(A21 *A26
     2 +A22 *A25 ) +B18 *3. *A1111 *A12+B19 *(2. *A1112 *A21 +A1111 *
     3 A22 ) +B22 *(2. *A2122 *A11 + A2121 *A12 ) +B31 *3. *A2121 *A22
      A(L,20)= B1 *A120 +B2 *A220 +B5 *2. *(A11 *A17 +A13 *A15 )
     1 +B6 *(A11 *A27 +A13 *A25 +A17 *A21 +A15 *A23 ) +B7 *A15
     2 +B9 *2.*(A21 *A27 +A23 *A25 ) +B10 *A25 +B18 *3.*A1111 *A13
     3 +B19 *(2. *A1121 *A13 +A1111 *A23) +B20 *A1111 +B22 *(2.*A1121
     4  *A23 +A2121 *A13 ) +B23 *A1121 +B31 *3. *A2121 *A23 +B32 *
     5 A2121
      A(L,21)= B1 *A121 +B2 *A221 +B5 *2.*(A11 *A18 +A14 *A15 )
     1 +B6 *(A11 *A28 +A14 *A25 +A18 *A21 +A15 *A24 ) +B8 *A15 +B9 *2.*
     2 (A21 *A28 +A24 *A25 ) +B11 *A25 +B18 *3.*A1111 *A14 +B19 *(2. *
     3 A1121 *A14 +A1111 *A24 ) +B21 *A1111 +B22 *(2. *A1121 *A24
     4 +A2121 *A14) +B24 *A1121 +B31 *3. *A2121 *A24 +B33 *A2121
      A(L,22)= B1 *A122 +B2 *A222 +B5 *2.*(A11 *A19 +A12 *A16)
     1 +B6 *(A11 *A29 +A12 *A26 +A19 *A21 +A16 *A22 ) +B9 *2.*(A21 *A29
     2 +A22 *A26 ) +B18 *3.*A1112 *A12 +B19 *(A1212 *A21 +2. *A1112 *A
     322 ) +B22 *(A2222 *A11 +2. *A2122 *A12 ) +B31 *3. *A2122 *A22
      A(L,23)= B1 *A123 +B2 *A223 +B5 *2. *(A11 *A110 +A12 *A17 +A13 *A1
     16 ) +B6 *(A11 *A210 +A12 *A27 +A13 *A26 +A110 *A21 +A17 *A22 +A16
     2 *A23 ) +B7 *A16 +B9 *2. *(A21 *A210 +A22 *A27 +A23 *A26 ) +B10 *
     3 A26 +B18 *6. *A1112 *A13 +B19 *2. *(A1221 *A13 + A1122 *A13 +
     4 A1112 *A23 ) +B20 *2.*A11 *A12 +B22 *2.*(A1122 *A23 +A1221 *A23
     5 +A2122 *A13) +B23 *(A1122 +A1221 ) +B31 *6.*A2122 *A23 +B32 *2.*
     6 A2122
      A(L,24)= B1 *A124 +B2 *A224 +B5 *2.*(A11*A111 +A12 *A18 +A14 *A16
     1) +B6 *(A11 *A211 +A12 *A28 +A14 *A26 +A111 *A21 +A18 *A22 +A16 *
     2 A24 ) +B8 *A16 +B9 *2.*(A21 *A211 +A22 *A28 +A24 *A26 ) +B11 *
     3 A26 +B18 *6. *A1112 *A14 +B19 *2.*(A1221 *A14 +A1122 *A14 +A1112
     4 *A24 ) +B21 *2. *A1112 +B22 *2.*(A1122 *A24 +A1221 *A24 +A2122 *
     5 A14 ) +B24 *(A1122 +A1221 ) +B31 *6.*A2122 *A24 +B33 *2.*A2122
      A(L,25)= B1 *A125 +B2 *A225 +B5 *2.*(A11 *A112 +A13 *A17 ) +B6 *
     1 (A11 *A212 +A13 *A27 +A112 *A21 +A17 *A23 ) +B7 *A17 +B9 *2.*
     2 (A21 *A212 +A23 *A27 ) +B10 *A27 +B18 *3.*A11 *A13 *A13
     3 +B19 *(A13 *A13 *A21 +2. *A11 *A13 *A23 ) +B20 *2.*A11 *A13 +
     4 B22 *(A23 *A23 *A11 + 2. *A21 *A23 *A13 ) +B23 *(A11 *A23 +A13 *
     5 A21 ) +B25 *A11 +B31 *3.*A21 *A23 *A23 +B32 *2.*A21 *A23 +B34 *A
     621
      A(L,26)=B1 *A126 +B2 *A226 +B5 *2.*(A11 *A113 +A13 *A18 +A14 *A17
     1 ) +B6 *(A11 *A213 +A13 *A28 +A14 *A27 +A113 *A21 +A18 *A23 +A17
     2 *A24 ) +B7 *A18 +B8 *A17 +B9 *2.*(A21 *A213 +A23 *A28 +A24 *A27
     3 ) +B10 *A28 +B11 *A27 +B18 *6. *A11 *A13 *A14 +B19 *2.*(A13
     4 *A14 *A21 +A11 *A14 *A23 +A11 *A13 *A24 ) +B20 *2.*A11 *A14
     5 +B21 *2.*A11 *A13 +B22 *2.*(A23 *A24 *A11 +A21 *A24 *A13 +A21 *A2
     63 *A14 ) +B23 *(A11 *A24 +A14 *A21 ) +B24 *(A11 *A23 +A13 *A21 )
     7 +B26 *A11 +B31 *6. *A21 *A23 *A24 +B32 *2.*A21 *A24 +B33 *2.*A21
     8 *A23 +B35 *A21
      A(L,27)= B1 *A127 +B2 *A227 +B5 *2.*(A11 *A114 +A14 *A18 ) +B6 *
     1 (A11 *A214+A14 *A28+A21 *A114+A18 *A24 ) +B8 *A18 +B9 *2.*(A21
     2 *A214 +A24 *A28 ) +B11 *A28 +B18 *3. *A11 *A14 *A14 +B19 *(A14 *
     3 A14 *A21 +2. *A11 *A14 *A24 ) +B21 *2. *A11 *A14 +B22 *(A24 *
     4 A24 *A11 + 2. *A21 *A24 *A14 ) +B24 *(A11 *A24 +A14 *A21 )
     5 +B27 *A11 +B31 *3.*A21 *A24 *A24 +B33 *2.*A21 *A24 +B36 *A21
      A(L,28)= B1 *A128 +B2 *A228 +B5 *2.*A11 *A115 +B6 *(A11 *A215 +
     1 A115 *A21 ) +B9 *2.*A21 *A215 +B15 *2.*E11 *E13 +B16 *(E11 *E23
     2 +E13 *E21 ) +B17 *2.*E21 *E23 +B28 *A11 *E1111 +B29 *A11 *E1121
     3 +B30 *A11 *E2121 +B37 *A21 *E1111 +B38 *A21 *E1121 +B39 *A21*
     4 E2121
      A(L,29)= B1 *A129 +B2 *A229 +B5 *2. *A11 *A116 +B6 *(A11 *A216 +
     1 A116 *A21 ) +B9 *2. *A21 *A216 +B15 *2.*(E11 *E17 +E12 *E13 )
     2 +B16 *(E11 *E27 +E12 *E23 +E17 *E21 +E13 *E22 ) +B17 *2. *
     3 (E21 *E27 +E22 *E23 ) +B28 *2.*A11*E1112 +B29 *A11 *(E1122 +E1221
     4 ) +B30 *A11 *2.*E2122 +B37 *2.*A21 *E1112 +B38 *A21 *(E1122
     5 +E1221 ) +B39 *2.*A21 *E2122
      A(L,30)= B1*A130 +B2* A230 +B5* 2.*A11 *A117 +B6 *(A11 *A217
     1 +A117 *A21 ) +B9 *2.*A21 *A217 +B15 *2.*E12 *E17 +B16 *(E12 *E27
     2 +E17 *E22 ) +B17 *2.*E22 *E27 +B28 *A11 *E1212 +B29 *A11 *E1222
     3 +B30 *A11 *E2222 +B37 *A21 *E1212 +B38 *A21 *E1222 +B39 *A21 *
     4 E2222
      A(L,31)= B1*A131 +B2*A231 +B5*2.*A12 *A19 +B6*(A12*A29+A19*A22)+2.
     1 *B9*A22*A29 +B18*A1212*A12 +B19*A1212*A22 +B22*A2222*A12
     2 +B31*A2222*A22
      A(L,32)= B1*A132 +B2*A232 +B5*2.*(A12*A110+A13*A19) +B6*(A12*A210
     1 +A13*A29+A110*A22+A19*A23) +B7*A19 +B9*2.*(A22*A210+A23*A29)
     2 +B10*A29 +B18*3.*A1212*A13 +B19*(2.*A1222*A13+A1212*A23) +B20*
     3 A1212 +B22*(2.*A1222*A23+A2222*A13) +B23*A1222+B31*3.*A2222*A23
     4 +B32*A2222
      A(L,33)= B1*A133+B2*A233 +B5*2.*(A12*A111+A14*A19) +B6*(A12*A211
     1 +A14*A29+A111*A22+A19*A24) +B8*A19 +B9*2.*(A22*A211+A24*A29)
     2 +B11*A29 +B18*3.*A1212*A14 +B19*(2.*A1222*A14+A1212*A24) +B21*
     3 A1212 +B22*(2.*A1222*A24+A2222*A14) +B24*A1222 +B31*3.*A2222*A24
     4 +B33*A2222
      A(L,34)= B1*A134 +B2*A234 +B5*2.*(A12*A112+A13*A110) +B6*(A12*A212
     1 +A13*A210+A112*A22+A110*A23) +B7*A110 +B9*2.*(A22*A212+A23*A210)
     3 +B10*A210 +B18*3.*A12*A13*A13 +B19*(A13*A13*A22+2.*A12*A13*A23)
     4 +B20*2.*A12*A13 +B22*(A23*A23*A12+2.*A22*A23*A13) +B23*(A12*A23
     5 +A13*A22) +B25*A12 +B31*3.*A22*A23*A23 +B32*2.*A22*A23 +B34*A22
      A(L,35)= B1*A135 +B2*A235 +B5*2.*(A12*A113+A13*A111+A14*A110)
     1 +B6*(A12*A213+A13*A211+A14*A210+A113*A22+A111*A23+A110*A24) +B7
     2 *A111 +B8*A110 +B9*2.*(A22*A213+A23*A211+A24*A210) +B10*A211 +B11
     3 *A210 +B18*6.*A12*A13*A14 +B19*2.*(A13*A14*A22 +A12*A14*A23 +A12
     4 *A13*A24) +B20*2.*A12*A14 +B21*2.*A12*A13 +B22*2.*(A23*A24*A12
     5 +A22*A24*A13+A22*A23*A14) +B23*(A12*A24+A14*A22) +B24*(A12*A23
     6 +A13*A22) +B26*A12 +B31*6.*A22*A23*A24 +B32*2.*A22*A24 +B33*2.
     7 *A22*A23 +B35*A22
      A(L,36) = B1*A136 +B2*A236 +B5*2.*(A12*A114+A14*A111) +B6*(A12*
     1 A214+A14*A211+A114*A22+A111*A24) +B8*A111 +B9*2.*(A22*A214+A24
     2 *A211) +B11*A211 +B18*3.*A12*A14*A14 +B19*(A14*A14*A22+2.*A12*
     3 A14*A24) +B21*2.*A12*A14 +B22*(A24*A24*A12+2.*A22*A24*A14) +B24
     4 *(A12*A24+A14*A22) +B27*A12 +B31*3.*A22*A24*A24 +B33*2.*A22*A24
     5 +B36*A22
      A(L,37)= B1*A137 +B2*A237 +B5*2.*A12*A115 +B6*(A12*A215+A115*A22)
     1 +B9*2.*A22*A215 +B15*2.*E11*E14 +B16*(E11*E24+E14*E21) +B17*2.
     2 *E21*E24 +B28*A12*E1111 +B29*A12*E1121 +B30*A12*E2121 +B37*A22*
     3 E1111 +B38*A22*E1121 +B39*A22*E2121
      A(L,38)= B1*A138 +B2*A238 +B5*2.*A12*A116 +B6*(A12*A216+A116*A22)
     1 +B9*2.*A22*A216 +B15*2.*(E11*E18+E12*E14) +B16*(E11*E28+E12*E24
     2 +E18*E21+E14*E22) +B17*2.*(E21*E28+E22*E24) +B28*2.*A12*E1112 +
     3 B29*A12*(E1122+E1221) +B30*2.*A12*E2122 +B37*2.*A22*E1112+B38*A22
     4 *(E1122+E1221) +B39*2.*A22*E2122
      A(L,39)= B1*A139+B2*A239 +B5*2.*A12*A117 +B6*(A12*A217+A117*A22)
     1 +B9*2.*A22*A217 +B15*2.*E12*E18 +B16*(E12*E28 +E18*E22) +B17*2.
     2 *E22*E28 +B28*A12*E1212 +B29*A12*E1222 +B30*A12*E2222 +B37*A22
     3 *E1212 +B38*A22*E1222 +B39*A22*E2222
      A(L,40)= B1*A140 +B2*A240 +B5*2.*A13*A112 +B6*(A13*A212+A112*A23)
     1 +B7*A112 +B9*2.*A23*A212 +B10*A212 +B18*A13**3 +B19*A13*A13*A23
     2 +B20*A13*A13 +B22*A23*A23*A13 +B23*A13*A23 +B25*A13 +B31 *A23*A23
     3 *A23 +B32*A23*A23 +B34*A23 +B40
      A(L,41)= B1*A141 +B2*A241 +B5*2.*(A13*A113+A14*A112) +B6*(A13*A213
     1 +A14*A212+A113*A23+A112*A24) +B7*A113 +B8*A112 +B9*2.*(A23*A213
     2 +A24*A212) +B10*A213 +B11*A212 +B18*3.*A13*A13*A14 +B19*(2.*A13
     3 *A14*A23+A13*A13*A24) +B20*2.*A13*A14+B21*A13*A13+B22*(2.*A23*A24
     4 *A13+A23*A23*A14) +B23*(A13*A24+A14*A23) +B24*A13*A23 +B25*A14
     5 +B26*A13 +B31*3.*A23*A23*A24 +B32*2.*A23*A24 +B33*A23*A23 +B34
     6 *A24 +B35*A23 +B41
      A(L,42)= B1*A142 +B2*A242 +B5*2.*(A13*A114+A14*A113) +B6*(A13*A214
     1 +A14*A213+A114*A23+A113*A24) +B7*A114 +B8*A113 +B9*2.*(A23*A214
     2 +A24*A213) +B10*A214 +B11*A213 +B18*3.*A13*A14*A14 +B19*(A14*A14
     3  *A23 +2.*A13*A14*A24) +B20*A14*A14 +B21*2.*A13*A14 +B22*(A24*A24
     4 *A13+2.*A23*A24*A14) +B23*A14*A24 +B24*(A13*A24+A14*A23) +B26*A14
     5 +B27*A13 +B31*3.*A23*A24*A24 +B32*A24*A24 +B33*2.*A23*A24 +B35*
     6 A24 +B36*A23 +B42
      A(L,43)= B1*A143 +B2*A243 +B5*2.*A13*A115 +B6*(A13*A215+A115*A23)
     1 +B7*A115 +B9*2.*A23*A215+B10*A215 +B15*2.*E11*E15 +B16*(E11*E25
     2 +E15*E21) +B17*2.*E21*E25 +B28*A13*E1111 +B29*A13*E1121 +B30*A13
     3 *E2121 +B37*A23*E1111 +B38*A23*E1121 +B39*A23*E2121 +B43*E1111
     4 +B44*E1121 +B45*E2121
      A(L,44)= B1*A144 +B2*A244 +B5*2.*A13*A116 +B6*(A13*A216+A116*A23)
     1 +B7*A116 +B9*2.*A23*A216+B10*A216+B15*2.*(E11*E19+E12*E15) +B16
     2 *(E11*E29+E12*E25+E19*E21+E15*E22) +B17*2.*(E21*E29+E22*E25) +B28
     3 *2.*A13*E1112 +B29*A13*(E1122+E1221) +B30*2.*A13*E2122 +B37*2.
     4 *A23*E1112 +B38*A23*(E1122+E1221) +B39*2.*A23*E2122 +B43*2.*E1112
     5 +B44*(E1122+E1221) +B45*2.*E2122
      A(L,45)=B1*A145 +B2*A245 +B5*2.*A13*A117 +B6*(A13*A217+A117*A23)
     1 +B7*A117 +B9*2.*A23*A217 +B10*A217 +B15*2.*E12*E19 +B16*(E12*E29
     2 +E19*E22) +B17*2.*E22*E29 +B28*A13*E1212 +B29*A13*E1222 +B30*A13
     3 *E2222 +B37*A23*E1212 +B38*A23*E1222 +B39*A23*E2222 +B43*E1212
     4 +B44*E1222 +B45*E2222
      A(L,46)= B1*A146 +B2*A246 +B5*2.*A14*A114 +B6*(A14*A214+A114*A24)
     1 +B8*A114 +B9*2.*A24*A214 +
     2 B11*A214 +B18*A14**3 +B19*A14*A14*A24 +B21*A14*A14 +B22*A24 *A24
     3 *A14+B24*A14*A24+B27*A14 +B31*A24**3 +B33*A24*A24 +B36*A24 +B46
      A(L,47)= B1*A147 +B2*A247 +B5*2.*A14*A115 +B6*(A14*A215+A115*A24)
     1 +B8*A115 +B9*2.*A24*A215 +B11*A215 +B15*2.*E11*E16 +B16*(E11*E26
     2 +E16*E21) +B17*2.*E21*E26 +B28*A14*E1111 +B29*A14*E1121 +B30*A14
     3 *E2121 +B37*A24*E1111 +B38*A24*E1121 +B39*A24*E2121 +B47*E1111
     4 +B48*E1121 +B49*E2121
      A(L,48)= B1*A148 +B2*A248 +B5*2.*A14*A116 +B6*(A14*A216+A116*A24)
     1 +B8*A116 +B9*2.*A24*A216 +B11*A216 +B15*2.*(E11*E110+E12*E16)
     2 +B16*(E11*E210+E12*E26+E110*E21+E16*E22) +B17*2.*(E21*E210+E22
     3 *E26) +B28*2.*A14*E1112 +B29*A14*(E1122+E1221) +B30*2.*A14*E2122
     4 +B37*2.*A24*E1112 +B38*A24*(E1122+E1221) +B39*2.*A24*E2122 +B47
     5 *2.*E1112 +B48*(E1122+E1221) +B49*2.*E2122
      A(L,49)= B1*A149 +B2*A249 +B5*2.*A14*A117 +B6*(A14*A217+A117*A24)
     1 +B8*A117 +B9*2.*A24*A217 +B11*A217 +B15*2.*E12*E110 +B16*(E12*
     2 E210+E110*E22) +B17*2.*E22*E210 +B28*A14*E1212 +B29*A14*E1222
     3 +B30*A14*E2222 +B37*A24*E1212 +B38*A24*E1222 +B39*A24*E2222
     4 +B47*E1212 +B48*E1222 +B49*E2222
   50 CONTINUE
      RETURN
      END
C
C
      BLOCK DATA
C
C
C     INITIALIZATION OF PARAMETERS IN THE PROGRAM.
C
C
      CHARACTER*4 IIBUF, ELEM, TEXT
      CHARACTER*4
     O        N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1        CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,
     2        CM,CO,CP,CV
      COMMON/OPTMIZ/NCONT,NVR,XI(15),XSTEP(15),XF(15),NVEL(15),NVPR(15),
     1              FLIMIT,ITER,TEXT(20),FNUM,IPRINT(100),NPRNT,PROFF,
     2              IIBUF(5,80),IBB,C(36,36),NC,NCM(15),MOUT,MXNV(15),
     3              IIMV(15),JJMV(15)
      COMMON/ELEMNT/ELEM(23), NPRM(23), NFOR(23), NMXE(3, 3),
     1              IXEND(3, 3), IYEND(3, 3), IYSTR(3)
      COMMON/LIMIT/ NELMT, NPLMT, NBMX, NALMT
      COMMON /CHAR/ N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,
     1              OPAR,CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,
     2              CA,CC,CF,CI,CL,CM,CO,CP,CV
C
C
      DATA NCONT/0/
C      DATA ELEM/4HDRFT,4HSENS,4HDEFM,4HQUDM,4HHEXM,4HOCTM,4HDEFE,4HQUDE,
C    1          4HHEXE,4HOCTE,4HTSET,4HXSET,4HYSET,4HENDS,4HMPLM,4HMPLE,
C    2          4HBEAM,4HMTRX,4HAAAA,4HBBBB,4HCCCC,4HDDDD,4HEEEE/
      DATA ELEM/'DRFT','SENS','DEFM','QUDM','HEXM','OCTM','DEFE','QUDE',
     1          'HEXE','OCTE','TSET','XSET','YSET','ENDS','MPLM','MPLE',
     2          'BEAM','MTRX','AAAA','BBBB','CCCC','DDDD','EEEE'/
      DATA NPRM/1, 0, 17, 8, 2, 2, 19, 8, 2, 2, 0, 0, 0, 0, 10, 10,  9,
     1          0, 0,  0, 0, 0, 0/
      DATA NFOR/0, 0, 13, 4, 0, 0,  9, 4, 0, 0, 0, 0, 0, 0,  6,  6,  0,
     1          0, 0,  0, 0, 0, 0/
      DATA NMXE / 5,  5,  6, 20, 20, 27, 39, 39, 59 /
      DATA IXEND/ 3,  3,  4, 12, 12, 17, 31, 31, 49 /
      DATA IYEND/33, 33, 51, 39, 39, 59, 39, 39, 59 /
      DATA IYSTR/32, 32, 50 /
      DATA NELMT,NPLMT,NBMX,NALMT/100, 100, 5, 20/
C     DATA N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
C    1     CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,CM,
C    2     CP,CV/1H0,1H1,1H2,1H3,1H4,1H5,1H6,1H7,1H8,1H9,1H-,1H+,1H/,
C    3     1H*,1H(,1H),1H,,1H.,1H=,1H ,1H:,1H;,1HA,1HC,1HF,1HI,1HL,1HM,
C    4     1HP,1HV/
      DATA N0,N1,N2,N3,N4,N5,N6,N7,N8,N9,MINUS,PLUS,SLASH,STAR,OPAR,
     1     CPAR,COMMA,PERIOD,EQUAL,BLANK,COLON,SEMI,CA,CC,CF,CI,CL,CM,
     2     CP,CV/'0','1','2','3','4','5','6','7','8','9','-','+','/',
     3     '*','(',')',',','.','=',' ',':',';','A','C','F','I','L','M',
     4     'P','V'/
      END
